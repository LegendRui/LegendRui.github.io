{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/images/huishou.jpg","path":"images/huishou.jpg","modified":1,"renderable":0},{"_id":"source/images/udp_socket.png","path":"images/udp_socket.png","modified":1,"renderable":0},{"_id":"source/images/woshou.jpg","path":"images/woshou.jpg","modified":1,"renderable":0},{"_id":"source/images/tcp_socket.png","path":"images/tcp_socket.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/google91a91a043cb68bb0.html","hash":"d528f87d0bcbe19319ccb7d844466d3bf3ad7439","modified":1598189056820},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1576681306000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1576681306000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1576681306000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1576681306000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1576681306000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1576681306000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1576681306000},{"_id":"themes/next/README.md","hash":"dc026053a4d9fb97a58dbc3e9060e480f6852b23","modified":1576681306000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1576681306000},{"_id":"themes/next/_config.yml","hash":"ec5d1584f09c397026a15c5fd8c500934297ab77","modified":1577336578568},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1576681306000},{"_id":"themes/next/package.json","hash":"61aa2ac422e92ad435d1bfedea8d41824f5fe85e","modified":1576681306000},{"_id":"source/_posts/C-面试题.md","hash":"a07df7113daa9c3c58230284620fe3a21dd050d0","modified":1598189056811},{"_id":"source/_posts/Deepin中安装TeXLive-VSCode.md","hash":"8c136680dd81bfc7756015f4b6f6c13bff167e06","modified":1598189056811},{"_id":"source/_posts/Git常用命令.md","hash":"8056b42a7ebbfc14dc681da15e1cec3ce66422c5","modified":1598189056812},{"_id":"source/_posts/Linux学习笔记.md","hash":"997d3aeba425651354d98593d30f1a6b6d200d78","modified":1598189056813},{"_id":"source/_posts/Linux学习笔记之vim编辑器.md","hash":"2a72492b7b40ab6f4ad4217f3a8eefb6f60daf8a","modified":1598189056813},{"_id":"source/_posts/Ubuntu下搭建ftp服务器.md","hash":"b657d887a4bddd5b6df8fe0d06db44d58110608d","modified":1598189056814},{"_id":"source/_posts/feedbacks.md","hash":"1b5ec7b09b5e88a871b792eb36d2c23d6ac17053","modified":1598189056815},{"_id":"source/_posts/gdb调试工具.md","hash":"c9fd806836b1bf716c3dbf9cb1dd1f45beb27eeb","modified":1598189056815},{"_id":"source/_posts/linux.md","hash":"f08295f36bb8d9f837db98b6a4c18234b1d51917","modified":1598189056816},{"_id":"source/_posts/linux下文件的读写操作.md","hash":"3975d1151cfe4b5a3d94795812c38b3a84689d42","modified":1598189056817},{"_id":"source/about/index.md","hash":"c890884e36f9bdca5e3d9dd9423b1f01ddf92d7f","modified":1598189056818},{"_id":"source/archives/index.md","hash":"0046f5a14a5d9c05578f1c68619dc69c7795971e","modified":1598189056819},{"_id":"source/categories/index.md","hash":"37ee74cb70babbe0b22c47e5c8e8ac203a8045a3","modified":1598189056820},{"_id":"source/images/huishou.jpg","hash":"db69468e1767ef5c5e85e4107b8a0d6e33ed0847","modified":1598189056822},{"_id":"source/images/udp_socket.png","hash":"933ba0a46390be833446279fb6a4acc0703b3bbf","modified":1598189056824},{"_id":"source/images/woshou.jpg","hash":"ba82b7e97eef2cedc0c43340c164ce9dd8b88463","modified":1598189056825},{"_id":"source/schedule/index.md","hash":"983f195d0f3e30a7294bb42fd1812f7f604fed1c","modified":1598189056826},{"_id":"source/sitemap/index.md","hash":"fa55762f83861f9c3f7ef8b03a06db3044f41f04","modified":1598189056827},{"_id":"source/tags/index.md","hash":"e4d068261cc0608f7eb49bd43fb4fb49bb5ce4a1","modified":1598189056828},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ef63f34bd3b6bd4d7304d48ce5e0e3e2bead385","modified":1576681306000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"715dcf9b0429a4a4c7107d6d1d00a34e4cf9aa99","modified":1576681306000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1576681306000},{"_id":"themes/next/.github/config.yml","hash":"e4f4b9afe59bc508c4f7634895b33d7d460a7cb1","modified":1576681306000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1576681306000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1576681306000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1576681306000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1576681306000},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1576681306000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1576681306000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1576681306000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"af95594c3cfd92bc1dfdd5368b06b97d202e765e","modified":1576681306000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1576681306000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1576681306000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1576681306000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1576681306000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1576681306000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"682937d48bf5d243842a76190921322e26c75247","modified":1576681306000},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1576681306000},{"_id":"themes/next/languages/de.yml","hash":"285b294b1dd2ce49b0694beb4fd75ed05dc20ccb","modified":1576681306000},{"_id":"themes/next/languages/en.yml","hash":"89eb0cff04435307e4eccb0d72a653499627d02d","modified":1576681306000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1576681306000},{"_id":"themes/next/languages/es.yml","hash":"3bd0977225a9b9dc3cdc856161b3a77e5993ac4a","modified":1576681306000},{"_id":"themes/next/languages/fa.yml","hash":"35468531ad0236df5b188f28bd1b4bb0c0537faf","modified":1576681306000},{"_id":"themes/next/languages/fr.yml","hash":"5fe560d14824c71ea90b2a76d0c17b2332b9d08a","modified":1576681306000},{"_id":"themes/next/languages/hu.yml","hash":"dd9e4cd2873ed9a9ae7cb89962eeff911de396b4","modified":1576681306000},{"_id":"themes/next/languages/id.yml","hash":"80c3db4c2dbbea0703f6c8f1191218f692899507","modified":1576681306000},{"_id":"themes/next/languages/it.yml","hash":"68ac5a0aa361210f51915e101c842ed1c9464889","modified":1576681306000},{"_id":"themes/next/languages/ja.yml","hash":"e61529ddf80426a5362ed07642216027615bd740","modified":1576681306000},{"_id":"themes/next/languages/ko.yml","hash":"14a162509dc71bb364335c20281d3bccbd2a51f3","modified":1576681306000},{"_id":"themes/next/languages/nl.yml","hash":"4d9b09aff03648cbbbfeb0c51a2d1214320b5ec6","modified":1576681306000},{"_id":"themes/next/languages/pt-BR.yml","hash":"024dcdeb30c93e57cd1ba4cd707f8988dcad2468","modified":1576681306000},{"_id":"themes/next/languages/pt.yml","hash":"88fb58e537a949c013a2adcdaebcbe09543c0bd2","modified":1576681306000},{"_id":"themes/next/languages/ru.yml","hash":"f7d5efd6289845f2375bbee8fe883813de745767","modified":1576681306000},{"_id":"themes/next/languages/tr.yml","hash":"e08d8d6ee9507a7c7d4450bc1c76b435470a3739","modified":1576681306000},{"_id":"themes/next/languages/uk.yml","hash":"e58393cf726401bf50a772392e23507d9e11049e","modified":1576681306000},{"_id":"themes/next/languages/vi.yml","hash":"0c0890ccffcb5cca0893de63ebad66e3ce740707","modified":1576681306000},{"_id":"themes/next/languages/zh-CN.yml","hash":"4b36a51556e87d236c6ac6ee6975de1beb95724c","modified":1576681306000},{"_id":"themes/next/languages/zh-TW.yml","hash":"5e395cb492a0b6284f8d2ffdd93f7380db31486f","modified":1576681306000},{"_id":"themes/next/languages/zh-HK.yml","hash":"6d83daf9df1811e3ae6cde5ad778c888d8027b13","modified":1576681306000},{"_id":"themes/next/layout/_layout.swig","hash":"7a6d3727184c2976c2f03371fa5c66b30c5a8a86","modified":1577178726746},{"_id":"themes/next/layout/archive.swig","hash":"26526c09a4334099e2141456697696fcd1f9783f","modified":1576681306000},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1576681306000},{"_id":"themes/next/layout/index.swig","hash":"3bc6fb1e9707d74b96e1346d3f03fe6584f764f4","modified":1576681306000},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1576681306000},{"_id":"themes/next/layout/post.swig","hash":"382d9f9a9b35e1f369585f7f9f9b5dd6fa58d2f0","modified":1576681306000},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1576681306000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1576681306000},{"_id":"source/images/tcp_socket.png","hash":"b97e37177c86424e2a2251192c414f55ea989766","modified":1598189056823},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"ddc1f18952151f3c90f3b9043f2c5dddda857af2","modified":1576681306000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"5e55946ee51cf5b20f5a77510a2ea16c26e40642","modified":1576681306000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"c9bb152643af4692af65b93c4a00690e61131c89","modified":1576681306000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"a5c007b5aa6007cb6cd4a669cf3b59c3e6628fc1","modified":1576681306000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"86ed18d428189bf47978eaa21deb4648f99390f3","modified":1576681306000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1576681306000},{"_id":"themes/next/docs/ru/README.md","hash":"41b1bef32fb991410ebf559b4c45022549f95215","modified":1576681306000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"17d7203e85a8ce9760c42a853dee0f26a8f7ee4e","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"69ce4e0fe171d008b10f4f3f5eb0c3957cbecc2a","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"f0ffb74de522749c9f2fda46970a61bdafbfbc24","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"0b0b9ec6ec4a89e701a3b91f8d7d95752d3e241b","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"b6a3611d40863c12804c5846994786119ce3b79f","modified":1576681306000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"7f37327bbcae7ed7d04d187fd5e9bc6bbf14926a","modified":1576681306000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1576681306000},{"_id":"themes/next/layout/_macro/post.swig","hash":"049caf88e2cb8dde780b0c6196db984c7bc3a4cc","modified":1576681306000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1576681306000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3f9149ff0926d315e6fbe8659596d14c2ea2580d","modified":1577177732717},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1ee6335c12773dc43f8b92136770cb10d460c25c","modified":1576681306000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1576681306000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1576681306000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1577179129771},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1576681306000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1576681306000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1576681306000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1576681306000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1576681306000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"27a70cba93608df862388ab6fb3d3dbf4928d625","modified":1577178890432},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1576681306000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1576681306000},{"_id":"themes/next/scripts/filters/locals.js","hash":"5bbfdc1c373542159660b7a68ed0b57ca18ad10b","modified":1576681306000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1576681306000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1576681306000},{"_id":"themes/next/scripts/filters/post.js","hash":"5e5035372b3d94a65309334c93303c858e072012","modified":1576681306000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1576681306000},{"_id":"themes/next/scripts/events/index.js","hash":"9047d8ae2670e43429b16a7919a08a0a0a81afe0","modified":1576681306000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"c8c8afde59df587f883dd9b47a3c629042bc4c6e","modified":1576681306000},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1576681306000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"58347687b02f7ab5e64bef07525c8efa97c9e8fb","modified":1576681306000},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1576681306000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1576681306000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1576681306000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1576681306000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1576681306000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1576681306000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1576681306000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1576681306000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1576681306000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1576681306000},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1576681306000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1576681306000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1576681306000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1576681306000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1576681306000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1576681306000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1576681306000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1576681306000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1576681306000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1576681306000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1576681306000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1576681306000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1576681306000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1576681306000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1576681306000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1576681306000},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1576681306000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1576681306000},{"_id":"themes/next/source/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1576681306000},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1576681306000},{"_id":"themes/next/source/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1576681306000},{"_id":"themes/next/source/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1576681306000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1576681306000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1576681306000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1576681306000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"a05034a360b818987aa741fa4be667bc86976779","modified":1577272144686},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1576681306000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"1638483d2d2dad1da4c841a6fb9f6ee96b850187","modified":1576681306000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1576681306000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"e6076865dba066c5f0008e22217efb850d5af69c","modified":1576681306000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"54ba9508a901c295a02c8e34e9cece7c7dcad518","modified":1576681306000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"bbf0c8e42491fac70f4f8165224f1d7d92a040d7","modified":1576681306000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1576681306000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1576681306000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1576681306000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1576681306000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1576681306000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1576681306000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1576681306000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1576681306000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1576681306000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"716b78cd90addc4216413719554721cb362b0c18","modified":1576681306000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"d5a5f45ef0b41332cad069d263df2c449e2f1e7e","modified":1576681306000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1576681306000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1576681306000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1576681306000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1576681306000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1576681306000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1576681306000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1576681306000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1576681306000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1576681306000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"d3dc3e051e6816cdd576d00cc70b18b8a4c6a495","modified":1576681306000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1ef172bc041d6f6b6c8c642ea64496a188d79029","modified":1576681306000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"0992d51dff4b8f4f4e69834c8cd1604593536c5d","modified":1576681306000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1576681306000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4d6f9e09ca4056ff6a5d4923e202126a75242183","modified":1576681306000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1576681306000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1576681306000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1576681306000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1576681306000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1576681306000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1576681306000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1576681306000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1576681306000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1576681306000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1576681306000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"0ea0bac09b0747bc16fde852164c0eaab2efe02c","modified":1576681306000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1576681306000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"4a7207c6f9ab0e56ea8f59aca3ed4c2cb2fb7450","modified":1576681306000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1576681306000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1576681306000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1576681306000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1576681306000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1576681306000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"5ba0480c2dbb0626501c90c920be85ce2308103c","modified":1576681306000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1576681306000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1576681306000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1576681306000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e24c4dd78f6e4adee0e7c15eb8bca12eb92452e4","modified":1576681306000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"436c5597dc7dae91ed20e3f4134db94d91c84b49","modified":1576681306000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1576681306000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1576681306000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1576681306000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1576681306000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1576681306000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1576681306000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1576681306000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1576681306000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d4e817e2b238ace5d7ac568ce0c5380196a6d039","modified":1576681306000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1576681306000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1576681306000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1576681306000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1576681306000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4f7879a50d4608c46cc2061c725a2564597a45bd","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"2b52b0eb4c66e06762cf115450da0ca1dd435e75","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4fb385d8533877678440c8faa08b68fa793cb1a2","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"1693ec6b53758ac15d2c7798c789d6ae8af913ea","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c6905c694c6fbbf372b53456a0d219701010a110","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"71a3d7f2242706f7a6b79933a67ef3664cca3a24","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d7587df06b30042091316d8b1cc58ba361211492","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1576681306000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"5d5c022aa3b2f89c2f2a178212338bb64804dd75","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"bcba503e956e4b737b062faa66341bd880f16c10","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9df5ba77e6cf36129bddc270407215c23c60ff38","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"284249dcfa3b49c5d76210bbb0f74f65fc2f12ea","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1576681306000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1577178952337},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f5821481440a0624c8aec5fc85f093de1527095f","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"2aaf8cd5c56c62c9d20f28894f51d55da9213027","modified":1576690508000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"c27b3056d5e22d3c66d8a152a23634314d5c4a60","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"c83d750238d6ac13b65869a909465fe621c464c3","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1576681306000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"b492a45422773ab2af06ee345d527ba4c6bbc608","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"b4923515ca8e44aa62e839ce948f759cfd1f896f","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"1a14c1b92d8a4dd8aabb5949333ac0ac79094c6c","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"d2f0f2171722533bba308f944a2ec727b083582c","modified":1576681306000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1576681306000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1576681306000},{"_id":"public/sitemap.xml","hash":"8f42eeed6fdc76ea9c72c854e601f6d10f6c814f","modified":1598286925653},{"_id":"public/google91a91a043cb68bb0.html","hash":"7a11097ebd6cf423e81c5f67455bc85f449ffc34","modified":1598286925653},{"_id":"public/about/index.html","hash":"d05de6382afaa9c106a2018429b4a67a05919842","modified":1598286925653},{"_id":"public/categories/index.html","hash":"cdfced478298c707645c2f2927fd83425f7a24e3","modified":1598286925653},{"_id":"public/sitemap/index.html","hash":"17de1b2087905962836c38674087816bb0634bfe","modified":1598286925653},{"_id":"public/tags/index.html","hash":"6709e87d2ee3b950899bfd36f69fde1ee035595a","modified":1598286925653},{"_id":"public/archives/index.html","hash":"aa2590cc2a70e927b2d193ce961a95e2fa7907aa","modified":1598286925653},{"_id":"public/schedule/index.html","hash":"e04c49e1c7618ded15e3db77fc18289d07605e8b","modified":1598286925653},{"_id":"public/2020/01/05/feedbacks/index.html","hash":"4f8901b56cdf246c0e9fb2fc8e82fa3c102f3e0a","modified":1598286925653},{"_id":"public/archives/2020/index.html","hash":"c2b73cdc4112f3ed652b4ab0ba6247e2592a8679","modified":1598286925653},{"_id":"public/archives/2020/01/index.html","hash":"1d39cb9f780c6266aa0d005823edd4eace25310c","modified":1598286925653},{"_id":"public/categories/C/index.html","hash":"718b9251072427b2a036c18e9d4b60f557d9893b","modified":1598286925653},{"_id":"public/categories/linux/index.html","hash":"0bd9385906bf350b767a7fb1a77de1b996724b2d","modified":1598286925653},{"_id":"public/categories/Linux/index.html","hash":"083383c9ebb16564345d02cb251b590c5d8678ea","modified":1598286925653},{"_id":"public/categories/读书笔记/index.html","hash":"e0415a1dcc3205d583b57e7361e6cec59dae194f","modified":1598286925653},{"_id":"public/tags/deepin/index.html","hash":"c479fdbb976ec5a745b9079bb4b56837ee5f7fa1","modified":1598286925653},{"_id":"public/tags/texlive/index.html","hash":"87e970f4e835cbd9c30abe3e9d6283260e94781d","modified":1598286925653},{"_id":"public/tags/vscode/index.html","hash":"f5f329401f086c45e516d6c2ff078c7f8dea0f21","modified":1598286925653},{"_id":"public/tags/Linux/index.html","hash":"cb61712647e700ab0e5d3751a9adf695dc7d7366","modified":1598286925653},{"_id":"public/tags/vim/index.html","hash":"bff5a4a303ec1c355e1b3df47c6298e4025ba0dd","modified":1598286925653},{"_id":"public/tags/linux/index.html","hash":"2f53774222d051ae24b007905c1c167492da8563","modified":1598286925653},{"_id":"public/tags/git/index.html","hash":"f63412de62bca2956678641117fc04cd81fe6858","modified":1598286925653},{"_id":"public/tags/nonlinear-control/index.html","hash":"80851baaee8c33b4d3b09cceec5092a22b0cd802","modified":1598286925653},{"_id":"public/tags/gdb/index.html","hash":"4341d51f3ff2f6d4a23e04dcf5b8b17873820c4f","modified":1598286925653},{"_id":"public/tags/ftp/index.html","hash":"ad13286ac979017edb9b3e2db66a8cd40c59df48","modified":1598286925653},{"_id":"public/2020/01/05/Deepin中安装TeXLive-VSCode/index.html","hash":"60faa794e29e1122e406380a700774c1a89bd16a","modified":1598286925653},{"_id":"public/2020/01/05/linux下文件的读写操作/index.html","hash":"b199f49a55da0d4abf671385d33903aaf253f9b3","modified":1598286925653},{"_id":"public/2019/12/29/gdb调试工具/index.html","hash":"172babd8fd1f571e2963e40f696014482fe2cb2e","modified":1598286925653},{"_id":"public/2019/12/26/Git常用命令/index.html","hash":"3501dc8bb26497b84654c1ae468baa6d6ec8415d","modified":1598286925653},{"_id":"public/2019/12/25/Ubuntu下搭建ftp服务器/index.html","hash":"a1009f51889473f9942d474400d99803fdb33f3c","modified":1598286925653},{"_id":"public/2019/12/24/linux/index.html","hash":"1f734c653a013d327b6710d12defe3806f7d5c8d","modified":1598286925653},{"_id":"public/2019/12/21/Linux学习笔记之vim编辑器/index.html","hash":"936843a36240834cfa5cc3876532fa2643cdfb72","modified":1598286925653},{"_id":"public/2019/12/18/C-面试题/index.html","hash":"136a979649babb76e9c77fb53aeea85d5aaa861b","modified":1598286925653},{"_id":"public/archives/2019/index.html","hash":"96fd4f15c73abb137df447800cc1de0e83ce3d1c","modified":1598286925653},{"_id":"public/2019/12/18/Linux学习笔记/index.html","hash":"cd430a59a19d23bf0fc90ed8fbb09ce72410d641","modified":1598286925653},{"_id":"public/archives/2019/12/index.html","hash":"b5f7bcf43232d0951ac55b81bb1651544bf37489","modified":1598286925653},{"_id":"public/index.html","hash":"47b204477f6822919b4e78c0803f3e83141441a6","modified":1598286925653},{"_id":"public/images/woshou.jpg","hash":"ba82b7e97eef2cedc0c43340c164ce9dd8b88463","modified":1598286925653},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1598286925653},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1598286925653},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1598286925653},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1598286925653},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1598286925653},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1598286925653},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1598286925653},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1598286925653},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1598286925653},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1598286925653},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1598286925653},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1598286925653},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1598286925653},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1598286925653},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1598286925653},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1598286925653},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1598286925653},{"_id":"public/images/huishou.jpg","hash":"db69468e1767ef5c5e85e4107b8a0d6e33ed0847","modified":1598286925653},{"_id":"public/images/udp_socket.png","hash":"933ba0a46390be833446279fb6a4acc0703b3bbf","modified":1598286925653},{"_id":"public/images/tcp_socket.png","hash":"b97e37177c86424e2a2251192c414f55ea989766","modified":1598286925653},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1598286925653},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1598286925653},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1598286925653},{"_id":"public/js/utils.js","hash":"41fa3f7cc18e028263b6fa524a3a95fc93b1b81e","modified":1598286925653},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1598286925653},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1598286925653},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1598286925653},{"_id":"public/js/motion.js","hash":"09f8be6bcc6920546bb06e3f8c0181ec62c70b90","modified":1598286925653},{"_id":"public/js/schemes/pisces.js","hash":"52d139e6f3bc212c8c9b71bc9e57e931920434a6","modified":1598286925653},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1598286925653},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1598286925653},{"_id":"public/css/main.css","hash":"1e023aa9c4d08517fcc2a06fa1b1ff4669e62d6d","modified":1598286925653},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1598286925653},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1598286925653},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1598286925653},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1598286925653},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1598286925653},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1598286925653}],"Category":[{"name":"C++","_id":"cke8qrq7400059s722h7g0vp2"},{"name":"linux","_id":"cke8qrq7e000a9s724ldk25c6"},{"name":"读书笔记","_id":"cke8qrq7j000g9s72f7fk09si"},{"name":"Linux","_id":"cke8qrq7q000o9s72219ph0a9"}],"Data":[],"Page":[{"_content":"google-site-verification: google91a91a043cb68bb0.html","source":"google91a91a043cb68bb0.html","raw":"google-site-verification: google91a91a043cb68bb0.html","date":"2020-08-23T13:24:16.820Z","updated":"2020-08-23T13:24:16.820Z","path":"google91a91a043cb68bb0.html","title":"","comments":1,"layout":"page","_id":"cke8qrq4e00009s727tieg7v7","content":"google-site-verification: google91a91a043cb68bb0.html","site":{"data":{}},"length":52,"excerpt":"","more":"google-site-verification: google91a91a043cb68bb0.html"},{"title":"about","date":"2019-12-21T06:20:38.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-21 14:20:38\ntype: \"about\"\n---\n","updated":"2020-08-23T13:24:16.818Z","path":"about/index.html","comments":1,"layout":"page","_id":"cke8qrq98001d9s72hjofahy4","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"archives","date":"2019-12-21T06:15:52.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-12-21 14:15:52\ntype: \"archives\"\n---\n","updated":"2020-08-23T13:24:16.819Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cke8qrq99001e9s72496xbpsx","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"categories","date":"2019-12-21T06:13:08.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-12-21 14:13:08\ntype: \"categories\"\n---\n","updated":"2020-08-23T13:24:16.820Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cke8qrq9b001g9s721f0ifm5v","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"schedule","date":"2019-12-21T06:21:51.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2019-12-21 14:21:51\ntype: \"schedule\"\n---\n","updated":"2020-08-23T13:24:16.826Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"cke8qrq9d001i9s72blmlawo7","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"sitemap","date":"2019-12-21T06:22:34.000Z","type":"sitemap","_content":"","source":"sitemap/index.md","raw":"---\ntitle: sitemap\ndate: 2019-12-21 14:22:34\ntype: \"sitemap\"\n---\n","updated":"2020-08-23T13:24:16.827Z","path":"sitemap/index.html","comments":1,"layout":"page","_id":"cke8qrq9f001j9s72e6wad5sr","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"tags","date":"2019-12-21T06:11:07.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-12-21 14:11:07\ntype: \"tags\"\n---\n","updated":"2020-08-23T13:24:16.828Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cke8qrq9g001k9s723zdh0l5k","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Deepin中安装TeXLive+VSCode","date":"2020-01-05T13:45:49.000Z","_content":"\n#### 1 安装TexLive\n##### 1.1 到镜像网站下载TexLive安装包\n点击[科大镜像](https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso)或[清华镜像](https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso)下载\n\n##### 1.2 挂载镜像文件\n切换到安装包所在目录，在命令行输入\n```\nsudo mount -o loop texlive2019.iso /mnt\ncd /mnt/\nsudo ./install-tl\n```\n**注意：**到这一步会问你是否安装，输入`I`继续安装。\n\n##### 1.3 卸载镜像文件\n```\ncd /\nsudo umount /mnt\n```\n\n#### 2 安装VSCode\n打开应用商店，搜索vscode，点击安装即可。\n\n#### 3 安装插件\n##### 3.1 安装LaTeX language support\n打开VSCode，按下`ctrl+shift+x`调出插件市场，搜索LaTeX language support，安装。\n\n##### 3.2 安装LaTeX Workshop\n按同**3.1**的方法安装LaTeX Workshop。\n\n#### 4 下载毕业论文模板\n这里使用的是中国科学技术大学的论文模板。如果电脑有安装git，可以在命令行输入：\n```\ngit clone git@github.com:ustctug/ustcthesis.git\n```\n没有安git的话，可以直接到GitHub[下载](https://github.com/ustctug/ustcthesis)。\n\n#### 5 开始\n选择用VSCode打开模板文件夹下的`main.tex`，输入`Ctrl+K`然后按`V`，打开PDF预览窗口。再输入快捷键`Ctrl+Alt+X`打开TeX命令窗口，点击`build`命令。大功告成！","source":"_posts/Deepin中安装TeXLive-VSCode.md","raw":"---\ntitle: Deepin中安装TeXLive+VSCode\ndate: 2020-01-05 21:45:49\ntags:\n    - deepin\n    - texlive\n    - vscode\ncategories: \n---\n\n#### 1 安装TexLive\n##### 1.1 到镜像网站下载TexLive安装包\n点击[科大镜像](https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso)或[清华镜像](https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso)下载\n\n##### 1.2 挂载镜像文件\n切换到安装包所在目录，在命令行输入\n```\nsudo mount -o loop texlive2019.iso /mnt\ncd /mnt/\nsudo ./install-tl\n```\n**注意：**到这一步会问你是否安装，输入`I`继续安装。\n\n##### 1.3 卸载镜像文件\n```\ncd /\nsudo umount /mnt\n```\n\n#### 2 安装VSCode\n打开应用商店，搜索vscode，点击安装即可。\n\n#### 3 安装插件\n##### 3.1 安装LaTeX language support\n打开VSCode，按下`ctrl+shift+x`调出插件市场，搜索LaTeX language support，安装。\n\n##### 3.2 安装LaTeX Workshop\n按同**3.1**的方法安装LaTeX Workshop。\n\n#### 4 下载毕业论文模板\n这里使用的是中国科学技术大学的论文模板。如果电脑有安装git，可以在命令行输入：\n```\ngit clone git@github.com:ustctug/ustcthesis.git\n```\n没有安git的话，可以直接到GitHub[下载](https://github.com/ustctug/ustcthesis)。\n\n#### 5 开始\n选择用VSCode打开模板文件夹下的`main.tex`，输入`Ctrl+K`然后按`V`，打开PDF预览窗口。再输入快捷键`Ctrl+Alt+X`打开TeX命令窗口，点击`build`命令。大功告成！","slug":"Deepin中安装TeXLive-VSCode","published":1,"updated":"2020-08-23T13:24:16.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq6n00019s72h6cg2gti","content":"<h4 id=\"1-安装TexLive\"><a href=\"#1-安装TexLive\" class=\"headerlink\" title=\"1 安装TexLive\"></a>1 安装TexLive</h4><h5 id=\"1-1-到镜像网站下载TexLive安装包\"><a href=\"#1-1-到镜像网站下载TexLive安装包\" class=\"headerlink\" title=\"1.1 到镜像网站下载TexLive安装包\"></a>1.1 到镜像网站下载TexLive安装包</h5><p>点击<a href=\"https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso\" target=\"_blank\" rel=\"noopener\">科大镜像</a>或<a href=\"https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso\" target=\"_blank\" rel=\"noopener\">清华镜像</a>下载</p>\n<h5 id=\"1-2-挂载镜像文件\"><a href=\"#1-2-挂载镜像文件\" class=\"headerlink\" title=\"1.2 挂载镜像文件\"></a>1.2 挂载镜像文件</h5><p>切换到安装包所在目录，在命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -o loop texlive2019.iso &#x2F;mnt</span><br><span class=\"line\">cd &#x2F;mnt&#x2F;</span><br><span class=\"line\">sudo .&#x2F;install-tl</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>到这一步会问你是否安装，输入<code>I</code>继续安装。</p>\n<h5 id=\"1-3-卸载镜像文件\"><a href=\"#1-3-卸载镜像文件\" class=\"headerlink\" title=\"1.3 卸载镜像文件\"></a>1.3 卸载镜像文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;</span><br><span class=\"line\">sudo umount &#x2F;mnt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-安装VSCode\"><a href=\"#2-安装VSCode\" class=\"headerlink\" title=\"2 安装VSCode\"></a>2 安装VSCode</h4><p>打开应用商店，搜索vscode，点击安装即可。</p>\n<h4 id=\"3-安装插件\"><a href=\"#3-安装插件\" class=\"headerlink\" title=\"3 安装插件\"></a>3 安装插件</h4><h5 id=\"3-1-安装LaTeX-language-support\"><a href=\"#3-1-安装LaTeX-language-support\" class=\"headerlink\" title=\"3.1 安装LaTeX language support\"></a>3.1 安装LaTeX language support</h5><p>打开VSCode，按下<code>ctrl+shift+x</code>调出插件市场，搜索LaTeX language support，安装。</p>\n<h5 id=\"3-2-安装LaTeX-Workshop\"><a href=\"#3-2-安装LaTeX-Workshop\" class=\"headerlink\" title=\"3.2 安装LaTeX Workshop\"></a>3.2 安装LaTeX Workshop</h5><p>按同<strong>3.1</strong>的方法安装LaTeX Workshop。</p>\n<h4 id=\"4-下载毕业论文模板\"><a href=\"#4-下载毕业论文模板\" class=\"headerlink\" title=\"4 下载毕业论文模板\"></a>4 下载毕业论文模板</h4><p>这里使用的是中国科学技术大学的论文模板。如果电脑有安装git，可以在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:ustctug&#x2F;ustcthesis.git</span><br></pre></td></tr></table></figure>\n<p>没有安git的话，可以直接到GitHub<a href=\"https://github.com/ustctug/ustcthesis\" target=\"_blank\" rel=\"noopener\">下载</a>。</p>\n<h4 id=\"5-开始\"><a href=\"#5-开始\" class=\"headerlink\" title=\"5 开始\"></a>5 开始</h4><p>选择用VSCode打开模板文件夹下的<code>main.tex</code>，输入<code>Ctrl+K</code>然后按<code>V</code>，打开PDF预览窗口。再输入快捷键<code>Ctrl+Alt+X</code>打开TeX命令窗口，点击<code>build</code>命令。大功告成！</p>\n","site":{"data":{}},"length":587,"excerpt":"","more":"<h4 id=\"1-安装TexLive\"><a href=\"#1-安装TexLive\" class=\"headerlink\" title=\"1 安装TexLive\"></a>1 安装TexLive</h4><h5 id=\"1-1-到镜像网站下载TexLive安装包\"><a href=\"#1-1-到镜像网站下载TexLive安装包\" class=\"headerlink\" title=\"1.1 到镜像网站下载TexLive安装包\"></a>1.1 到镜像网站下载TexLive安装包</h5><p>点击<a href=\"https://mirrors.ustc.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso\" target=\"_blank\" rel=\"noopener\">科大镜像</a>或<a href=\"https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso\" target=\"_blank\" rel=\"noopener\">清华镜像</a>下载</p>\n<h5 id=\"1-2-挂载镜像文件\"><a href=\"#1-2-挂载镜像文件\" class=\"headerlink\" title=\"1.2 挂载镜像文件\"></a>1.2 挂载镜像文件</h5><p>切换到安装包所在目录，在命令行输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -o loop texlive2019.iso &#x2F;mnt</span><br><span class=\"line\">cd &#x2F;mnt&#x2F;</span><br><span class=\"line\">sudo .&#x2F;install-tl</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong>到这一步会问你是否安装，输入<code>I</code>继续安装。</p>\n<h5 id=\"1-3-卸载镜像文件\"><a href=\"#1-3-卸载镜像文件\" class=\"headerlink\" title=\"1.3 卸载镜像文件\"></a>1.3 卸载镜像文件</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#x2F;</span><br><span class=\"line\">sudo umount &#x2F;mnt</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-安装VSCode\"><a href=\"#2-安装VSCode\" class=\"headerlink\" title=\"2 安装VSCode\"></a>2 安装VSCode</h4><p>打开应用商店，搜索vscode，点击安装即可。</p>\n<h4 id=\"3-安装插件\"><a href=\"#3-安装插件\" class=\"headerlink\" title=\"3 安装插件\"></a>3 安装插件</h4><h5 id=\"3-1-安装LaTeX-language-support\"><a href=\"#3-1-安装LaTeX-language-support\" class=\"headerlink\" title=\"3.1 安装LaTeX language support\"></a>3.1 安装LaTeX language support</h5><p>打开VSCode，按下<code>ctrl+shift+x</code>调出插件市场，搜索LaTeX language support，安装。</p>\n<h5 id=\"3-2-安装LaTeX-Workshop\"><a href=\"#3-2-安装LaTeX-Workshop\" class=\"headerlink\" title=\"3.2 安装LaTeX Workshop\"></a>3.2 安装LaTeX Workshop</h5><p>按同<strong>3.1</strong>的方法安装LaTeX Workshop。</p>\n<h4 id=\"4-下载毕业论文模板\"><a href=\"#4-下载毕业论文模板\" class=\"headerlink\" title=\"4 下载毕业论文模板\"></a>4 下载毕业论文模板</h4><p>这里使用的是中国科学技术大学的论文模板。如果电脑有安装git，可以在命令行输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:ustctug&#x2F;ustcthesis.git</span><br></pre></td></tr></table></figure>\n<p>没有安git的话，可以直接到GitHub<a href=\"https://github.com/ustctug/ustcthesis\" target=\"_blank\" rel=\"noopener\">下载</a>。</p>\n<h4 id=\"5-开始\"><a href=\"#5-开始\" class=\"headerlink\" title=\"5 开始\"></a>5 开始</h4><p>选择用VSCode打开模板文件夹下的<code>main.tex</code>，输入<code>Ctrl+K</code>然后按<code>V</code>，打开PDF预览窗口。再输入快捷键<code>Ctrl+Alt+X</code>打开TeX命令窗口，点击<code>build</code>命令。大功告成！</p>\n"},{"title":"C++面试题","date":"2019-12-18T09:14:52.000Z","_content":"\n\n#### 1 TCP三次握手与四次挥手\n##### 三次握手\n* 第一次：Client将SYN标志位置为1，随机产生一个序号seq=x，将该数据包发送给Server，Client进入SYN_SENT状态，等待Server回应\n* 第二次：Server收到数据包后根据SYN为1判断Cl6ient请求建立连接。Server将标志位SYN与ACK都置为1，ack=x+1，随机产生一个序号seq=y，将该数据包发送给Client，Server进入SYN_RCVD状态\n* 第三次：Client收到确认数据包后，检查是否ack=x+1，如果正确则将ACK置为1，ack=y+1，seq=x+1，并将该数据包发送给Server，Server收到后确认是否ACK=1，是否ack=y+1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，三次握手结束 \n![握手过程](/images/woshou.jpg \"woshou\")\n\n##### 四次挥手\n* 第一次：Client将FIN标志位置为1，随机产生一个序号seq=u,将该数据包发送给Server，此后Client停止发送数据，Client进入FIN_WAIT_1状态\n* 第二次：Server收到数据包后根据FIN=1判断Client请求断开连接，Server将ACK=1，将ack=u+1，随机产生一个序号seq=v，发送该数据包，Server进入CLOSE_WAIT状态，等待将数据发送完；Client收到该数据包后进入CLOSE_WAIT_2状态\n* 第三次：Server将FIN=1，ACK=1，ack=u+1，随机产生一个序号seq=w，将该数据包发送给Client，Server进入LAST_ACK状态\n* 第四次：Client收到数据包后检查其中FIN，发现为1，接着将ACK=1，seq=u+1，ack=w+1，发送给数据包给Server，Client进入TIME_WAIT状态；Server收到后关闭连接，进入CLOSE状态，Client在发送给数据包后等待2MSL（报文最大生存时间）然后关闭连接，进入CLOSE状态\n![挥手过程](/images/huishou.jpg \"huishou\")\n\n#### 2 挥手与握手过程中Client与Server的状态变化\n+ Client：CLOSE -> SYN_SENT -> ESTABLISHED -> FIN_WAIT_1 -> FIN_WAIT_2 -> TIME_WAIT -> CLOSE\n+ Server:LISTEN -> SYN_RCVD -> ESTABLISHED -> CLOSE_WAIT -> LAST_ACK -> CLOSE\n\n#### 3 为什么三次握手、四次挥手？\n+ 三次握手：三次握手可以防止已经失效的请求连接的报文突然有传输到服务器端导致服务器资源的浪费。\n+ 四次挥手：由于Server收到ClientFIN报文的时候可能还有数据需要传送，因此先发送ACK报文告知Client请求收到，等待Server发送完数据，就可以像Client发送FIN报文告知数据发送完毕\n\n#### 4 TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传\n+ 滑动窗口协议\n    * 窗口：发送者可以连续发送一段字节序列而不需等待接受者的应答，这段连续序列的长度称为窗口\n    * 滑动：窗口的大小是可以随着发送的过程而变化的\n\n+ 流量控制：主要是接收方传递消息给发送方，使其不要发送数据太快。具体实现为应答的ACK包中会包含自己的接收窗口的大小，利用窗口的大小控制发送方数据的发送速度\n\n+ 拥塞控制：防止过多的数据注入到网络中导致路由器或链路过载。具体实现的方法为：（1）慢启动、拥塞控制；（2）快重传、快恢复\n    * 慢启动：定义拥塞窗口，初始大小为1，之后每次收到确认应答，将拥塞窗口的大小*2\n    * 拥塞避免：设置慢启动阈值，一般为65535,，当拥塞窗口大于这个阈值后，每次收到确认应答将拥塞窗口的大小+1\n    * 快重传：如果接收方发现某个包丢失，会对发送方发送重传请求；一旦发送方收到三个一样的ack，立即重传该包；随后快恢复\n    * 快恢复：首先将慢启动阈值设置为当前拥塞窗口的1/2；然后将拥塞窗口重新设置为慢启动阈值大小+3\n    \n#### 5 OSI七层模型和TCP/IP四层模型\n+ OSI七层模型\n    * 物理层：主要协议IEEE802.3、RJ45等\n    * 数据链路层：主要协议MAC、VLAN等\n    * 网络层：主要协议为IP、ARP、ICMP、IGMP等\n    * 传输层：主要协议为TCP、UDP等\n    * 会话层：主要协议为RPC等\n    * 表示层：主要协议为JPEG等\n    * 应用层：主要协议为FTP、HTTP、DNS等\n\n+ TCP/IP四层模型\n    * 网络接口层：MAC、VLAN等\n    * 网络层：IP、ARP、ICMP、IGMP等\n    * 传输层：TCP、UDP等\n    * 应用层：HTTP、DNS、SMTP\n\n#### 6 TCP与UDP的区别\n+ TCP是面向连接的、可靠的，而UDP是非面向连接、不可靠的\n+ TCP一对一，UDP支持一对一，一对多，多对一，多对多\n+ TCP具有拥塞控制与流量控制而UDP没有\n+ TCP报文长度动态改变而UDP不是\n+ TCP传输单位为报文段，而UDP传输单位为用户数据报\n+ TCP注重安全性，而UDP数据传输快\n+ 用TCP的协议：FTP、Telnet、SMTP、POP3、HTTP(s)，用UDP的协议：DNS、SNMP、TFTP\n\n#### 7 HTTP与HTTPS的区别\n+ 区别如下：\n    1. HTTP协议传输的数据是以明文方式，而HTTPS协议传输的数据则是经过TLS加密的\n    2. HTTPS在TCP三次握手后，还需要进行SSL的handshake，协商加密密钥\n    3. HTTPS需要在服务器端申请证书，浏览器端安装对应的根证书\n    4. HTTP协议的端口是80，HTTPS协议的端口是443\n\n+ HTTPS优缺点\n    * 优点\n        - 安全性更高\n        - 可以认证用户和服务器，确保数据发送到正确的用户和服务器\n    * 缺点\n        - 握手阶段延时较高\n        - 部署成本高（购买证书，解密吃CPU）\n\n#### 8浏览器中输入URL后会发生什么\n1. 域名解析获得IP地址：用到DNS、UDP协议\n2. 建立http连接：用到http协议\n3. 生成get请求报文：生成后交给TCP层处理，用到TCP与IP协议\n\n#### 9 HTTP请求步骤\n1. 客户端连接到web服务器\n2. 发送http客户请求\n3. 服务器接受请求并返回http响应\n4. 释放TCP连接\n5. 客户端浏览器解析html内容\n\n#### 10 socket编程中服务器端和客户端主要用到哪些函数\n+ 基于TCP的socket\n    * Server\n        1. 创建socket：socket()\n        2. 设置socket属性：setsockopt()\n        3. 绑定IP、端口号：bind()\n        4. 设置允许的最大连接数：listen()\n        5. 接收客户端的连接：accept()\n        6. 收发数据：send()+recv() or read()+write()\n        7. 关闭网络连接：close()\n        8. 关闭监听\n    * Client\n        1. 创建socket：socket()\n        2. 设置socket属性：setsockopt()\n        3. 设置绑定IP、端口号：bind()\n        4. 设置要连接的IP及端口\n        4. 连接Server：connect()\n        5. 收发数据: send()+recv() / read()/write()\n        6. 关闭网络：close()\n![基于TCP的socket](/images/tcp_socket.png)\n\n+ UDP的socket\n    * Server\n        1. 创建socket：socket()\n        2. 设置属性：setsockopt()\n        3. 绑定IP、端口：bind()\n        4. 循环收、发数据：recvfrom() + sendto()\n        5. 关闭连接\n    * Client\n        1. 创建socket：socket()\n        2. 设置属性：setsockopt()\n        3. 绑定IP、端口：bind()\n        4. 设置要连接的IP及端口\n        5. 发送、接收数据：sendto() + recvfrom()\n        6. 关闭连接\n![基于UDP的socket](/images/udp_socket.png)\n\n#### 11 Post与Get的区别\n+ 表面区别\n\n| |Get|Post\n:--:|:--:|:--:\n编码类型|application/x-www-form-urlencoded|application/x-www-form-urlencoded或multipart/form-data\n数据长度限制|URL最大长度是2048个字符|无限制\n数据类型限制|ASCII字符|没有限制，可以是二进制数据\n安全性|较差，因为数据是URL的一部分|较好，数据不会保存在浏览器历史和服务器日志中\n可见性|数据在URL中，可见|数据不在URL中，不可见\n后退/刷新|无害|数据会重新提交\n缓存|可以|不可以\n书签|可以|不可以\n历史|参数保留在历史记录中|参数不会保留在历史记录中\n\n+ 本质区别\n    * Get用于获取信息，无副作用，是幂等的，且可缓存，而Post用于修改服务器上的数据，有副作用，非幂等的，不可缓存\n    * 在传输上，都是基于TCP/IP协议的，没有区别；在报文格式上，不带参数时，区别在于请求行的方法不同（分别是Get和Post），带参数时，Get的参数在URL中，而Post的参数在请求体中\n\n参考：  \n[1] https://www.cnblogs.com/logsharing/p/8448446.html  \n[2] https://baijiahao.baidu.com/s?id=1626599028653203490&wfr=spider&for=pc\n\n#### 12 HTTP请求头部\n+ 请求行\n    * 请求方法\n    * 请求URL\n    * HTTP协议及版本\n+ 报文头\n+ 报文体\n\n#### 12 指针常量与常量指针\n区别：*在前在是指针常量，const在前则是常量指针\n\n+ 指针常量：不能改变指针的指向，int* const p = &a;\n+ 常量指针：不能改变指针指向的值， const int *p;\n\n#### 12 C++内存布局（从高到低的顺序）以及为什么这么布局？\n+ 内核空间（1G）\n+ 栈（向下增长）：局部变量\n+ 内存映射段：存放静态库、动态库以及文件映射等\n+ 堆（向上增长）：malloc、calloc、realloc以及new申请的空间\n+ 数据段\n    * BSS段：未初始化或初始化为0的全局变量和静态变量\n    * 数据段：已初始化的全局变量和静态变量\n+ 代码段\n    * 可执行代码\n    * 只读常量\n\n#### 13 Linux C++调试工具\nhttps://www.cnblogs.com/lidabo/p/4377545.html\n\n#### 14 为什么构造函数不可以是虚函数？\n+ 构造函数不需要是虚函数，也不允许是虚函数。因为当创建一个对象时，我们总是要明确指定对象的类型，尽管我们可能通过基类的指针或引用去访问它。\n+ 从实现的角度看。虚函数表总是在构造函数调用之后才建立，因而构造函数不可能成为虚函数。\n\n\n#### 15 红黑树的特点\n1. 每个节点要么是红的，要么是黑的；\n2. 根节点是黑的；\n3. 每个叶节点都是黑的；\n4. 如果一个节点是红的，那么它的两个子节点都是黑的；\n5. 对于任意一个节点而言，其到叶节点尾端NULL指针的每条路径都经过相同数目的黑节点。\n\n#### 16 AVL树和红黑树的定义与区别\n+ AVL树：AVL（平衡二叉树），是一种特殊的排序二叉树，其左右子树也是平衡二叉树，且左右子树高度差的绝对值不大于1。\n+ 红黑树：红黑树是一种二叉查找树，但在每个节点增加了一个存储位表示节点的颜色，非红即黑。通过对任何一条根到叶子的路径上各个节点着色的方式的限制，红黑树确保没有一条路径会比其他路径长2倍。故，红黑树是一种弱平衡二叉树。红黑树有以下5个特点：\n    1. 每个节点要么是红的，要么是黑的；\n    2. 根节点是黑的；\n    3. 每个叶节点都是黑的；\n    4. 如果一个节点是红的，那么它的两个子节点都是黑的；\n    5. 对于任意一个节点而言，其到叶节点尾端NULL指针的每条路径都经过相同数目的黑节点。\n+ 区别：AVL树是高度平衡的，频繁的插入和删除，会引起频繁的rebalance，导致效率下降；红黑树不是高度平衡的，算是一种折中，插入最多2次旋转，删除最多3次旋转。\n\n#### 17 B-树与B+树的定义\n+ B树：一颗m阶B树定义如下\n    * 每个节点最多有m-1个关键字\n    * 根节点最少可以只有1个关键字\n    * 非根节点至少有ceil(m/2)+1个关键字\n    * 每个节点的关键字都按从小到大的顺序排列，左子树的关键字都小于它，右子树的关键字都大于它\n    * 所有叶子节点都位于同一层（或者说根节点到每个叶子节点的长度相同）\n+ B+树：一颗m阶B+树的定义如下\n    * B+树的定义基本与B树等价，但是B+树还有以下要求\n    * B+树包含2种类型的节点：内部节点（索引节点）和叶子节点。\n    * 内部节点不保存数据，只用于索引，因而所有的数据都保存在叶子节点上\n    * 内部节点中的key都按从小到大的顺序排列，对于内部节点中的一个key，左子树中所有的key都*小于*它，右子树中的key都*大于等于*它\n    * 每个叶子节点都存有下一个相邻叶子节点的指针，叶子节点本身根据关键字从小到大形成链表\n\n#### 18 堆与栈的区别\n+ 堆是有低地址向高地址扩展，而栈是高地址向低地址扩展\n+ 堆中的内存需要手动的申请与释放，而栈中的地址是由OS自动的申请和释放的\n+ 堆中频繁的调用malloc和free会产生内存碎片，而栈不会\n+ 堆的分配效率低，而栈的分配效率高\n\n#### 19 常见排序算法总结\n\n算法|平均时间复杂度|最好时间复杂度|最坏时间复杂度|空间复杂度|是否稳定\n--|:--:|:--:|:--:|:--:|--:\n插入排序|O(n^2)|O(n)|O(n^2)|O(1)|稳定\n冒泡排序|O(n^2)|O(n)|O(n^2)|O(1)|稳定\n简单选择排序|O(n^2)|O(n^2)|O(n^2)|O(1)|不稳定\n希尔排序|O(n^1.25)|O(n)|O(n^2)|O(1)|不稳定\n归并排序|O(nlogn)|O(nlogn)|O(nlogn)|O(n)|稳定\n快速排序|O(nlogn)|O(nlogn)|O(n^2)|O(nlogn)|不稳定\n堆排序|O(nlogn)|O(nlogn)|O(nlogn)|O(1)|不稳定\n\n#### 20 常用设计模式\n+ 单例模式：主要解决全局使用的类频繁的创建和销毁的问题。单例模式下可以确保一个类只有一个实例，而且自行化实例并向整个系统提供这个实例。\n    * 多线程安全问题\n        - 饿汉式：基于class loader机制避免多线程同步问题，但可能\n        - 懒汉式：通过双重锁机制实现线程安全\n\n+ 工厂模式：主要解决接口选择的问题。该模式下定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，使其创建过程延迟到子类进行\n\n+ 观察者模式：定义对象间的一种一对多的依赖关系。当被观察者发生状态改变时，观察者会受到通知。类似于回调函数。\n\n+ 装饰器模式：对已经存在的某些类进行装饰，以拓展一些功能，从而动态的为一个对象增加新的功能。\n\n#### 21 OOP设计模式五大原则\n+ 单一职责：避免相同的职责分配到不同的类中；避免一个类承担太多职责\n+ 接口隔离：客户端不应实现一些它们不会使用的接口\n+ 开放-封闭：在扩展性方面是开放的而在更改性方面是封闭的\n+ 替换：子类型必须能替换掉它们的父类、并且出现在父类出现的任何地方\n+ 依赖倒置：上层模块不应该依赖于下层模块\n\n#### 22 手写Singleton模式\n```\ntemplate<typename T> \nclass Singleton {\npublic:\n    Singleton(const Singleton& ) = delete;\n    Singleton& operator=(const Singleton& ) = delete;\n    static T* getInstance() {\n        pthread_mutex_lock(&mutex);\n        if (uniqueInstance == nullptr) {\n            uniqueInstance = new T();\n        }\n        pthread_mutex_unlock(&mutex);\n        return uniqueInstance;\n    }\nprivate:\n    static T* uniqueInstance;\n    static pthread_mutex_t mutex;\n    Singleton() {}\n};\n\ntemplate<typename T> \npthread_mutex_t Singleton<T>::mutex = PTHREAD_MUTEX_INITIALIZER;\n\ntemplate<typename T> \nT* Singleton<T>::uniqueInstance = nullptr;\n```","source":"_posts/C-面试题.md","raw":"---\ntitle: C++面试题\ndate: 2019-12-18 17:14:52\ntags:\n    - Linux\n    - vim\ncategories: C++\n---\n\n\n#### 1 TCP三次握手与四次挥手\n##### 三次握手\n* 第一次：Client将SYN标志位置为1，随机产生一个序号seq=x，将该数据包发送给Server，Client进入SYN_SENT状态，等待Server回应\n* 第二次：Server收到数据包后根据SYN为1判断Cl6ient请求建立连接。Server将标志位SYN与ACK都置为1，ack=x+1，随机产生一个序号seq=y，将该数据包发送给Client，Server进入SYN_RCVD状态\n* 第三次：Client收到确认数据包后，检查是否ack=x+1，如果正确则将ACK置为1，ack=y+1，seq=x+1，并将该数据包发送给Server，Server收到后确认是否ACK=1，是否ack=y+1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，三次握手结束 \n![握手过程](/images/woshou.jpg \"woshou\")\n\n##### 四次挥手\n* 第一次：Client将FIN标志位置为1，随机产生一个序号seq=u,将该数据包发送给Server，此后Client停止发送数据，Client进入FIN_WAIT_1状态\n* 第二次：Server收到数据包后根据FIN=1判断Client请求断开连接，Server将ACK=1，将ack=u+1，随机产生一个序号seq=v，发送该数据包，Server进入CLOSE_WAIT状态，等待将数据发送完；Client收到该数据包后进入CLOSE_WAIT_2状态\n* 第三次：Server将FIN=1，ACK=1，ack=u+1，随机产生一个序号seq=w，将该数据包发送给Client，Server进入LAST_ACK状态\n* 第四次：Client收到数据包后检查其中FIN，发现为1，接着将ACK=1，seq=u+1，ack=w+1，发送给数据包给Server，Client进入TIME_WAIT状态；Server收到后关闭连接，进入CLOSE状态，Client在发送给数据包后等待2MSL（报文最大生存时间）然后关闭连接，进入CLOSE状态\n![挥手过程](/images/huishou.jpg \"huishou\")\n\n#### 2 挥手与握手过程中Client与Server的状态变化\n+ Client：CLOSE -> SYN_SENT -> ESTABLISHED -> FIN_WAIT_1 -> FIN_WAIT_2 -> TIME_WAIT -> CLOSE\n+ Server:LISTEN -> SYN_RCVD -> ESTABLISHED -> CLOSE_WAIT -> LAST_ACK -> CLOSE\n\n#### 3 为什么三次握手、四次挥手？\n+ 三次握手：三次握手可以防止已经失效的请求连接的报文突然有传输到服务器端导致服务器资源的浪费。\n+ 四次挥手：由于Server收到ClientFIN报文的时候可能还有数据需要传送，因此先发送ACK报文告知Client请求收到，等待Server发送完数据，就可以像Client发送FIN报文告知数据发送完毕\n\n#### 4 TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传\n+ 滑动窗口协议\n    * 窗口：发送者可以连续发送一段字节序列而不需等待接受者的应答，这段连续序列的长度称为窗口\n    * 滑动：窗口的大小是可以随着发送的过程而变化的\n\n+ 流量控制：主要是接收方传递消息给发送方，使其不要发送数据太快。具体实现为应答的ACK包中会包含自己的接收窗口的大小，利用窗口的大小控制发送方数据的发送速度\n\n+ 拥塞控制：防止过多的数据注入到网络中导致路由器或链路过载。具体实现的方法为：（1）慢启动、拥塞控制；（2）快重传、快恢复\n    * 慢启动：定义拥塞窗口，初始大小为1，之后每次收到确认应答，将拥塞窗口的大小*2\n    * 拥塞避免：设置慢启动阈值，一般为65535,，当拥塞窗口大于这个阈值后，每次收到确认应答将拥塞窗口的大小+1\n    * 快重传：如果接收方发现某个包丢失，会对发送方发送重传请求；一旦发送方收到三个一样的ack，立即重传该包；随后快恢复\n    * 快恢复：首先将慢启动阈值设置为当前拥塞窗口的1/2；然后将拥塞窗口重新设置为慢启动阈值大小+3\n    \n#### 5 OSI七层模型和TCP/IP四层模型\n+ OSI七层模型\n    * 物理层：主要协议IEEE802.3、RJ45等\n    * 数据链路层：主要协议MAC、VLAN等\n    * 网络层：主要协议为IP、ARP、ICMP、IGMP等\n    * 传输层：主要协议为TCP、UDP等\n    * 会话层：主要协议为RPC等\n    * 表示层：主要协议为JPEG等\n    * 应用层：主要协议为FTP、HTTP、DNS等\n\n+ TCP/IP四层模型\n    * 网络接口层：MAC、VLAN等\n    * 网络层：IP、ARP、ICMP、IGMP等\n    * 传输层：TCP、UDP等\n    * 应用层：HTTP、DNS、SMTP\n\n#### 6 TCP与UDP的区别\n+ TCP是面向连接的、可靠的，而UDP是非面向连接、不可靠的\n+ TCP一对一，UDP支持一对一，一对多，多对一，多对多\n+ TCP具有拥塞控制与流量控制而UDP没有\n+ TCP报文长度动态改变而UDP不是\n+ TCP传输单位为报文段，而UDP传输单位为用户数据报\n+ TCP注重安全性，而UDP数据传输快\n+ 用TCP的协议：FTP、Telnet、SMTP、POP3、HTTP(s)，用UDP的协议：DNS、SNMP、TFTP\n\n#### 7 HTTP与HTTPS的区别\n+ 区别如下：\n    1. HTTP协议传输的数据是以明文方式，而HTTPS协议传输的数据则是经过TLS加密的\n    2. HTTPS在TCP三次握手后，还需要进行SSL的handshake，协商加密密钥\n    3. HTTPS需要在服务器端申请证书，浏览器端安装对应的根证书\n    4. HTTP协议的端口是80，HTTPS协议的端口是443\n\n+ HTTPS优缺点\n    * 优点\n        - 安全性更高\n        - 可以认证用户和服务器，确保数据发送到正确的用户和服务器\n    * 缺点\n        - 握手阶段延时较高\n        - 部署成本高（购买证书，解密吃CPU）\n\n#### 8浏览器中输入URL后会发生什么\n1. 域名解析获得IP地址：用到DNS、UDP协议\n2. 建立http连接：用到http协议\n3. 生成get请求报文：生成后交给TCP层处理，用到TCP与IP协议\n\n#### 9 HTTP请求步骤\n1. 客户端连接到web服务器\n2. 发送http客户请求\n3. 服务器接受请求并返回http响应\n4. 释放TCP连接\n5. 客户端浏览器解析html内容\n\n#### 10 socket编程中服务器端和客户端主要用到哪些函数\n+ 基于TCP的socket\n    * Server\n        1. 创建socket：socket()\n        2. 设置socket属性：setsockopt()\n        3. 绑定IP、端口号：bind()\n        4. 设置允许的最大连接数：listen()\n        5. 接收客户端的连接：accept()\n        6. 收发数据：send()+recv() or read()+write()\n        7. 关闭网络连接：close()\n        8. 关闭监听\n    * Client\n        1. 创建socket：socket()\n        2. 设置socket属性：setsockopt()\n        3. 设置绑定IP、端口号：bind()\n        4. 设置要连接的IP及端口\n        4. 连接Server：connect()\n        5. 收发数据: send()+recv() / read()/write()\n        6. 关闭网络：close()\n![基于TCP的socket](/images/tcp_socket.png)\n\n+ UDP的socket\n    * Server\n        1. 创建socket：socket()\n        2. 设置属性：setsockopt()\n        3. 绑定IP、端口：bind()\n        4. 循环收、发数据：recvfrom() + sendto()\n        5. 关闭连接\n    * Client\n        1. 创建socket：socket()\n        2. 设置属性：setsockopt()\n        3. 绑定IP、端口：bind()\n        4. 设置要连接的IP及端口\n        5. 发送、接收数据：sendto() + recvfrom()\n        6. 关闭连接\n![基于UDP的socket](/images/udp_socket.png)\n\n#### 11 Post与Get的区别\n+ 表面区别\n\n| |Get|Post\n:--:|:--:|:--:\n编码类型|application/x-www-form-urlencoded|application/x-www-form-urlencoded或multipart/form-data\n数据长度限制|URL最大长度是2048个字符|无限制\n数据类型限制|ASCII字符|没有限制，可以是二进制数据\n安全性|较差，因为数据是URL的一部分|较好，数据不会保存在浏览器历史和服务器日志中\n可见性|数据在URL中，可见|数据不在URL中，不可见\n后退/刷新|无害|数据会重新提交\n缓存|可以|不可以\n书签|可以|不可以\n历史|参数保留在历史记录中|参数不会保留在历史记录中\n\n+ 本质区别\n    * Get用于获取信息，无副作用，是幂等的，且可缓存，而Post用于修改服务器上的数据，有副作用，非幂等的，不可缓存\n    * 在传输上，都是基于TCP/IP协议的，没有区别；在报文格式上，不带参数时，区别在于请求行的方法不同（分别是Get和Post），带参数时，Get的参数在URL中，而Post的参数在请求体中\n\n参考：  \n[1] https://www.cnblogs.com/logsharing/p/8448446.html  \n[2] https://baijiahao.baidu.com/s?id=1626599028653203490&wfr=spider&for=pc\n\n#### 12 HTTP请求头部\n+ 请求行\n    * 请求方法\n    * 请求URL\n    * HTTP协议及版本\n+ 报文头\n+ 报文体\n\n#### 12 指针常量与常量指针\n区别：*在前在是指针常量，const在前则是常量指针\n\n+ 指针常量：不能改变指针的指向，int* const p = &a;\n+ 常量指针：不能改变指针指向的值， const int *p;\n\n#### 12 C++内存布局（从高到低的顺序）以及为什么这么布局？\n+ 内核空间（1G）\n+ 栈（向下增长）：局部变量\n+ 内存映射段：存放静态库、动态库以及文件映射等\n+ 堆（向上增长）：malloc、calloc、realloc以及new申请的空间\n+ 数据段\n    * BSS段：未初始化或初始化为0的全局变量和静态变量\n    * 数据段：已初始化的全局变量和静态变量\n+ 代码段\n    * 可执行代码\n    * 只读常量\n\n#### 13 Linux C++调试工具\nhttps://www.cnblogs.com/lidabo/p/4377545.html\n\n#### 14 为什么构造函数不可以是虚函数？\n+ 构造函数不需要是虚函数，也不允许是虚函数。因为当创建一个对象时，我们总是要明确指定对象的类型，尽管我们可能通过基类的指针或引用去访问它。\n+ 从实现的角度看。虚函数表总是在构造函数调用之后才建立，因而构造函数不可能成为虚函数。\n\n\n#### 15 红黑树的特点\n1. 每个节点要么是红的，要么是黑的；\n2. 根节点是黑的；\n3. 每个叶节点都是黑的；\n4. 如果一个节点是红的，那么它的两个子节点都是黑的；\n5. 对于任意一个节点而言，其到叶节点尾端NULL指针的每条路径都经过相同数目的黑节点。\n\n#### 16 AVL树和红黑树的定义与区别\n+ AVL树：AVL（平衡二叉树），是一种特殊的排序二叉树，其左右子树也是平衡二叉树，且左右子树高度差的绝对值不大于1。\n+ 红黑树：红黑树是一种二叉查找树，但在每个节点增加了一个存储位表示节点的颜色，非红即黑。通过对任何一条根到叶子的路径上各个节点着色的方式的限制，红黑树确保没有一条路径会比其他路径长2倍。故，红黑树是一种弱平衡二叉树。红黑树有以下5个特点：\n    1. 每个节点要么是红的，要么是黑的；\n    2. 根节点是黑的；\n    3. 每个叶节点都是黑的；\n    4. 如果一个节点是红的，那么它的两个子节点都是黑的；\n    5. 对于任意一个节点而言，其到叶节点尾端NULL指针的每条路径都经过相同数目的黑节点。\n+ 区别：AVL树是高度平衡的，频繁的插入和删除，会引起频繁的rebalance，导致效率下降；红黑树不是高度平衡的，算是一种折中，插入最多2次旋转，删除最多3次旋转。\n\n#### 17 B-树与B+树的定义\n+ B树：一颗m阶B树定义如下\n    * 每个节点最多有m-1个关键字\n    * 根节点最少可以只有1个关键字\n    * 非根节点至少有ceil(m/2)+1个关键字\n    * 每个节点的关键字都按从小到大的顺序排列，左子树的关键字都小于它，右子树的关键字都大于它\n    * 所有叶子节点都位于同一层（或者说根节点到每个叶子节点的长度相同）\n+ B+树：一颗m阶B+树的定义如下\n    * B+树的定义基本与B树等价，但是B+树还有以下要求\n    * B+树包含2种类型的节点：内部节点（索引节点）和叶子节点。\n    * 内部节点不保存数据，只用于索引，因而所有的数据都保存在叶子节点上\n    * 内部节点中的key都按从小到大的顺序排列，对于内部节点中的一个key，左子树中所有的key都*小于*它，右子树中的key都*大于等于*它\n    * 每个叶子节点都存有下一个相邻叶子节点的指针，叶子节点本身根据关键字从小到大形成链表\n\n#### 18 堆与栈的区别\n+ 堆是有低地址向高地址扩展，而栈是高地址向低地址扩展\n+ 堆中的内存需要手动的申请与释放，而栈中的地址是由OS自动的申请和释放的\n+ 堆中频繁的调用malloc和free会产生内存碎片，而栈不会\n+ 堆的分配效率低，而栈的分配效率高\n\n#### 19 常见排序算法总结\n\n算法|平均时间复杂度|最好时间复杂度|最坏时间复杂度|空间复杂度|是否稳定\n--|:--:|:--:|:--:|:--:|--:\n插入排序|O(n^2)|O(n)|O(n^2)|O(1)|稳定\n冒泡排序|O(n^2)|O(n)|O(n^2)|O(1)|稳定\n简单选择排序|O(n^2)|O(n^2)|O(n^2)|O(1)|不稳定\n希尔排序|O(n^1.25)|O(n)|O(n^2)|O(1)|不稳定\n归并排序|O(nlogn)|O(nlogn)|O(nlogn)|O(n)|稳定\n快速排序|O(nlogn)|O(nlogn)|O(n^2)|O(nlogn)|不稳定\n堆排序|O(nlogn)|O(nlogn)|O(nlogn)|O(1)|不稳定\n\n#### 20 常用设计模式\n+ 单例模式：主要解决全局使用的类频繁的创建和销毁的问题。单例模式下可以确保一个类只有一个实例，而且自行化实例并向整个系统提供这个实例。\n    * 多线程安全问题\n        - 饿汉式：基于class loader机制避免多线程同步问题，但可能\n        - 懒汉式：通过双重锁机制实现线程安全\n\n+ 工厂模式：主要解决接口选择的问题。该模式下定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，使其创建过程延迟到子类进行\n\n+ 观察者模式：定义对象间的一种一对多的依赖关系。当被观察者发生状态改变时，观察者会受到通知。类似于回调函数。\n\n+ 装饰器模式：对已经存在的某些类进行装饰，以拓展一些功能，从而动态的为一个对象增加新的功能。\n\n#### 21 OOP设计模式五大原则\n+ 单一职责：避免相同的职责分配到不同的类中；避免一个类承担太多职责\n+ 接口隔离：客户端不应实现一些它们不会使用的接口\n+ 开放-封闭：在扩展性方面是开放的而在更改性方面是封闭的\n+ 替换：子类型必须能替换掉它们的父类、并且出现在父类出现的任何地方\n+ 依赖倒置：上层模块不应该依赖于下层模块\n\n#### 22 手写Singleton模式\n```\ntemplate<typename T> \nclass Singleton {\npublic:\n    Singleton(const Singleton& ) = delete;\n    Singleton& operator=(const Singleton& ) = delete;\n    static T* getInstance() {\n        pthread_mutex_lock(&mutex);\n        if (uniqueInstance == nullptr) {\n            uniqueInstance = new T();\n        }\n        pthread_mutex_unlock(&mutex);\n        return uniqueInstance;\n    }\nprivate:\n    static T* uniqueInstance;\n    static pthread_mutex_t mutex;\n    Singleton() {}\n};\n\ntemplate<typename T> \npthread_mutex_t Singleton<T>::mutex = PTHREAD_MUTEX_INITIALIZER;\n\ntemplate<typename T> \nT* Singleton<T>::uniqueInstance = nullptr;\n```","slug":"C-面试题","published":1,"updated":"2020-08-23T13:24:16.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq6v00029s72c96a2e57","content":"<h4 id=\"1-TCP三次握手与四次挥手\"><a href=\"#1-TCP三次握手与四次挥手\" class=\"headerlink\" title=\"1 TCP三次握手与四次挥手\"></a>1 TCP三次握手与四次挥手</h4><h5 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h5><ul>\n<li>第一次：Client将SYN标志位置为1，随机产生一个序号seq=x，将该数据包发送给Server，Client进入SYN_SENT状态，等待Server回应</li>\n<li>第二次：Server收到数据包后根据SYN为1判断Cl6ient请求建立连接。Server将标志位SYN与ACK都置为1，ack=x+1，随机产生一个序号seq=y，将该数据包发送给Client，Server进入SYN_RCVD状态</li>\n<li>第三次：Client收到确认数据包后，检查是否ack=x+1，如果正确则将ACK置为1，ack=y+1，seq=x+1，并将该数据包发送给Server，Server收到后确认是否ACK=1，是否ack=y+1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，三次握手结束<br><img src=\"/images/woshou.jpg\" alt=\"握手过程\" title=\"woshou\"></li>\n</ul>\n<h5 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h5><ul>\n<li>第一次：Client将FIN标志位置为1，随机产生一个序号seq=u,将该数据包发送给Server，此后Client停止发送数据，Client进入FIN_WAIT_1状态</li>\n<li>第二次：Server收到数据包后根据FIN=1判断Client请求断开连接，Server将ACK=1，将ack=u+1，随机产生一个序号seq=v，发送该数据包，Server进入CLOSE_WAIT状态，等待将数据发送完；Client收到该数据包后进入CLOSE_WAIT_2状态</li>\n<li>第三次：Server将FIN=1，ACK=1，ack=u+1，随机产生一个序号seq=w，将该数据包发送给Client，Server进入LAST_ACK状态</li>\n<li>第四次：Client收到数据包后检查其中FIN，发现为1，接着将ACK=1，seq=u+1，ack=w+1，发送给数据包给Server，Client进入TIME_WAIT状态；Server收到后关闭连接，进入CLOSE状态，Client在发送给数据包后等待2MSL（报文最大生存时间）然后关闭连接，进入CLOSE状态<br><img src=\"/images/huishou.jpg\" alt=\"挥手过程\" title=\"huishou\"></li>\n</ul>\n<h4 id=\"2-挥手与握手过程中Client与Server的状态变化\"><a href=\"#2-挥手与握手过程中Client与Server的状态变化\" class=\"headerlink\" title=\"2 挥手与握手过程中Client与Server的状态变化\"></a>2 挥手与握手过程中Client与Server的状态变化</h4><ul>\n<li>Client：CLOSE -&gt; SYN_SENT -&gt; ESTABLISHED -&gt; FIN_WAIT_1 -&gt; FIN_WAIT_2 -&gt; TIME_WAIT -&gt; CLOSE</li>\n<li>Server:LISTEN -&gt; SYN_RCVD -&gt; ESTABLISHED -&gt; CLOSE_WAIT -&gt; LAST_ACK -&gt; CLOSE</li>\n</ul>\n<h4 id=\"3-为什么三次握手、四次挥手？\"><a href=\"#3-为什么三次握手、四次挥手？\" class=\"headerlink\" title=\"3 为什么三次握手、四次挥手？\"></a>3 为什么三次握手、四次挥手？</h4><ul>\n<li>三次握手：三次握手可以防止已经失效的请求连接的报文突然有传输到服务器端导致服务器资源的浪费。</li>\n<li>四次挥手：由于Server收到ClientFIN报文的时候可能还有数据需要传送，因此先发送ACK报文告知Client请求收到，等待Server发送完数据，就可以像Client发送FIN报文告知数据发送完毕</li>\n</ul>\n<h4 id=\"4-TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传\"><a href=\"#4-TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传\" class=\"headerlink\" title=\"4 TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传\"></a>4 TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传</h4><ul>\n<li><p>滑动窗口协议</p>\n<ul>\n<li>窗口：发送者可以连续发送一段字节序列而不需等待接受者的应答，这段连续序列的长度称为窗口</li>\n<li>滑动：窗口的大小是可以随着发送的过程而变化的</li>\n</ul>\n</li>\n<li><p>流量控制：主要是接收方传递消息给发送方，使其不要发送数据太快。具体实现为应答的ACK包中会包含自己的接收窗口的大小，利用窗口的大小控制发送方数据的发送速度</p>\n</li>\n<li><p>拥塞控制：防止过多的数据注入到网络中导致路由器或链路过载。具体实现的方法为：（1）慢启动、拥塞控制；（2）快重传、快恢复</p>\n<ul>\n<li>慢启动：定义拥塞窗口，初始大小为1，之后每次收到确认应答，将拥塞窗口的大小*2</li>\n<li>拥塞避免：设置慢启动阈值，一般为65535,，当拥塞窗口大于这个阈值后，每次收到确认应答将拥塞窗口的大小+1</li>\n<li>快重传：如果接收方发现某个包丢失，会对发送方发送重传请求；一旦发送方收到三个一样的ack，立即重传该包；随后快恢复</li>\n<li>快恢复：首先将慢启动阈值设置为当前拥塞窗口的1/2；然后将拥塞窗口重新设置为慢启动阈值大小+3</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-OSI七层模型和TCP-IP四层模型\"><a href=\"#5-OSI七层模型和TCP-IP四层模型\" class=\"headerlink\" title=\"5 OSI七层模型和TCP/IP四层模型\"></a>5 OSI七层模型和TCP/IP四层模型</h4><ul>\n<li><p>OSI七层模型</p>\n<ul>\n<li>物理层：主要协议IEEE802.3、RJ45等</li>\n<li>数据链路层：主要协议MAC、VLAN等</li>\n<li>网络层：主要协议为IP、ARP、ICMP、IGMP等</li>\n<li>传输层：主要协议为TCP、UDP等</li>\n<li>会话层：主要协议为RPC等</li>\n<li>表示层：主要协议为JPEG等</li>\n<li>应用层：主要协议为FTP、HTTP、DNS等</li>\n</ul>\n</li>\n<li><p>TCP/IP四层模型</p>\n<ul>\n<li>网络接口层：MAC、VLAN等</li>\n<li>网络层：IP、ARP、ICMP、IGMP等</li>\n<li>传输层：TCP、UDP等</li>\n<li>应用层：HTTP、DNS、SMTP</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-TCP与UDP的区别\"><a href=\"#6-TCP与UDP的区别\" class=\"headerlink\" title=\"6 TCP与UDP的区别\"></a>6 TCP与UDP的区别</h4><ul>\n<li>TCP是面向连接的、可靠的，而UDP是非面向连接、不可靠的</li>\n<li>TCP一对一，UDP支持一对一，一对多，多对一，多对多</li>\n<li>TCP具有拥塞控制与流量控制而UDP没有</li>\n<li>TCP报文长度动态改变而UDP不是</li>\n<li>TCP传输单位为报文段，而UDP传输单位为用户数据报</li>\n<li>TCP注重安全性，而UDP数据传输快</li>\n<li>用TCP的协议：FTP、Telnet、SMTP、POP3、HTTP(s)，用UDP的协议：DNS、SNMP、TFTP</li>\n</ul>\n<h4 id=\"7-HTTP与HTTPS的区别\"><a href=\"#7-HTTP与HTTPS的区别\" class=\"headerlink\" title=\"7 HTTP与HTTPS的区别\"></a>7 HTTP与HTTPS的区别</h4><ul>\n<li><p>区别如下：</p>\n<ol>\n<li>HTTP协议传输的数据是以明文方式，而HTTPS协议传输的数据则是经过TLS加密的</li>\n<li>HTTPS在TCP三次握手后，还需要进行SSL的handshake，协商加密密钥</li>\n<li>HTTPS需要在服务器端申请证书，浏览器端安装对应的根证书</li>\n<li>HTTP协议的端口是80，HTTPS协议的端口是443</li>\n</ol>\n</li>\n<li><p>HTTPS优缺点</p>\n<ul>\n<li>优点<ul>\n<li>安全性更高</li>\n<li>可以认证用户和服务器，确保数据发送到正确的用户和服务器</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>握手阶段延时较高</li>\n<li>部署成本高（购买证书，解密吃CPU）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8浏览器中输入URL后会发生什么\"><a href=\"#8浏览器中输入URL后会发生什么\" class=\"headerlink\" title=\"8浏览器中输入URL后会发生什么\"></a>8浏览器中输入URL后会发生什么</h4><ol>\n<li>域名解析获得IP地址：用到DNS、UDP协议</li>\n<li>建立http连接：用到http协议</li>\n<li>生成get请求报文：生成后交给TCP层处理，用到TCP与IP协议</li>\n</ol>\n<h4 id=\"9-HTTP请求步骤\"><a href=\"#9-HTTP请求步骤\" class=\"headerlink\" title=\"9 HTTP请求步骤\"></a>9 HTTP请求步骤</h4><ol>\n<li>客户端连接到web服务器</li>\n<li>发送http客户请求</li>\n<li>服务器接受请求并返回http响应</li>\n<li>释放TCP连接</li>\n<li>客户端浏览器解析html内容</li>\n</ol>\n<h4 id=\"10-socket编程中服务器端和客户端主要用到哪些函数\"><a href=\"#10-socket编程中服务器端和客户端主要用到哪些函数\" class=\"headerlink\" title=\"10 socket编程中服务器端和客户端主要用到哪些函数\"></a>10 socket编程中服务器端和客户端主要用到哪些函数</h4><ul>\n<li><p>基于TCP的socket</p>\n<ul>\n<li>Server<ol>\n<li>创建socket：socket()</li>\n<li>设置socket属性：setsockopt()</li>\n<li>绑定IP、端口号：bind()</li>\n<li>设置允许的最大连接数：listen()</li>\n<li>接收客户端的连接：accept()</li>\n<li>收发数据：send()+recv() or read()+write()</li>\n<li>关闭网络连接：close()</li>\n<li>关闭监听</li>\n</ol>\n</li>\n<li>Client<ol>\n<li>创建socket：socket()</li>\n<li>设置socket属性：setsockopt()</li>\n<li>设置绑定IP、端口号：bind()</li>\n<li>设置要连接的IP及端口</li>\n<li>连接Server：connect()</li>\n<li>收发数据: send()+recv() / read()/write()</li>\n<li>关闭网络：close()<br><img src=\"/images/tcp_socket.png\" alt=\"基于TCP的socket\"></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>UDP的socket</p>\n<ul>\n<li>Server<ol>\n<li>创建socket：socket()</li>\n<li>设置属性：setsockopt()</li>\n<li>绑定IP、端口：bind()</li>\n<li>循环收、发数据：recvfrom() + sendto()</li>\n<li>关闭连接</li>\n</ol>\n</li>\n<li>Client<ol>\n<li>创建socket：socket()</li>\n<li>设置属性：setsockopt()</li>\n<li>绑定IP、端口：bind()</li>\n<li>设置要连接的IP及端口</li>\n<li>发送、接收数据：sendto() + recvfrom()</li>\n<li>关闭连接<br><img src=\"/images/udp_socket.png\" alt=\"基于UDP的socket\"></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"11-Post与Get的区别\"><a href=\"#11-Post与Get的区别\" class=\"headerlink\" title=\"11 Post与Get的区别\"></a>11 Post与Get的区别</h4><ul>\n<li>表面区别</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">Get</th>\n<th align=\"center\">Post</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">编码类型</td>\n<td align=\"center\">application/x-www-form-urlencoded</td>\n<td align=\"center\">application/x-www-form-urlencoded或multipart/form-data</td>\n</tr>\n<tr>\n<td align=\"center\">数据长度限制</td>\n<td align=\"center\">URL最大长度是2048个字符</td>\n<td align=\"center\">无限制</td>\n</tr>\n<tr>\n<td align=\"center\">数据类型限制</td>\n<td align=\"center\">ASCII字符</td>\n<td align=\"center\">没有限制，可以是二进制数据</td>\n</tr>\n<tr>\n<td align=\"center\">安全性</td>\n<td align=\"center\">较差，因为数据是URL的一部分</td>\n<td align=\"center\">较好，数据不会保存在浏览器历史和服务器日志中</td>\n</tr>\n<tr>\n<td align=\"center\">可见性</td>\n<td align=\"center\">数据在URL中，可见</td>\n<td align=\"center\">数据不在URL中，不可见</td>\n</tr>\n<tr>\n<td align=\"center\">后退/刷新</td>\n<td align=\"center\">无害</td>\n<td align=\"center\">数据会重新提交</td>\n</tr>\n<tr>\n<td align=\"center\">缓存</td>\n<td align=\"center\">可以</td>\n<td align=\"center\">不可以</td>\n</tr>\n<tr>\n<td align=\"center\">书签</td>\n<td align=\"center\">可以</td>\n<td align=\"center\">不可以</td>\n</tr>\n<tr>\n<td align=\"center\">历史</td>\n<td align=\"center\">参数保留在历史记录中</td>\n<td align=\"center\">参数不会保留在历史记录中</td>\n</tr>\n</tbody></table>\n<ul>\n<li>本质区别<ul>\n<li>Get用于获取信息，无副作用，是幂等的，且可缓存，而Post用于修改服务器上的数据，有副作用，非幂等的，不可缓存</li>\n<li>在传输上，都是基于TCP/IP协议的，没有区别；在报文格式上，不带参数时，区别在于请求行的方法不同（分别是Get和Post），带参数时，Get的参数在URL中，而Post的参数在请求体中</li>\n</ul>\n</li>\n</ul>\n<p>参考：<br>[1] <a href=\"https://www.cnblogs.com/logsharing/p/8448446.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/logsharing/p/8448446.html</a><br>[2] <a href=\"https://baijiahao.baidu.com/s?id=1626599028653203490&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">https://baijiahao.baidu.com/s?id=1626599028653203490&amp;wfr=spider&amp;for=pc</a></p>\n<h4 id=\"12-HTTP请求头部\"><a href=\"#12-HTTP请求头部\" class=\"headerlink\" title=\"12 HTTP请求头部\"></a>12 HTTP请求头部</h4><ul>\n<li>请求行<ul>\n<li>请求方法</li>\n<li>请求URL</li>\n<li>HTTP协议及版本</li>\n</ul>\n</li>\n<li>报文头</li>\n<li>报文体</li>\n</ul>\n<h4 id=\"12-指针常量与常量指针\"><a href=\"#12-指针常量与常量指针\" class=\"headerlink\" title=\"12 指针常量与常量指针\"></a>12 指针常量与常量指针</h4><p>区别：*在前在是指针常量，const在前则是常量指针</p>\n<ul>\n<li>指针常量：不能改变指针的指向，int* const p = &a;</li>\n<li>常量指针：不能改变指针指向的值， const int *p;</li>\n</ul>\n<h4 id=\"12-C-内存布局（从高到低的顺序）以及为什么这么布局？\"><a href=\"#12-C-内存布局（从高到低的顺序）以及为什么这么布局？\" class=\"headerlink\" title=\"12 C++内存布局（从高到低的顺序）以及为什么这么布局？\"></a>12 C++内存布局（从高到低的顺序）以及为什么这么布局？</h4><ul>\n<li>内核空间（1G）</li>\n<li>栈（向下增长）：局部变量</li>\n<li>内存映射段：存放静态库、动态库以及文件映射等</li>\n<li>堆（向上增长）：malloc、calloc、realloc以及new申请的空间</li>\n<li>数据段<ul>\n<li>BSS段：未初始化或初始化为0的全局变量和静态变量</li>\n<li>数据段：已初始化的全局变量和静态变量</li>\n</ul>\n</li>\n<li>代码段<ul>\n<li>可执行代码</li>\n<li>只读常量</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"13-Linux-C-调试工具\"><a href=\"#13-Linux-C-调试工具\" class=\"headerlink\" title=\"13 Linux C++调试工具\"></a>13 Linux C++调试工具</h4><p><a href=\"https://www.cnblogs.com/lidabo/p/4377545.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lidabo/p/4377545.html</a></p>\n<h4 id=\"14-为什么构造函数不可以是虚函数？\"><a href=\"#14-为什么构造函数不可以是虚函数？\" class=\"headerlink\" title=\"14 为什么构造函数不可以是虚函数？\"></a>14 为什么构造函数不可以是虚函数？</h4><ul>\n<li>构造函数不需要是虚函数，也不允许是虚函数。因为当创建一个对象时，我们总是要明确指定对象的类型，尽管我们可能通过基类的指针或引用去访问它。</li>\n<li>从实现的角度看。虚函数表总是在构造函数调用之后才建立，因而构造函数不可能成为虚函数。</li>\n</ul>\n<h4 id=\"15-红黑树的特点\"><a href=\"#15-红黑树的特点\" class=\"headerlink\" title=\"15 红黑树的特点\"></a>15 红黑树的特点</h4><ol>\n<li>每个节点要么是红的，要么是黑的；</li>\n<li>根节点是黑的；</li>\n<li>每个叶节点都是黑的；</li>\n<li>如果一个节点是红的，那么它的两个子节点都是黑的；</li>\n<li>对于任意一个节点而言，其到叶节点尾端NULL指针的每条路径都经过相同数目的黑节点。</li>\n</ol>\n<h4 id=\"16-AVL树和红黑树的定义与区别\"><a href=\"#16-AVL树和红黑树的定义与区别\" class=\"headerlink\" title=\"16 AVL树和红黑树的定义与区别\"></a>16 AVL树和红黑树的定义与区别</h4><ul>\n<li>AVL树：AVL（平衡二叉树），是一种特殊的排序二叉树，其左右子树也是平衡二叉树，且左右子树高度差的绝对值不大于1。</li>\n<li>红黑树：红黑树是一种二叉查找树，但在每个节点增加了一个存储位表示节点的颜色，非红即黑。通过对任何一条根到叶子的路径上各个节点着色的方式的限制，红黑树确保没有一条路径会比其他路径长2倍。故，红黑树是一种弱平衡二叉树。红黑树有以下5个特点：<ol>\n<li>每个节点要么是红的，要么是黑的；</li>\n<li>根节点是黑的；</li>\n<li>每个叶节点都是黑的；</li>\n<li>如果一个节点是红的，那么它的两个子节点都是黑的；</li>\n<li>对于任意一个节点而言，其到叶节点尾端NULL指针的每条路径都经过相同数目的黑节点。</li>\n</ol>\n</li>\n<li>区别：AVL树是高度平衡的，频繁的插入和删除，会引起频繁的rebalance，导致效率下降；红黑树不是高度平衡的，算是一种折中，插入最多2次旋转，删除最多3次旋转。</li>\n</ul>\n<h4 id=\"17-B-树与B-树的定义\"><a href=\"#17-B-树与B-树的定义\" class=\"headerlink\" title=\"17 B-树与B+树的定义\"></a>17 B-树与B+树的定义</h4><ul>\n<li>B树：一颗m阶B树定义如下<ul>\n<li>每个节点最多有m-1个关键字</li>\n<li>根节点最少可以只有1个关键字</li>\n<li>非根节点至少有ceil(m/2)+1个关键字</li>\n<li>每个节点的关键字都按从小到大的顺序排列，左子树的关键字都小于它，右子树的关键字都大于它</li>\n<li>所有叶子节点都位于同一层（或者说根节点到每个叶子节点的长度相同）</li>\n</ul>\n</li>\n<li>B+树：一颗m阶B+树的定义如下<ul>\n<li>B+树的定义基本与B树等价，但是B+树还有以下要求</li>\n<li>B+树包含2种类型的节点：内部节点（索引节点）和叶子节点。</li>\n<li>内部节点不保存数据，只用于索引，因而所有的数据都保存在叶子节点上</li>\n<li>内部节点中的key都按从小到大的顺序排列，对于内部节点中的一个key，左子树中所有的key都<em>小于</em>它，右子树中的key都<em>大于等于</em>它</li>\n<li>每个叶子节点都存有下一个相邻叶子节点的指针，叶子节点本身根据关键字从小到大形成链表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"18-堆与栈的区别\"><a href=\"#18-堆与栈的区别\" class=\"headerlink\" title=\"18 堆与栈的区别\"></a>18 堆与栈的区别</h4><ul>\n<li>堆是有低地址向高地址扩展，而栈是高地址向低地址扩展</li>\n<li>堆中的内存需要手动的申请与释放，而栈中的地址是由OS自动的申请和释放的</li>\n<li>堆中频繁的调用malloc和free会产生内存碎片，而栈不会</li>\n<li>堆的分配效率低，而栈的分配效率高</li>\n</ul>\n<h4 id=\"19-常见排序算法总结\"><a href=\"#19-常见排序算法总结\" class=\"headerlink\" title=\"19 常见排序算法总结\"></a>19 常见排序算法总结</h4><table>\n<thead>\n<tr>\n<th>算法</th>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好时间复杂度</th>\n<th align=\"center\">最坏时间复杂度</th>\n<th align=\"center\">空间复杂度</th>\n<th align=\"right\">是否稳定</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入排序</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">稳定</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">稳定</td>\n</tr>\n<tr>\n<td>简单选择排序</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">不稳定</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td align=\"center\">O(n^1.25)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">不稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"right\">稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"right\">不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">不稳定</td>\n</tr>\n</tbody></table>\n<h4 id=\"20-常用设计模式\"><a href=\"#20-常用设计模式\" class=\"headerlink\" title=\"20 常用设计模式\"></a>20 常用设计模式</h4><ul>\n<li><p>单例模式：主要解决全局使用的类频繁的创建和销毁的问题。单例模式下可以确保一个类只有一个实例，而且自行化实例并向整个系统提供这个实例。</p>\n<ul>\n<li>多线程安全问题<ul>\n<li>饿汉式：基于class loader机制避免多线程同步问题，但可能</li>\n<li>懒汉式：通过双重锁机制实现线程安全</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>工厂模式：主要解决接口选择的问题。该模式下定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，使其创建过程延迟到子类进行</p>\n</li>\n<li><p>观察者模式：定义对象间的一种一对多的依赖关系。当被观察者发生状态改变时，观察者会受到通知。类似于回调函数。</p>\n</li>\n<li><p>装饰器模式：对已经存在的某些类进行装饰，以拓展一些功能，从而动态的为一个对象增加新的功能。</p>\n</li>\n</ul>\n<h4 id=\"21-OOP设计模式五大原则\"><a href=\"#21-OOP设计模式五大原则\" class=\"headerlink\" title=\"21 OOP设计模式五大原则\"></a>21 OOP设计模式五大原则</h4><ul>\n<li>单一职责：避免相同的职责分配到不同的类中；避免一个类承担太多职责</li>\n<li>接口隔离：客户端不应实现一些它们不会使用的接口</li>\n<li>开放-封闭：在扩展性方面是开放的而在更改性方面是封闭的</li>\n<li>替换：子类型必须能替换掉它们的父类、并且出现在父类出现的任何地方</li>\n<li>依赖倒置：上层模块不应该依赖于下层模块</li>\n</ul>\n<h4 id=\"22-手写Singleton模式\"><a href=\"#22-手写Singleton模式\" class=\"headerlink\" title=\"22 手写Singleton模式\"></a>22 手写Singleton模式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template&lt;typename T&gt; </span><br><span class=\"line\">class Singleton &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    Singleton(const Singleton&amp; ) &#x3D; delete;</span><br><span class=\"line\">    Singleton&amp; operator&#x3D;(const Singleton&amp; ) &#x3D; delete;</span><br><span class=\"line\">    static T* getInstance() &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        if (uniqueInstance &#x3D;&#x3D; nullptr) &#123;</span><br><span class=\"line\">            uniqueInstance &#x3D; new T();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">        return uniqueInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    static T* uniqueInstance;</span><br><span class=\"line\">    static pthread_mutex_t mutex;</span><br><span class=\"line\">    Singleton() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">template&lt;typename T&gt; </span><br><span class=\"line\">pthread_mutex_t Singleton&lt;T&gt;::mutex &#x3D; PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\"></span><br><span class=\"line\">template&lt;typename T&gt; </span><br><span class=\"line\">T* Singleton&lt;T&gt;::uniqueInstance &#x3D; nullptr;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":6333,"excerpt":"","more":"<h4 id=\"1-TCP三次握手与四次挥手\"><a href=\"#1-TCP三次握手与四次挥手\" class=\"headerlink\" title=\"1 TCP三次握手与四次挥手\"></a>1 TCP三次握手与四次挥手</h4><h5 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h5><ul>\n<li>第一次：Client将SYN标志位置为1，随机产生一个序号seq=x，将该数据包发送给Server，Client进入SYN_SENT状态，等待Server回应</li>\n<li>第二次：Server收到数据包后根据SYN为1判断Cl6ient请求建立连接。Server将标志位SYN与ACK都置为1，ack=x+1，随机产生一个序号seq=y，将该数据包发送给Client，Server进入SYN_RCVD状态</li>\n<li>第三次：Client收到确认数据包后，检查是否ack=x+1，如果正确则将ACK置为1，ack=y+1，seq=x+1，并将该数据包发送给Server，Server收到后确认是否ACK=1，是否ack=y+1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，三次握手结束<br><img src=\"/images/woshou.jpg\" alt=\"握手过程\" title=\"woshou\"></li>\n</ul>\n<h5 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h5><ul>\n<li>第一次：Client将FIN标志位置为1，随机产生一个序号seq=u,将该数据包发送给Server，此后Client停止发送数据，Client进入FIN_WAIT_1状态</li>\n<li>第二次：Server收到数据包后根据FIN=1判断Client请求断开连接，Server将ACK=1，将ack=u+1，随机产生一个序号seq=v，发送该数据包，Server进入CLOSE_WAIT状态，等待将数据发送完；Client收到该数据包后进入CLOSE_WAIT_2状态</li>\n<li>第三次：Server将FIN=1，ACK=1，ack=u+1，随机产生一个序号seq=w，将该数据包发送给Client，Server进入LAST_ACK状态</li>\n<li>第四次：Client收到数据包后检查其中FIN，发现为1，接着将ACK=1，seq=u+1，ack=w+1，发送给数据包给Server，Client进入TIME_WAIT状态；Server收到后关闭连接，进入CLOSE状态，Client在发送给数据包后等待2MSL（报文最大生存时间）然后关闭连接，进入CLOSE状态<br><img src=\"/images/huishou.jpg\" alt=\"挥手过程\" title=\"huishou\"></li>\n</ul>\n<h4 id=\"2-挥手与握手过程中Client与Server的状态变化\"><a href=\"#2-挥手与握手过程中Client与Server的状态变化\" class=\"headerlink\" title=\"2 挥手与握手过程中Client与Server的状态变化\"></a>2 挥手与握手过程中Client与Server的状态变化</h4><ul>\n<li>Client：CLOSE -&gt; SYN_SENT -&gt; ESTABLISHED -&gt; FIN_WAIT_1 -&gt; FIN_WAIT_2 -&gt; TIME_WAIT -&gt; CLOSE</li>\n<li>Server:LISTEN -&gt; SYN_RCVD -&gt; ESTABLISHED -&gt; CLOSE_WAIT -&gt; LAST_ACK -&gt; CLOSE</li>\n</ul>\n<h4 id=\"3-为什么三次握手、四次挥手？\"><a href=\"#3-为什么三次握手、四次挥手？\" class=\"headerlink\" title=\"3 为什么三次握手、四次挥手？\"></a>3 为什么三次握手、四次挥手？</h4><ul>\n<li>三次握手：三次握手可以防止已经失效的请求连接的报文突然有传输到服务器端导致服务器资源的浪费。</li>\n<li>四次挥手：由于Server收到ClientFIN报文的时候可能还有数据需要传送，因此先发送ACK报文告知Client请求收到，等待Server发送完数据，就可以像Client发送FIN报文告知数据发送完毕</li>\n</ul>\n<h4 id=\"4-TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传\"><a href=\"#4-TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传\" class=\"headerlink\" title=\"4 TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传\"></a>4 TCP的滑动窗口、流量控制和拥塞控制，快重传和快恢复，超时重传</h4><ul>\n<li><p>滑动窗口协议</p>\n<ul>\n<li>窗口：发送者可以连续发送一段字节序列而不需等待接受者的应答，这段连续序列的长度称为窗口</li>\n<li>滑动：窗口的大小是可以随着发送的过程而变化的</li>\n</ul>\n</li>\n<li><p>流量控制：主要是接收方传递消息给发送方，使其不要发送数据太快。具体实现为应答的ACK包中会包含自己的接收窗口的大小，利用窗口的大小控制发送方数据的发送速度</p>\n</li>\n<li><p>拥塞控制：防止过多的数据注入到网络中导致路由器或链路过载。具体实现的方法为：（1）慢启动、拥塞控制；（2）快重传、快恢复</p>\n<ul>\n<li>慢启动：定义拥塞窗口，初始大小为1，之后每次收到确认应答，将拥塞窗口的大小*2</li>\n<li>拥塞避免：设置慢启动阈值，一般为65535,，当拥塞窗口大于这个阈值后，每次收到确认应答将拥塞窗口的大小+1</li>\n<li>快重传：如果接收方发现某个包丢失，会对发送方发送重传请求；一旦发送方收到三个一样的ack，立即重传该包；随后快恢复</li>\n<li>快恢复：首先将慢启动阈值设置为当前拥塞窗口的1/2；然后将拥塞窗口重新设置为慢启动阈值大小+3</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"5-OSI七层模型和TCP-IP四层模型\"><a href=\"#5-OSI七层模型和TCP-IP四层模型\" class=\"headerlink\" title=\"5 OSI七层模型和TCP/IP四层模型\"></a>5 OSI七层模型和TCP/IP四层模型</h4><ul>\n<li><p>OSI七层模型</p>\n<ul>\n<li>物理层：主要协议IEEE802.3、RJ45等</li>\n<li>数据链路层：主要协议MAC、VLAN等</li>\n<li>网络层：主要协议为IP、ARP、ICMP、IGMP等</li>\n<li>传输层：主要协议为TCP、UDP等</li>\n<li>会话层：主要协议为RPC等</li>\n<li>表示层：主要协议为JPEG等</li>\n<li>应用层：主要协议为FTP、HTTP、DNS等</li>\n</ul>\n</li>\n<li><p>TCP/IP四层模型</p>\n<ul>\n<li>网络接口层：MAC、VLAN等</li>\n<li>网络层：IP、ARP、ICMP、IGMP等</li>\n<li>传输层：TCP、UDP等</li>\n<li>应用层：HTTP、DNS、SMTP</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-TCP与UDP的区别\"><a href=\"#6-TCP与UDP的区别\" class=\"headerlink\" title=\"6 TCP与UDP的区别\"></a>6 TCP与UDP的区别</h4><ul>\n<li>TCP是面向连接的、可靠的，而UDP是非面向连接、不可靠的</li>\n<li>TCP一对一，UDP支持一对一，一对多，多对一，多对多</li>\n<li>TCP具有拥塞控制与流量控制而UDP没有</li>\n<li>TCP报文长度动态改变而UDP不是</li>\n<li>TCP传输单位为报文段，而UDP传输单位为用户数据报</li>\n<li>TCP注重安全性，而UDP数据传输快</li>\n<li>用TCP的协议：FTP、Telnet、SMTP、POP3、HTTP(s)，用UDP的协议：DNS、SNMP、TFTP</li>\n</ul>\n<h4 id=\"7-HTTP与HTTPS的区别\"><a href=\"#7-HTTP与HTTPS的区别\" class=\"headerlink\" title=\"7 HTTP与HTTPS的区别\"></a>7 HTTP与HTTPS的区别</h4><ul>\n<li><p>区别如下：</p>\n<ol>\n<li>HTTP协议传输的数据是以明文方式，而HTTPS协议传输的数据则是经过TLS加密的</li>\n<li>HTTPS在TCP三次握手后，还需要进行SSL的handshake，协商加密密钥</li>\n<li>HTTPS需要在服务器端申请证书，浏览器端安装对应的根证书</li>\n<li>HTTP协议的端口是80，HTTPS协议的端口是443</li>\n</ol>\n</li>\n<li><p>HTTPS优缺点</p>\n<ul>\n<li>优点<ul>\n<li>安全性更高</li>\n<li>可以认证用户和服务器，确保数据发送到正确的用户和服务器</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>握手阶段延时较高</li>\n<li>部署成本高（购买证书，解密吃CPU）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8浏览器中输入URL后会发生什么\"><a href=\"#8浏览器中输入URL后会发生什么\" class=\"headerlink\" title=\"8浏览器中输入URL后会发生什么\"></a>8浏览器中输入URL后会发生什么</h4><ol>\n<li>域名解析获得IP地址：用到DNS、UDP协议</li>\n<li>建立http连接：用到http协议</li>\n<li>生成get请求报文：生成后交给TCP层处理，用到TCP与IP协议</li>\n</ol>\n<h4 id=\"9-HTTP请求步骤\"><a href=\"#9-HTTP请求步骤\" class=\"headerlink\" title=\"9 HTTP请求步骤\"></a>9 HTTP请求步骤</h4><ol>\n<li>客户端连接到web服务器</li>\n<li>发送http客户请求</li>\n<li>服务器接受请求并返回http响应</li>\n<li>释放TCP连接</li>\n<li>客户端浏览器解析html内容</li>\n</ol>\n<h4 id=\"10-socket编程中服务器端和客户端主要用到哪些函数\"><a href=\"#10-socket编程中服务器端和客户端主要用到哪些函数\" class=\"headerlink\" title=\"10 socket编程中服务器端和客户端主要用到哪些函数\"></a>10 socket编程中服务器端和客户端主要用到哪些函数</h4><ul>\n<li><p>基于TCP的socket</p>\n<ul>\n<li>Server<ol>\n<li>创建socket：socket()</li>\n<li>设置socket属性：setsockopt()</li>\n<li>绑定IP、端口号：bind()</li>\n<li>设置允许的最大连接数：listen()</li>\n<li>接收客户端的连接：accept()</li>\n<li>收发数据：send()+recv() or read()+write()</li>\n<li>关闭网络连接：close()</li>\n<li>关闭监听</li>\n</ol>\n</li>\n<li>Client<ol>\n<li>创建socket：socket()</li>\n<li>设置socket属性：setsockopt()</li>\n<li>设置绑定IP、端口号：bind()</li>\n<li>设置要连接的IP及端口</li>\n<li>连接Server：connect()</li>\n<li>收发数据: send()+recv() / read()/write()</li>\n<li>关闭网络：close()<br><img src=\"/images/tcp_socket.png\" alt=\"基于TCP的socket\"></li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>UDP的socket</p>\n<ul>\n<li>Server<ol>\n<li>创建socket：socket()</li>\n<li>设置属性：setsockopt()</li>\n<li>绑定IP、端口：bind()</li>\n<li>循环收、发数据：recvfrom() + sendto()</li>\n<li>关闭连接</li>\n</ol>\n</li>\n<li>Client<ol>\n<li>创建socket：socket()</li>\n<li>设置属性：setsockopt()</li>\n<li>绑定IP、端口：bind()</li>\n<li>设置要连接的IP及端口</li>\n<li>发送、接收数据：sendto() + recvfrom()</li>\n<li>关闭连接<br><img src=\"/images/udp_socket.png\" alt=\"基于UDP的socket\"></li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"11-Post与Get的区别\"><a href=\"#11-Post与Get的区别\" class=\"headerlink\" title=\"11 Post与Get的区别\"></a>11 Post与Get的区别</h4><ul>\n<li>表面区别</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">Get</th>\n<th align=\"center\">Post</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">编码类型</td>\n<td align=\"center\">application/x-www-form-urlencoded</td>\n<td align=\"center\">application/x-www-form-urlencoded或multipart/form-data</td>\n</tr>\n<tr>\n<td align=\"center\">数据长度限制</td>\n<td align=\"center\">URL最大长度是2048个字符</td>\n<td align=\"center\">无限制</td>\n</tr>\n<tr>\n<td align=\"center\">数据类型限制</td>\n<td align=\"center\">ASCII字符</td>\n<td align=\"center\">没有限制，可以是二进制数据</td>\n</tr>\n<tr>\n<td align=\"center\">安全性</td>\n<td align=\"center\">较差，因为数据是URL的一部分</td>\n<td align=\"center\">较好，数据不会保存在浏览器历史和服务器日志中</td>\n</tr>\n<tr>\n<td align=\"center\">可见性</td>\n<td align=\"center\">数据在URL中，可见</td>\n<td align=\"center\">数据不在URL中，不可见</td>\n</tr>\n<tr>\n<td align=\"center\">后退/刷新</td>\n<td align=\"center\">无害</td>\n<td align=\"center\">数据会重新提交</td>\n</tr>\n<tr>\n<td align=\"center\">缓存</td>\n<td align=\"center\">可以</td>\n<td align=\"center\">不可以</td>\n</tr>\n<tr>\n<td align=\"center\">书签</td>\n<td align=\"center\">可以</td>\n<td align=\"center\">不可以</td>\n</tr>\n<tr>\n<td align=\"center\">历史</td>\n<td align=\"center\">参数保留在历史记录中</td>\n<td align=\"center\">参数不会保留在历史记录中</td>\n</tr>\n</tbody></table>\n<ul>\n<li>本质区别<ul>\n<li>Get用于获取信息，无副作用，是幂等的，且可缓存，而Post用于修改服务器上的数据，有副作用，非幂等的，不可缓存</li>\n<li>在传输上，都是基于TCP/IP协议的，没有区别；在报文格式上，不带参数时，区别在于请求行的方法不同（分别是Get和Post），带参数时，Get的参数在URL中，而Post的参数在请求体中</li>\n</ul>\n</li>\n</ul>\n<p>参考：<br>[1] <a href=\"https://www.cnblogs.com/logsharing/p/8448446.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/logsharing/p/8448446.html</a><br>[2] <a href=\"https://baijiahao.baidu.com/s?id=1626599028653203490&amp;wfr=spider&amp;for=pc\" target=\"_blank\" rel=\"noopener\">https://baijiahao.baidu.com/s?id=1626599028653203490&amp;wfr=spider&amp;for=pc</a></p>\n<h4 id=\"12-HTTP请求头部\"><a href=\"#12-HTTP请求头部\" class=\"headerlink\" title=\"12 HTTP请求头部\"></a>12 HTTP请求头部</h4><ul>\n<li>请求行<ul>\n<li>请求方法</li>\n<li>请求URL</li>\n<li>HTTP协议及版本</li>\n</ul>\n</li>\n<li>报文头</li>\n<li>报文体</li>\n</ul>\n<h4 id=\"12-指针常量与常量指针\"><a href=\"#12-指针常量与常量指针\" class=\"headerlink\" title=\"12 指针常量与常量指针\"></a>12 指针常量与常量指针</h4><p>区别：*在前在是指针常量，const在前则是常量指针</p>\n<ul>\n<li>指针常量：不能改变指针的指向，int* const p = &a;</li>\n<li>常量指针：不能改变指针指向的值， const int *p;</li>\n</ul>\n<h4 id=\"12-C-内存布局（从高到低的顺序）以及为什么这么布局？\"><a href=\"#12-C-内存布局（从高到低的顺序）以及为什么这么布局？\" class=\"headerlink\" title=\"12 C++内存布局（从高到低的顺序）以及为什么这么布局？\"></a>12 C++内存布局（从高到低的顺序）以及为什么这么布局？</h4><ul>\n<li>内核空间（1G）</li>\n<li>栈（向下增长）：局部变量</li>\n<li>内存映射段：存放静态库、动态库以及文件映射等</li>\n<li>堆（向上增长）：malloc、calloc、realloc以及new申请的空间</li>\n<li>数据段<ul>\n<li>BSS段：未初始化或初始化为0的全局变量和静态变量</li>\n<li>数据段：已初始化的全局变量和静态变量</li>\n</ul>\n</li>\n<li>代码段<ul>\n<li>可执行代码</li>\n<li>只读常量</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"13-Linux-C-调试工具\"><a href=\"#13-Linux-C-调试工具\" class=\"headerlink\" title=\"13 Linux C++调试工具\"></a>13 Linux C++调试工具</h4><p><a href=\"https://www.cnblogs.com/lidabo/p/4377545.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lidabo/p/4377545.html</a></p>\n<h4 id=\"14-为什么构造函数不可以是虚函数？\"><a href=\"#14-为什么构造函数不可以是虚函数？\" class=\"headerlink\" title=\"14 为什么构造函数不可以是虚函数？\"></a>14 为什么构造函数不可以是虚函数？</h4><ul>\n<li>构造函数不需要是虚函数，也不允许是虚函数。因为当创建一个对象时，我们总是要明确指定对象的类型，尽管我们可能通过基类的指针或引用去访问它。</li>\n<li>从实现的角度看。虚函数表总是在构造函数调用之后才建立，因而构造函数不可能成为虚函数。</li>\n</ul>\n<h4 id=\"15-红黑树的特点\"><a href=\"#15-红黑树的特点\" class=\"headerlink\" title=\"15 红黑树的特点\"></a>15 红黑树的特点</h4><ol>\n<li>每个节点要么是红的，要么是黑的；</li>\n<li>根节点是黑的；</li>\n<li>每个叶节点都是黑的；</li>\n<li>如果一个节点是红的，那么它的两个子节点都是黑的；</li>\n<li>对于任意一个节点而言，其到叶节点尾端NULL指针的每条路径都经过相同数目的黑节点。</li>\n</ol>\n<h4 id=\"16-AVL树和红黑树的定义与区别\"><a href=\"#16-AVL树和红黑树的定义与区别\" class=\"headerlink\" title=\"16 AVL树和红黑树的定义与区别\"></a>16 AVL树和红黑树的定义与区别</h4><ul>\n<li>AVL树：AVL（平衡二叉树），是一种特殊的排序二叉树，其左右子树也是平衡二叉树，且左右子树高度差的绝对值不大于1。</li>\n<li>红黑树：红黑树是一种二叉查找树，但在每个节点增加了一个存储位表示节点的颜色，非红即黑。通过对任何一条根到叶子的路径上各个节点着色的方式的限制，红黑树确保没有一条路径会比其他路径长2倍。故，红黑树是一种弱平衡二叉树。红黑树有以下5个特点：<ol>\n<li>每个节点要么是红的，要么是黑的；</li>\n<li>根节点是黑的；</li>\n<li>每个叶节点都是黑的；</li>\n<li>如果一个节点是红的，那么它的两个子节点都是黑的；</li>\n<li>对于任意一个节点而言，其到叶节点尾端NULL指针的每条路径都经过相同数目的黑节点。</li>\n</ol>\n</li>\n<li>区别：AVL树是高度平衡的，频繁的插入和删除，会引起频繁的rebalance，导致效率下降；红黑树不是高度平衡的，算是一种折中，插入最多2次旋转，删除最多3次旋转。</li>\n</ul>\n<h4 id=\"17-B-树与B-树的定义\"><a href=\"#17-B-树与B-树的定义\" class=\"headerlink\" title=\"17 B-树与B+树的定义\"></a>17 B-树与B+树的定义</h4><ul>\n<li>B树：一颗m阶B树定义如下<ul>\n<li>每个节点最多有m-1个关键字</li>\n<li>根节点最少可以只有1个关键字</li>\n<li>非根节点至少有ceil(m/2)+1个关键字</li>\n<li>每个节点的关键字都按从小到大的顺序排列，左子树的关键字都小于它，右子树的关键字都大于它</li>\n<li>所有叶子节点都位于同一层（或者说根节点到每个叶子节点的长度相同）</li>\n</ul>\n</li>\n<li>B+树：一颗m阶B+树的定义如下<ul>\n<li>B+树的定义基本与B树等价，但是B+树还有以下要求</li>\n<li>B+树包含2种类型的节点：内部节点（索引节点）和叶子节点。</li>\n<li>内部节点不保存数据，只用于索引，因而所有的数据都保存在叶子节点上</li>\n<li>内部节点中的key都按从小到大的顺序排列，对于内部节点中的一个key，左子树中所有的key都<em>小于</em>它，右子树中的key都<em>大于等于</em>它</li>\n<li>每个叶子节点都存有下一个相邻叶子节点的指针，叶子节点本身根据关键字从小到大形成链表</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"18-堆与栈的区别\"><a href=\"#18-堆与栈的区别\" class=\"headerlink\" title=\"18 堆与栈的区别\"></a>18 堆与栈的区别</h4><ul>\n<li>堆是有低地址向高地址扩展，而栈是高地址向低地址扩展</li>\n<li>堆中的内存需要手动的申请与释放，而栈中的地址是由OS自动的申请和释放的</li>\n<li>堆中频繁的调用malloc和free会产生内存碎片，而栈不会</li>\n<li>堆的分配效率低，而栈的分配效率高</li>\n</ul>\n<h4 id=\"19-常见排序算法总结\"><a href=\"#19-常见排序算法总结\" class=\"headerlink\" title=\"19 常见排序算法总结\"></a>19 常见排序算法总结</h4><table>\n<thead>\n<tr>\n<th>算法</th>\n<th align=\"center\">平均时间复杂度</th>\n<th align=\"center\">最好时间复杂度</th>\n<th align=\"center\">最坏时间复杂度</th>\n<th align=\"center\">空间复杂度</th>\n<th align=\"right\">是否稳定</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>插入排序</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">稳定</td>\n</tr>\n<tr>\n<td>冒泡排序</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">稳定</td>\n</tr>\n<tr>\n<td>简单选择排序</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">不稳定</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td align=\"center\">O(n^1.25)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">不稳定</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(n)</td>\n<td align=\"right\">稳定</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(n^2)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"right\">不稳定</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(nlogn)</td>\n<td align=\"center\">O(1)</td>\n<td align=\"right\">不稳定</td>\n</tr>\n</tbody></table>\n<h4 id=\"20-常用设计模式\"><a href=\"#20-常用设计模式\" class=\"headerlink\" title=\"20 常用设计模式\"></a>20 常用设计模式</h4><ul>\n<li><p>单例模式：主要解决全局使用的类频繁的创建和销毁的问题。单例模式下可以确保一个类只有一个实例，而且自行化实例并向整个系统提供这个实例。</p>\n<ul>\n<li>多线程安全问题<ul>\n<li>饿汉式：基于class loader机制避免多线程同步问题，但可能</li>\n<li>懒汉式：通过双重锁机制实现线程安全</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>工厂模式：主要解决接口选择的问题。该模式下定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，使其创建过程延迟到子类进行</p>\n</li>\n<li><p>观察者模式：定义对象间的一种一对多的依赖关系。当被观察者发生状态改变时，观察者会受到通知。类似于回调函数。</p>\n</li>\n<li><p>装饰器模式：对已经存在的某些类进行装饰，以拓展一些功能，从而动态的为一个对象增加新的功能。</p>\n</li>\n</ul>\n<h4 id=\"21-OOP设计模式五大原则\"><a href=\"#21-OOP设计模式五大原则\" class=\"headerlink\" title=\"21 OOP设计模式五大原则\"></a>21 OOP设计模式五大原则</h4><ul>\n<li>单一职责：避免相同的职责分配到不同的类中；避免一个类承担太多职责</li>\n<li>接口隔离：客户端不应实现一些它们不会使用的接口</li>\n<li>开放-封闭：在扩展性方面是开放的而在更改性方面是封闭的</li>\n<li>替换：子类型必须能替换掉它们的父类、并且出现在父类出现的任何地方</li>\n<li>依赖倒置：上层模块不应该依赖于下层模块</li>\n</ul>\n<h4 id=\"22-手写Singleton模式\"><a href=\"#22-手写Singleton模式\" class=\"headerlink\" title=\"22 手写Singleton模式\"></a>22 手写Singleton模式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template&lt;typename T&gt; </span><br><span class=\"line\">class Singleton &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    Singleton(const Singleton&amp; ) &#x3D; delete;</span><br><span class=\"line\">    Singleton&amp; operator&#x3D;(const Singleton&amp; ) &#x3D; delete;</span><br><span class=\"line\">    static T* getInstance() &#123;</span><br><span class=\"line\">        pthread_mutex_lock(&amp;mutex);</span><br><span class=\"line\">        if (uniqueInstance &#x3D;&#x3D; nullptr) &#123;</span><br><span class=\"line\">            uniqueInstance &#x3D; new T();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pthread_mutex_unlock(&amp;mutex);</span><br><span class=\"line\">        return uniqueInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    static T* uniqueInstance;</span><br><span class=\"line\">    static pthread_mutex_t mutex;</span><br><span class=\"line\">    Singleton() &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">template&lt;typename T&gt; </span><br><span class=\"line\">pthread_mutex_t Singleton&lt;T&gt;::mutex &#x3D; PTHREAD_MUTEX_INITIALIZER;</span><br><span class=\"line\"></span><br><span class=\"line\">template&lt;typename T&gt; </span><br><span class=\"line\">T* Singleton&lt;T&gt;::uniqueInstance &#x3D; nullptr;</span><br></pre></td></tr></table></figure>"},{"title":"Linux学习笔记","date":"2019-12-18T08:37:54.000Z","_content":"\n#### 1 Linux系统目录\n+ bin：存放二进制可执行文件\n+ boot：存放开机启动程序\n+ dev：存放设备文件\n+ home：存放用户\n+ etc：存放信息和系统配置文件\n+ lib：库文件\n+ root：管理员宿主目录\n+ usr：用户资源管理目录\n\n#### 2 Linux系统文件类型\n* 普通文件（-）\n* 目录文件（d）\n* 字符设备文件（c）\n* 块设备文件（b）\n* 软连接（l）\n* 管道文件（p）\n* 套接字（s）\n* 未知文件\n\n#### 3 常用命令\n+ ls：列出文件\n+ cd：切换目录\n+ which：查看命令路径\n+ pwd：查看当前路径\n+ mkdir：创建目录\n+ rmdir：删除空目录\n+ touch：创建文件\n+ rm：删除文件（-r删除目录）\n\n#### 4 文件命令\n+ chmod: 更改文件权限\n* 文字设定法：\n* 操作对象可以是： u表示用户， g表示同组用户，o表示其他用户，a表示所有用户  \n* 操作符号可以有： +添加权限，-取消权限，=赋予给定权限并取消其他所有权限\n* 操作权限可以是： r读，w写，x执行   \n``` \nchmod a+x file # 所有用户可执行\n```\n* 数字设定法：r是4，w是2，x是1   \n```\nchmod 764 file # 用户可读可写可执行，组用户可读可写，其他用户可读\n```\n+ chown：修改文件所属用户\n```\nsudo chmod user file\n```\n\n+ find：查找文件\n* -type：按文件类型查找\n* -name：按文件名查找\n* -maxdepth：指定查找深度，应作为第一个参数出现\n* -size：指定大小\n```\nfind ./ -type \"l\"               # 查找软连接\nfind ./ -name '*.jpg'           # 查找当前目录及子目录下的jpg文件\nfind ./ -maxdepth 1 '*.jpg'     # 查找当前目录下的jpg文件\nfind ./ -size +200k -size -2M   # 查找200k~2M的jpg文件，注意是小写的k，大写的M\n```\n\n+ grep命令：找文件内容\n```\ngrep -r 'copy' ./ -n\nps aux | grep cupsd\n```\n\n#### 5 gcc编译\n编译分为四个步骤：\n##### 5.1 预处理\n任务：展开头文件，宏替换，替换条件编译，删除注释、空行和空格。  \n指令：`gcc -E file`。  \n生成文件：file.i  \n\n##### 5.2 编译\n任务：检查语法规范。  \n指令：`gcc -S file[.i]`。  \n生成文件：file.s\n\n##### 5.3 汇编\n任务：将汇编指令翻译成机器指令。  \n指令：`gcc -c file[.s]`。  \n生成文件：file.o  \n\n##### 5.4 链接\n任务：数据段合并，地址回填。\n指令：`gcc file[.o]`。\n生成文件：file.out\n\n##### 5.5 其他常用参数\n+ -I：指定头文件所在目录位置。\n+ -g：添加调试语句，以便使用gdb调试\n+ -Wall：显示所有警告信息\n+ -D：向程序动态注册宏定义\n\n#### 6 静态库制作及使用\n##### 6.1 将.c生成.o文件  \n命令：`gcc -c a.c -o a.o`\n\n##### 6.2 使用ar工具制作静态库\n命令：`ar rcs lib[库名].a a.o`\n\n##### 6.3 制作静态库的头文件\n\n##### 6.4 编辑静态库到可执行文件\n命令：`gcc test.c lib[库名].a -o test`\n\n#### 7 动态库的制作及使用\n##### 7.1 将.c生成与位置无关的.o代码\n```\ngcc -c file.c -o file.o -fPIC\n```\n\n##### 7.2 制作动态库\n```\ngcc -shared -o lib[库名].so file.o\n```\n\n##### 7.3 编译时指定动态库\n```\ngcc test.c -o test -l [库名] -L [库路径]\n```\n\n##### 7.4 配置动态链接库的路径\n+ 直接在终端执行`export LD_LIBRARY_PATH=[库路径]`\n+ 修改终端配置文件\n    * 在终端配置文件.bashrc下添加`export LD_LIBRARY_PATH=[库路径]`\n    * 使配置文件生效： `. .bashrc` / `source .bashrc`  / 重启一个终端\n+ 拷贝库到系统库路径`/lib`下\n+ 配置链接器\n    * 在链接器配置文件中添加动态链接库的绝对路径\n    * 使配置文件生效：`sudo ldconfig -v`\n\n#### 8 dentry与inode\n**dentry（目录项）：**结构体，存储的时文件名与inode。\n**inode：**结构体，存储的是文件的属性信息，以及文件在磁盘上的存储位置。","source":"_posts/Linux学习笔记.md","raw":"---\ntitle: Linux学习笔记\ndate: 2019-12-18 16:37:54\ntags:\n\t- linux\n---\n\n#### 1 Linux系统目录\n+ bin：存放二进制可执行文件\n+ boot：存放开机启动程序\n+ dev：存放设备文件\n+ home：存放用户\n+ etc：存放信息和系统配置文件\n+ lib：库文件\n+ root：管理员宿主目录\n+ usr：用户资源管理目录\n\n#### 2 Linux系统文件类型\n* 普通文件（-）\n* 目录文件（d）\n* 字符设备文件（c）\n* 块设备文件（b）\n* 软连接（l）\n* 管道文件（p）\n* 套接字（s）\n* 未知文件\n\n#### 3 常用命令\n+ ls：列出文件\n+ cd：切换目录\n+ which：查看命令路径\n+ pwd：查看当前路径\n+ mkdir：创建目录\n+ rmdir：删除空目录\n+ touch：创建文件\n+ rm：删除文件（-r删除目录）\n\n#### 4 文件命令\n+ chmod: 更改文件权限\n* 文字设定法：\n* 操作对象可以是： u表示用户， g表示同组用户，o表示其他用户，a表示所有用户  \n* 操作符号可以有： +添加权限，-取消权限，=赋予给定权限并取消其他所有权限\n* 操作权限可以是： r读，w写，x执行   \n``` \nchmod a+x file # 所有用户可执行\n```\n* 数字设定法：r是4，w是2，x是1   \n```\nchmod 764 file # 用户可读可写可执行，组用户可读可写，其他用户可读\n```\n+ chown：修改文件所属用户\n```\nsudo chmod user file\n```\n\n+ find：查找文件\n* -type：按文件类型查找\n* -name：按文件名查找\n* -maxdepth：指定查找深度，应作为第一个参数出现\n* -size：指定大小\n```\nfind ./ -type \"l\"               # 查找软连接\nfind ./ -name '*.jpg'           # 查找当前目录及子目录下的jpg文件\nfind ./ -maxdepth 1 '*.jpg'     # 查找当前目录下的jpg文件\nfind ./ -size +200k -size -2M   # 查找200k~2M的jpg文件，注意是小写的k，大写的M\n```\n\n+ grep命令：找文件内容\n```\ngrep -r 'copy' ./ -n\nps aux | grep cupsd\n```\n\n#### 5 gcc编译\n编译分为四个步骤：\n##### 5.1 预处理\n任务：展开头文件，宏替换，替换条件编译，删除注释、空行和空格。  \n指令：`gcc -E file`。  \n生成文件：file.i  \n\n##### 5.2 编译\n任务：检查语法规范。  \n指令：`gcc -S file[.i]`。  \n生成文件：file.s\n\n##### 5.3 汇编\n任务：将汇编指令翻译成机器指令。  \n指令：`gcc -c file[.s]`。  \n生成文件：file.o  \n\n##### 5.4 链接\n任务：数据段合并，地址回填。\n指令：`gcc file[.o]`。\n生成文件：file.out\n\n##### 5.5 其他常用参数\n+ -I：指定头文件所在目录位置。\n+ -g：添加调试语句，以便使用gdb调试\n+ -Wall：显示所有警告信息\n+ -D：向程序动态注册宏定义\n\n#### 6 静态库制作及使用\n##### 6.1 将.c生成.o文件  \n命令：`gcc -c a.c -o a.o`\n\n##### 6.2 使用ar工具制作静态库\n命令：`ar rcs lib[库名].a a.o`\n\n##### 6.3 制作静态库的头文件\n\n##### 6.4 编辑静态库到可执行文件\n命令：`gcc test.c lib[库名].a -o test`\n\n#### 7 动态库的制作及使用\n##### 7.1 将.c生成与位置无关的.o代码\n```\ngcc -c file.c -o file.o -fPIC\n```\n\n##### 7.2 制作动态库\n```\ngcc -shared -o lib[库名].so file.o\n```\n\n##### 7.3 编译时指定动态库\n```\ngcc test.c -o test -l [库名] -L [库路径]\n```\n\n##### 7.4 配置动态链接库的路径\n+ 直接在终端执行`export LD_LIBRARY_PATH=[库路径]`\n+ 修改终端配置文件\n    * 在终端配置文件.bashrc下添加`export LD_LIBRARY_PATH=[库路径]`\n    * 使配置文件生效： `. .bashrc` / `source .bashrc`  / 重启一个终端\n+ 拷贝库到系统库路径`/lib`下\n+ 配置链接器\n    * 在链接器配置文件中添加动态链接库的绝对路径\n    * 使配置文件生效：`sudo ldconfig -v`\n\n#### 8 dentry与inode\n**dentry（目录项）：**结构体，存储的时文件名与inode。\n**inode：**结构体，存储的是文件的属性信息，以及文件在磁盘上的存储位置。","slug":"Linux学习笔记","published":1,"updated":"2020-08-23T13:24:16.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq7200049s72c0h75950","content":"<h4 id=\"1-Linux系统目录\"><a href=\"#1-Linux系统目录\" class=\"headerlink\" title=\"1 Linux系统目录\"></a>1 Linux系统目录</h4><ul>\n<li>bin：存放二进制可执行文件</li>\n<li>boot：存放开机启动程序</li>\n<li>dev：存放设备文件</li>\n<li>home：存放用户</li>\n<li>etc：存放信息和系统配置文件</li>\n<li>lib：库文件</li>\n<li>root：管理员宿主目录</li>\n<li>usr：用户资源管理目录</li>\n</ul>\n<h4 id=\"2-Linux系统文件类型\"><a href=\"#2-Linux系统文件类型\" class=\"headerlink\" title=\"2 Linux系统文件类型\"></a>2 Linux系统文件类型</h4><ul>\n<li>普通文件（-）</li>\n<li>目录文件（d）</li>\n<li>字符设备文件（c）</li>\n<li>块设备文件（b）</li>\n<li>软连接（l）</li>\n<li>管道文件（p）</li>\n<li>套接字（s）</li>\n<li>未知文件</li>\n</ul>\n<h4 id=\"3-常用命令\"><a href=\"#3-常用命令\" class=\"headerlink\" title=\"3 常用命令\"></a>3 常用命令</h4><ul>\n<li>ls：列出文件</li>\n<li>cd：切换目录</li>\n<li>which：查看命令路径</li>\n<li>pwd：查看当前路径</li>\n<li>mkdir：创建目录</li>\n<li>rmdir：删除空目录</li>\n<li>touch：创建文件</li>\n<li>rm：删除文件（-r删除目录）</li>\n</ul>\n<h4 id=\"4-文件命令\"><a href=\"#4-文件命令\" class=\"headerlink\" title=\"4 文件命令\"></a>4 文件命令</h4><ul>\n<li>chmod: 更改文件权限</li>\n</ul>\n<ul>\n<li>文字设定法：</li>\n<li>操作对象可以是： u表示用户， g表示同组用户，o表示其他用户，a表示所有用户  </li>\n<li>操作符号可以有： +添加权限，-取消权限，=赋予给定权限并取消其他所有权限</li>\n<li>操作权限可以是： r读，w写，x执行   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x file # 所有用户可执行</span><br></pre></td></tr></table></figure></li>\n<li>数字设定法：r是4，w是2，x是1   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 764 file # 用户可读可写可执行，组用户可读可写，其他用户可读</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>chown：修改文件所属用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod user file</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>find：查找文件</p>\n</li>\n</ul>\n<ul>\n<li>-type：按文件类型查找</li>\n<li>-name：按文件名查找</li>\n<li>-maxdepth：指定查找深度，应作为第一个参数出现</li>\n<li>-size：指定大小<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find .&#x2F; -type &quot;l&quot;               # 查找软连接</span><br><span class=\"line\">find .&#x2F; -name &#39;*.jpg&#39;           # 查找当前目录及子目录下的jpg文件</span><br><span class=\"line\">find .&#x2F; -maxdepth 1 &#39;*.jpg&#39;     # 查找当前目录下的jpg文件</span><br><span class=\"line\">find .&#x2F; -size +200k -size -2M   # 查找200k~2M的jpg文件，注意是小写的k，大写的M</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>grep命令：找文件内容<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -r &#39;copy&#39; .&#x2F; -n</span><br><span class=\"line\">ps aux | grep cupsd</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"5-gcc编译\"><a href=\"#5-gcc编译\" class=\"headerlink\" title=\"5 gcc编译\"></a>5 gcc编译</h4><p>编译分为四个步骤：</p>\n<h5 id=\"5-1-预处理\"><a href=\"#5-1-预处理\" class=\"headerlink\" title=\"5.1 预处理\"></a>5.1 预处理</h5><p>任务：展开头文件，宏替换，替换条件编译，删除注释、空行和空格。<br>指令：<code>gcc -E file</code>。<br>生成文件：file.i  </p>\n<h5 id=\"5-2-编译\"><a href=\"#5-2-编译\" class=\"headerlink\" title=\"5.2 编译\"></a>5.2 编译</h5><p>任务：检查语法规范。<br>指令：<code>gcc -S file[.i]</code>。<br>生成文件：file.s</p>\n<h5 id=\"5-3-汇编\"><a href=\"#5-3-汇编\" class=\"headerlink\" title=\"5.3 汇编\"></a>5.3 汇编</h5><p>任务：将汇编指令翻译成机器指令。<br>指令：<code>gcc -c file[.s]</code>。<br>生成文件：file.o  </p>\n<h5 id=\"5-4-链接\"><a href=\"#5-4-链接\" class=\"headerlink\" title=\"5.4 链接\"></a>5.4 链接</h5><p>任务：数据段合并，地址回填。<br>指令：<code>gcc file[.o]</code>。<br>生成文件：file.out</p>\n<h5 id=\"5-5-其他常用参数\"><a href=\"#5-5-其他常用参数\" class=\"headerlink\" title=\"5.5 其他常用参数\"></a>5.5 其他常用参数</h5><ul>\n<li>-I：指定头文件所在目录位置。</li>\n<li>-g：添加调试语句，以便使用gdb调试</li>\n<li>-Wall：显示所有警告信息</li>\n<li>-D：向程序动态注册宏定义</li>\n</ul>\n<h4 id=\"6-静态库制作及使用\"><a href=\"#6-静态库制作及使用\" class=\"headerlink\" title=\"6 静态库制作及使用\"></a>6 静态库制作及使用</h4><h5 id=\"6-1-将-c生成-o文件\"><a href=\"#6-1-将-c生成-o文件\" class=\"headerlink\" title=\"6.1 将.c生成.o文件\"></a>6.1 将.c生成.o文件</h5><p>命令：<code>gcc -c a.c -o a.o</code></p>\n<h5 id=\"6-2-使用ar工具制作静态库\"><a href=\"#6-2-使用ar工具制作静态库\" class=\"headerlink\" title=\"6.2 使用ar工具制作静态库\"></a>6.2 使用ar工具制作静态库</h5><p>命令：<code>ar rcs lib[库名].a a.o</code></p>\n<h5 id=\"6-3-制作静态库的头文件\"><a href=\"#6-3-制作静态库的头文件\" class=\"headerlink\" title=\"6.3 制作静态库的头文件\"></a>6.3 制作静态库的头文件</h5><h5 id=\"6-4-编辑静态库到可执行文件\"><a href=\"#6-4-编辑静态库到可执行文件\" class=\"headerlink\" title=\"6.4 编辑静态库到可执行文件\"></a>6.4 编辑静态库到可执行文件</h5><p>命令：<code>gcc test.c lib[库名].a -o test</code></p>\n<h4 id=\"7-动态库的制作及使用\"><a href=\"#7-动态库的制作及使用\" class=\"headerlink\" title=\"7 动态库的制作及使用\"></a>7 动态库的制作及使用</h4><h5 id=\"7-1-将-c生成与位置无关的-o代码\"><a href=\"#7-1-将-c生成与位置无关的-o代码\" class=\"headerlink\" title=\"7.1 将.c生成与位置无关的.o代码\"></a>7.1 将.c生成与位置无关的.o代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c file.c -o file.o -fPIC</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-2-制作动态库\"><a href=\"#7-2-制作动态库\" class=\"headerlink\" title=\"7.2 制作动态库\"></a>7.2 制作动态库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -shared -o lib[库名].so file.o</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-3-编译时指定动态库\"><a href=\"#7-3-编译时指定动态库\" class=\"headerlink\" title=\"7.3 编译时指定动态库\"></a>7.3 编译时指定动态库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c -o test -l [库名] -L [库路径]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-4-配置动态链接库的路径\"><a href=\"#7-4-配置动态链接库的路径\" class=\"headerlink\" title=\"7.4 配置动态链接库的路径\"></a>7.4 配置动态链接库的路径</h5><ul>\n<li>直接在终端执行<code>export LD_LIBRARY_PATH=[库路径]</code></li>\n<li>修改终端配置文件<ul>\n<li>在终端配置文件.bashrc下添加<code>export LD_LIBRARY_PATH=[库路径]</code></li>\n<li>使配置文件生效： <code>. .bashrc</code> / <code>source .bashrc</code>  / 重启一个终端</li>\n</ul>\n</li>\n<li>拷贝库到系统库路径<code>/lib</code>下</li>\n<li>配置链接器<ul>\n<li>在链接器配置文件中添加动态链接库的绝对路径</li>\n<li>使配置文件生效：<code>sudo ldconfig -v</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8-dentry与inode\"><a href=\"#8-dentry与inode\" class=\"headerlink\" title=\"8 dentry与inode\"></a>8 dentry与inode</h4><p><strong>dentry（目录项）：</strong>结构体，存储的时文件名与inode。<br><strong>inode：</strong>结构体，存储的是文件的属性信息，以及文件在磁盘上的存储位置。</p>\n","site":{"data":{}},"length":1617,"excerpt":"","more":"<h4 id=\"1-Linux系统目录\"><a href=\"#1-Linux系统目录\" class=\"headerlink\" title=\"1 Linux系统目录\"></a>1 Linux系统目录</h4><ul>\n<li>bin：存放二进制可执行文件</li>\n<li>boot：存放开机启动程序</li>\n<li>dev：存放设备文件</li>\n<li>home：存放用户</li>\n<li>etc：存放信息和系统配置文件</li>\n<li>lib：库文件</li>\n<li>root：管理员宿主目录</li>\n<li>usr：用户资源管理目录</li>\n</ul>\n<h4 id=\"2-Linux系统文件类型\"><a href=\"#2-Linux系统文件类型\" class=\"headerlink\" title=\"2 Linux系统文件类型\"></a>2 Linux系统文件类型</h4><ul>\n<li>普通文件（-）</li>\n<li>目录文件（d）</li>\n<li>字符设备文件（c）</li>\n<li>块设备文件（b）</li>\n<li>软连接（l）</li>\n<li>管道文件（p）</li>\n<li>套接字（s）</li>\n<li>未知文件</li>\n</ul>\n<h4 id=\"3-常用命令\"><a href=\"#3-常用命令\" class=\"headerlink\" title=\"3 常用命令\"></a>3 常用命令</h4><ul>\n<li>ls：列出文件</li>\n<li>cd：切换目录</li>\n<li>which：查看命令路径</li>\n<li>pwd：查看当前路径</li>\n<li>mkdir：创建目录</li>\n<li>rmdir：删除空目录</li>\n<li>touch：创建文件</li>\n<li>rm：删除文件（-r删除目录）</li>\n</ul>\n<h4 id=\"4-文件命令\"><a href=\"#4-文件命令\" class=\"headerlink\" title=\"4 文件命令\"></a>4 文件命令</h4><ul>\n<li>chmod: 更改文件权限</li>\n</ul>\n<ul>\n<li>文字设定法：</li>\n<li>操作对象可以是： u表示用户， g表示同组用户，o表示其他用户，a表示所有用户  </li>\n<li>操作符号可以有： +添加权限，-取消权限，=赋予给定权限并取消其他所有权限</li>\n<li>操作权限可以是： r读，w写，x执行   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x file # 所有用户可执行</span><br></pre></td></tr></table></figure></li>\n<li>数字设定法：r是4，w是2，x是1   <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 764 file # 用户可读可写可执行，组用户可读可写，其他用户可读</span><br></pre></td></tr></table></figure></li>\n</ul>\n<ul>\n<li><p>chown：修改文件所属用户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod user file</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>find：查找文件</p>\n</li>\n</ul>\n<ul>\n<li>-type：按文件类型查找</li>\n<li>-name：按文件名查找</li>\n<li>-maxdepth：指定查找深度，应作为第一个参数出现</li>\n<li>-size：指定大小<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find .&#x2F; -type &quot;l&quot;               # 查找软连接</span><br><span class=\"line\">find .&#x2F; -name &#39;*.jpg&#39;           # 查找当前目录及子目录下的jpg文件</span><br><span class=\"line\">find .&#x2F; -maxdepth 1 &#39;*.jpg&#39;     # 查找当前目录下的jpg文件</span><br><span class=\"line\">find .&#x2F; -size +200k -size -2M   # 查找200k~2M的jpg文件，注意是小写的k，大写的M</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>grep命令：找文件内容<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -r &#39;copy&#39; .&#x2F; -n</span><br><span class=\"line\">ps aux | grep cupsd</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"5-gcc编译\"><a href=\"#5-gcc编译\" class=\"headerlink\" title=\"5 gcc编译\"></a>5 gcc编译</h4><p>编译分为四个步骤：</p>\n<h5 id=\"5-1-预处理\"><a href=\"#5-1-预处理\" class=\"headerlink\" title=\"5.1 预处理\"></a>5.1 预处理</h5><p>任务：展开头文件，宏替换，替换条件编译，删除注释、空行和空格。<br>指令：<code>gcc -E file</code>。<br>生成文件：file.i  </p>\n<h5 id=\"5-2-编译\"><a href=\"#5-2-编译\" class=\"headerlink\" title=\"5.2 编译\"></a>5.2 编译</h5><p>任务：检查语法规范。<br>指令：<code>gcc -S file[.i]</code>。<br>生成文件：file.s</p>\n<h5 id=\"5-3-汇编\"><a href=\"#5-3-汇编\" class=\"headerlink\" title=\"5.3 汇编\"></a>5.3 汇编</h5><p>任务：将汇编指令翻译成机器指令。<br>指令：<code>gcc -c file[.s]</code>。<br>生成文件：file.o  </p>\n<h5 id=\"5-4-链接\"><a href=\"#5-4-链接\" class=\"headerlink\" title=\"5.4 链接\"></a>5.4 链接</h5><p>任务：数据段合并，地址回填。<br>指令：<code>gcc file[.o]</code>。<br>生成文件：file.out</p>\n<h5 id=\"5-5-其他常用参数\"><a href=\"#5-5-其他常用参数\" class=\"headerlink\" title=\"5.5 其他常用参数\"></a>5.5 其他常用参数</h5><ul>\n<li>-I：指定头文件所在目录位置。</li>\n<li>-g：添加调试语句，以便使用gdb调试</li>\n<li>-Wall：显示所有警告信息</li>\n<li>-D：向程序动态注册宏定义</li>\n</ul>\n<h4 id=\"6-静态库制作及使用\"><a href=\"#6-静态库制作及使用\" class=\"headerlink\" title=\"6 静态库制作及使用\"></a>6 静态库制作及使用</h4><h5 id=\"6-1-将-c生成-o文件\"><a href=\"#6-1-将-c生成-o文件\" class=\"headerlink\" title=\"6.1 将.c生成.o文件\"></a>6.1 将.c生成.o文件</h5><p>命令：<code>gcc -c a.c -o a.o</code></p>\n<h5 id=\"6-2-使用ar工具制作静态库\"><a href=\"#6-2-使用ar工具制作静态库\" class=\"headerlink\" title=\"6.2 使用ar工具制作静态库\"></a>6.2 使用ar工具制作静态库</h5><p>命令：<code>ar rcs lib[库名].a a.o</code></p>\n<h5 id=\"6-3-制作静态库的头文件\"><a href=\"#6-3-制作静态库的头文件\" class=\"headerlink\" title=\"6.3 制作静态库的头文件\"></a>6.3 制作静态库的头文件</h5><h5 id=\"6-4-编辑静态库到可执行文件\"><a href=\"#6-4-编辑静态库到可执行文件\" class=\"headerlink\" title=\"6.4 编辑静态库到可执行文件\"></a>6.4 编辑静态库到可执行文件</h5><p>命令：<code>gcc test.c lib[库名].a -o test</code></p>\n<h4 id=\"7-动态库的制作及使用\"><a href=\"#7-动态库的制作及使用\" class=\"headerlink\" title=\"7 动态库的制作及使用\"></a>7 动态库的制作及使用</h4><h5 id=\"7-1-将-c生成与位置无关的-o代码\"><a href=\"#7-1-将-c生成与位置无关的-o代码\" class=\"headerlink\" title=\"7.1 将.c生成与位置无关的.o代码\"></a>7.1 将.c生成与位置无关的.o代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c file.c -o file.o -fPIC</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-2-制作动态库\"><a href=\"#7-2-制作动态库\" class=\"headerlink\" title=\"7.2 制作动态库\"></a>7.2 制作动态库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -shared -o lib[库名].so file.o</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-3-编译时指定动态库\"><a href=\"#7-3-编译时指定动态库\" class=\"headerlink\" title=\"7.3 编译时指定动态库\"></a>7.3 编译时指定动态库</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc test.c -o test -l [库名] -L [库路径]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"7-4-配置动态链接库的路径\"><a href=\"#7-4-配置动态链接库的路径\" class=\"headerlink\" title=\"7.4 配置动态链接库的路径\"></a>7.4 配置动态链接库的路径</h5><ul>\n<li>直接在终端执行<code>export LD_LIBRARY_PATH=[库路径]</code></li>\n<li>修改终端配置文件<ul>\n<li>在终端配置文件.bashrc下添加<code>export LD_LIBRARY_PATH=[库路径]</code></li>\n<li>使配置文件生效： <code>. .bashrc</code> / <code>source .bashrc</code>  / 重启一个终端</li>\n</ul>\n</li>\n<li>拷贝库到系统库路径<code>/lib</code>下</li>\n<li>配置链接器<ul>\n<li>在链接器配置文件中添加动态链接库的绝对路径</li>\n<li>使配置文件生效：<code>sudo ldconfig -v</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"8-dentry与inode\"><a href=\"#8-dentry与inode\" class=\"headerlink\" title=\"8 dentry与inode\"></a>8 dentry与inode</h4><p><strong>dentry（目录项）：</strong>结构体，存储的时文件名与inode。<br><strong>inode：</strong>结构体，存储的是文件的属性信息，以及文件在磁盘上的存储位置。</p>\n"},{"title":"Git常用命令","date":"2019-12-26T05:11:58.000Z","_content":"\n#### 1 初始化本地仓库\n```\ngit init\n```\n\n#### 2 向本地仓库添加文件\n```\ngit add a.txt       % 添加a.txt\ngit add *           % 添加所有文件\n```\n\n#### 3 从本地仓库删除文件\n```\ngit rm a.txt        % 删除a.txt\ngit rm -r dir       % 删除目录dir\n```\n\n#### 4 向本地仓库提交修改\n```\ngit commit -m \"comment\"\n```\n\n\n#### 5 查看本地仓库状态\n```\ngit status\n```\n\n#### 6 查看日志\n```\ngit log --pretty=oneline\n```\n\n#### 7 添加远程仓库\n```\ngit remote add origin git@github.com:XXX/xxx.git\n```\n\n#### 8 克隆仓库\n```\ngit clone git@github.com:XXX/xxx.git\n```\n也可以指定克隆某个分支：\n```\ngit clone -b <分支名> git@github.com:XXX/xxx.git\n```\n\n#### 9 向远程仓库提交\n```\ngit push -u origin master\n```\n\n#### 10 从远程仓库同步\n``` \ngit pull <远程主机名> <远程分支名>:<本地分支名>\n```\n例如，要取回origin主机的code分支，与本地的master分支合并：\n```\ngit pull origin code:master\n```\n或者，远程分支code与当前分支合并，可以是：\n```\ngit pull origin code\n```\n或者也可以先把本地仓库远程分支更新为远程仓库对应分支（只下载）：\n```\ngit fetch\n```\n再进行合并：\n```\ngit merge orgin master\n```","source":"_posts/Git常用命令.md","raw":"---\ntitle: Git常用命令\ndate: 2019-12-26 13:11:58\ntags:\n    - git\ncategories: \n---\n\n#### 1 初始化本地仓库\n```\ngit init\n```\n\n#### 2 向本地仓库添加文件\n```\ngit add a.txt       % 添加a.txt\ngit add *           % 添加所有文件\n```\n\n#### 3 从本地仓库删除文件\n```\ngit rm a.txt        % 删除a.txt\ngit rm -r dir       % 删除目录dir\n```\n\n#### 4 向本地仓库提交修改\n```\ngit commit -m \"comment\"\n```\n\n\n#### 5 查看本地仓库状态\n```\ngit status\n```\n\n#### 6 查看日志\n```\ngit log --pretty=oneline\n```\n\n#### 7 添加远程仓库\n```\ngit remote add origin git@github.com:XXX/xxx.git\n```\n\n#### 8 克隆仓库\n```\ngit clone git@github.com:XXX/xxx.git\n```\n也可以指定克隆某个分支：\n```\ngit clone -b <分支名> git@github.com:XXX/xxx.git\n```\n\n#### 9 向远程仓库提交\n```\ngit push -u origin master\n```\n\n#### 10 从远程仓库同步\n``` \ngit pull <远程主机名> <远程分支名>:<本地分支名>\n```\n例如，要取回origin主机的code分支，与本地的master分支合并：\n```\ngit pull origin code:master\n```\n或者，远程分支code与当前分支合并，可以是：\n```\ngit pull origin code\n```\n或者也可以先把本地仓库远程分支更新为远程仓库对应分支（只下载）：\n```\ngit fetch\n```\n再进行合并：\n```\ngit merge orgin master\n```","slug":"Git常用命令","published":1,"updated":"2020-08-23T13:24:16.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq7500069s727mb0h6wb","content":"<h4 id=\"1-初始化本地仓库\"><a href=\"#1-初始化本地仓库\" class=\"headerlink\" title=\"1 初始化本地仓库\"></a>1 初始化本地仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-向本地仓库添加文件\"><a href=\"#2-向本地仓库添加文件\" class=\"headerlink\" title=\"2 向本地仓库添加文件\"></a>2 向本地仓库添加文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add a.txt       % 添加a.txt</span><br><span class=\"line\">git add *           % 添加所有文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-从本地仓库删除文件\"><a href=\"#3-从本地仓库删除文件\" class=\"headerlink\" title=\"3 从本地仓库删除文件\"></a>3 从本地仓库删除文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm a.txt        % 删除a.txt</span><br><span class=\"line\">git rm -r dir       % 删除目录dir</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-向本地仓库提交修改\"><a href=\"#4-向本地仓库提交修改\" class=\"headerlink\" title=\"4 向本地仓库提交修改\"></a>4 向本地仓库提交修改</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;comment&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"5-查看本地仓库状态\"><a href=\"#5-查看本地仓库状态\" class=\"headerlink\" title=\"5 查看本地仓库状态\"></a>5 查看本地仓库状态</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-查看日志\"><a href=\"#6-查看日志\" class=\"headerlink\" title=\"6 查看日志\"></a>6 查看日志</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty&#x3D;oneline</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-添加远程仓库\"><a href=\"#7-添加远程仓库\" class=\"headerlink\" title=\"7 添加远程仓库\"></a>7 添加远程仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:XXX&#x2F;xxx.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-克隆仓库\"><a href=\"#8-克隆仓库\" class=\"headerlink\" title=\"8 克隆仓库\"></a>8 克隆仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:XXX&#x2F;xxx.git</span><br></pre></td></tr></table></figure>\n<p>也可以指定克隆某个分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b &lt;分支名&gt; git@github.com:XXX&#x2F;xxx.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-向远程仓库提交\"><a href=\"#9-向远程仓库提交\" class=\"headerlink\" title=\"9 向远程仓库提交\"></a>9 向远程仓库提交</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-从远程仓库同步\"><a href=\"#10-从远程仓库同步\" class=\"headerlink\" title=\"10 从远程仓库同步\"></a>10 从远程仓库同步</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n<p>例如，要取回origin主机的code分支，与本地的master分支合并：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin code:master</span><br></pre></td></tr></table></figure>\n<p>或者，远程分支code与当前分支合并，可以是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin code</span><br></pre></td></tr></table></figure>\n<p>或者也可以先把本地仓库远程分支更新为远程仓库对应分支（只下载）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch</span><br></pre></td></tr></table></figure>\n<p>再进行合并：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge orgin master</span><br></pre></td></tr></table></figure>","site":{"data":{}},"length":626,"excerpt":"","more":"<h4 id=\"1-初始化本地仓库\"><a href=\"#1-初始化本地仓库\" class=\"headerlink\" title=\"1 初始化本地仓库\"></a>1 初始化本地仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-向本地仓库添加文件\"><a href=\"#2-向本地仓库添加文件\" class=\"headerlink\" title=\"2 向本地仓库添加文件\"></a>2 向本地仓库添加文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add a.txt       % 添加a.txt</span><br><span class=\"line\">git add *           % 添加所有文件</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-从本地仓库删除文件\"><a href=\"#3-从本地仓库删除文件\" class=\"headerlink\" title=\"3 从本地仓库删除文件\"></a>3 从本地仓库删除文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rm a.txt        % 删除a.txt</span><br><span class=\"line\">git rm -r dir       % 删除目录dir</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-向本地仓库提交修改\"><a href=\"#4-向本地仓库提交修改\" class=\"headerlink\" title=\"4 向本地仓库提交修改\"></a>4 向本地仓库提交修改</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;comment&quot;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"5-查看本地仓库状态\"><a href=\"#5-查看本地仓库状态\" class=\"headerlink\" title=\"5 查看本地仓库状态\"></a>5 查看本地仓库状态</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-查看日志\"><a href=\"#6-查看日志\" class=\"headerlink\" title=\"6 查看日志\"></a>6 查看日志</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --pretty&#x3D;oneline</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-添加远程仓库\"><a href=\"#7-添加远程仓库\" class=\"headerlink\" title=\"7 添加远程仓库\"></a>7 添加远程仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:XXX&#x2F;xxx.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-克隆仓库\"><a href=\"#8-克隆仓库\" class=\"headerlink\" title=\"8 克隆仓库\"></a>8 克隆仓库</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:XXX&#x2F;xxx.git</span><br></pre></td></tr></table></figure>\n<p>也可以指定克隆某个分支：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b &lt;分支名&gt; git@github.com:XXX&#x2F;xxx.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-向远程仓库提交\"><a href=\"#9-向远程仓库提交\" class=\"headerlink\" title=\"9 向远程仓库提交\"></a>9 向远程仓库提交</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-从远程仓库同步\"><a href=\"#10-从远程仓库同步\" class=\"headerlink\" title=\"10 从远程仓库同步\"></a>10 从远程仓库同步</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n<p>例如，要取回origin主机的code分支，与本地的master分支合并：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin code:master</span><br></pre></td></tr></table></figure>\n<p>或者，远程分支code与当前分支合并，可以是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin code</span><br></pre></td></tr></table></figure>\n<p>或者也可以先把本地仓库远程分支更新为远程仓库对应分支（只下载）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch</span><br></pre></td></tr></table></figure>\n<p>再进行合并：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge orgin master</span><br></pre></td></tr></table></figure>"},{"title":"gdb调试工具","date":"2019-12-29T06:10:28.000Z","_content":"\n#### gdb调试工具\n##### 基础指令\n+ list(l)：列出源码。例如，从第一行开始列出源码：`list 1`\n+ b：插入断点。例如，在20行插入断点：`b 20`\n+ n：下一条指令（不进入函数）\n+ s：下一条指令（进入函数）\n+ p：查看变量的值\n+ continue：继续执行断点后的代码（直至遇到下一个断点或程序结束）\n+ quit：退出调试\n\n##### 其他指令\n+ run：运行代码（遇到段错误等会停下来并报告行号）\n+ finish：结束当前的函数调用\n+ set：设置参数（可用来设置main函数的参数等）\n+ info b：查看断点信息表\n+ b nRow if condtion：插入条件断点，当条件满足时代码会停下\n+ ptype：查看变量类型\n+ bt：查看当前程序存活的栈帧\n+ frame：根据栈帧的编号切换函数栈帧\n+ display：设置跟踪变量\n+ undispaly：取消跟踪变量","source":"_posts/gdb调试工具.md","raw":"---\ntitle: gdb调试工具\ndate: 2019-12-29 14:10:28\ntags:\n    - linux\n    - gdb\ncategories: linux\n---\n\n#### gdb调试工具\n##### 基础指令\n+ list(l)：列出源码。例如，从第一行开始列出源码：`list 1`\n+ b：插入断点。例如，在20行插入断点：`b 20`\n+ n：下一条指令（不进入函数）\n+ s：下一条指令（进入函数）\n+ p：查看变量的值\n+ continue：继续执行断点后的代码（直至遇到下一个断点或程序结束）\n+ quit：退出调试\n\n##### 其他指令\n+ run：运行代码（遇到段错误等会停下来并报告行号）\n+ finish：结束当前的函数调用\n+ set：设置参数（可用来设置main函数的参数等）\n+ info b：查看断点信息表\n+ b nRow if condtion：插入条件断点，当条件满足时代码会停下\n+ ptype：查看变量类型\n+ bt：查看当前程序存活的栈帧\n+ frame：根据栈帧的编号切换函数栈帧\n+ display：设置跟踪变量\n+ undispaly：取消跟踪变量","slug":"gdb调试工具","published":1,"updated":"2020-08-23T13:24:16.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq7a00079s7248fqe1ty","content":"<h4 id=\"gdb调试工具\"><a href=\"#gdb调试工具\" class=\"headerlink\" title=\"gdb调试工具\"></a>gdb调试工具</h4><h5 id=\"基础指令\"><a href=\"#基础指令\" class=\"headerlink\" title=\"基础指令\"></a>基础指令</h5><ul>\n<li>list(l)：列出源码。例如，从第一行开始列出源码：<code>list 1</code></li>\n<li>b：插入断点。例如，在20行插入断点：<code>b 20</code></li>\n<li>n：下一条指令（不进入函数）</li>\n<li>s：下一条指令（进入函数）</li>\n<li>p：查看变量的值</li>\n<li>continue：继续执行断点后的代码（直至遇到下一个断点或程序结束）</li>\n<li>quit：退出调试</li>\n</ul>\n<h5 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h5><ul>\n<li>run：运行代码（遇到段错误等会停下来并报告行号）</li>\n<li>finish：结束当前的函数调用</li>\n<li>set：设置参数（可用来设置main函数的参数等）</li>\n<li>info b：查看断点信息表</li>\n<li>b nRow if condtion：插入条件断点，当条件满足时代码会停下</li>\n<li>ptype：查看变量类型</li>\n<li>bt：查看当前程序存活的栈帧</li>\n<li>frame：根据栈帧的编号切换函数栈帧</li>\n<li>display：设置跟踪变量</li>\n<li>undispaly：取消跟踪变量</li>\n</ul>\n","site":{"data":{}},"length":336,"excerpt":"","more":"<h4 id=\"gdb调试工具\"><a href=\"#gdb调试工具\" class=\"headerlink\" title=\"gdb调试工具\"></a>gdb调试工具</h4><h5 id=\"基础指令\"><a href=\"#基础指令\" class=\"headerlink\" title=\"基础指令\"></a>基础指令</h5><ul>\n<li>list(l)：列出源码。例如，从第一行开始列出源码：<code>list 1</code></li>\n<li>b：插入断点。例如，在20行插入断点：<code>b 20</code></li>\n<li>n：下一条指令（不进入函数）</li>\n<li>s：下一条指令（进入函数）</li>\n<li>p：查看变量的值</li>\n<li>continue：继续执行断点后的代码（直至遇到下一个断点或程序结束）</li>\n<li>quit：退出调试</li>\n</ul>\n<h5 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h5><ul>\n<li>run：运行代码（遇到段错误等会停下来并报告行号）</li>\n<li>finish：结束当前的函数调用</li>\n<li>set：设置参数（可用来设置main函数的参数等）</li>\n<li>info b：查看断点信息表</li>\n<li>b nRow if condtion：插入条件断点，当条件满足时代码会停下</li>\n<li>ptype：查看变量类型</li>\n<li>bt：查看当前程序存活的栈帧</li>\n<li>frame：根据栈帧的编号切换函数栈帧</li>\n<li>display：设置跟踪变量</li>\n<li>undispaly：取消跟踪变量</li>\n</ul>\n"},{"title":"论文笔记：Backstepping with bounded feedbacks","date":"2020-01-05T14:27:07.000Z","mathjax":true,"_content":"\n### 1 简介\n#### 1.1 研究意义\n>  \"saturation is probably the most commonly encountered nonlinearity in control engineering\"\n\n#### 1.2 贡献\n> Interestingly enough even when applied to these systems, the technique of control design\nof the present work does not coincide with the forwarding approach: for instance, it does not require the determination of the decoupling changes of coordinates used in [8,7] or of the cross terms used in [3], which is an important advantage because in many cases these changes of coordinates or these cross-terms frequently lead to complicated calculations or cannot even be determined due to parameters inaccurately known or the fact that ˙x = f(x; 0) is nonlinear.\n\n#### 1.3 研究对象\n此文考虑的系统为\n$$\\dot x = f(x,z), \\quad \\dot z = u + h(x,z)$$\n其中，$u \\in R$是输入，$x \\in R^{n_x}, f(0, 0) = 0,h(0,0) = 0$.\n\n### 2 预备知识\n#### 2.1 Lyapunov函数\n定义在$R^n$上的正定函数$V(\\cdot)$是系统\n$$\\dot x = \\phi(x), \\quad \\phi(0) = 0$$\n的Lyapunov函数  \n+ 如果有$\\frac{\\partial V}{\\partial x}\\phi(x) \\le 0, \\quad \\forall x.$\n+ 如果还有$\\frac{\\partial V}{\\partial x}\\phi(x) < 0, \\quad \\forall x \\ne 0$，则称为严格Lyapunov函数.\n\n#### 2.2 $\\mathcal{K}_\\infty$函数\n实值函数$k(\\cdot)$是$\\mathcal{K}_\\infty$函数，当它满足\n+ $k(0) = 0$\n+ 严格增\n+ 当自变量趋于无穷时，函数值也趋于无穷\n\n#### 2.3 饱和函数\n实值函数$\\sigma(\\cdot)$是饱和函数，当它满足\n+ $\\sigma(s)$时非减的\n+ $\\sigma(s) = \\text{sign}(s)\\sigma_M$当$|s|\\ge 1$，且$\\sigma_M \\in [\\frac{1}{2}, 1]$\n+ $\\sigma(s) = s$当$|s|\\le \\frac{1}{2}$\n\n### 3 主要结论\n#### 3.1 没有严格Lyapunov函数时的有界反步法\n**假设H1:** 函数$V(\\cdot)$正定、径向无界、二阶可导的，函数$W(\\cdot)$非负、一阶可导的，控制律$z_s(s)$二阶可导、范数有界（界为B）并满足$z_s(0) = 0$，使得  \n$$W(x) \\le -\\frac{\\partial V}{\\partial x}(x)f(x, z_x(x)).$$\n更进一步，系统的解$x(t) = 0$是唯一满足对于所有的$t$，有\n$$\\dot x(t) = f(x(t), z_s(x(t)),\\quad W(x(t)) = 0.$$\n\n**假设H2:** 存在两个定义在$[0, +\\infty)$非减、非负的函数$\\Gamma_1(\\cdot)$与$\\Gamma_2(\\cdot)$，使得\n$$|T(x, z)| \\le \\Gamma_1(|z|),$$\n$$| \\frac{\\partial z_s}{\\partial x}(x)f(x, z) | \\le \\Gamma_2(|z|)$$\n其中，\n$$T(x, z) = \\frac{(\\partial V / \\partial x)(x)[f(x, z) - f(x, z_s(x))]}{z - z_s(x)}.$$\n\n\n**假设H3：**函数$h(x, z)$以常数$H_M$为范数界.\n\n**定理1：**假设系统满足假设H1-H3. 则可以构造一个二阶可导的$\\mathcal{K}_\\infty$函数$\\Omega(\\cdot)$，当系统以控制律\n$$u_s(x,z) = -h(x, z) + \\frac{1}{\\Omega ^{\\prime}(z)}\\left \\[-\\frac{(z - z_s(x))(\\rho(z-z_s(x)) + T(x, z))}{\\Omega(z) - \\Omega(z_s(x))} + \\frac{\\partial z_s}{\\partial x}(s)f(x, z)\\right \\]$$\n闭环，则正定、径向无界的函数\n$$U(x, z) = V(x) + \\frac{1}{2}[\\Omega(z) - z_s(x)]^2$$\n沿系统轨迹的导数是非正定（半负定）的；如果$W(x)$是正定的，则$U(x, z)$的导数是负定的. 更确切地说，系统以范数有界的控制律$u_s(x, z)$闭环后是全局渐近稳定的. 上式中，$\\rho(\\cdot)$是一阶可导的有界函数，$s\\rho(s)$是正定的. \n\n#### 3.2 有严格Lyapunov函数时的有界反步法","source":"_posts/feedbacks.md","raw":"---\ntitle: 论文笔记：Backstepping with bounded feedbacks\ndate: 2020-01-05 22:27:07\ntags: \n    - nonlinear control\ncategories: 读书笔记\nmathjax: true\n---\n\n### 1 简介\n#### 1.1 研究意义\n>  \"saturation is probably the most commonly encountered nonlinearity in control engineering\"\n\n#### 1.2 贡献\n> Interestingly enough even when applied to these systems, the technique of control design\nof the present work does not coincide with the forwarding approach: for instance, it does not require the determination of the decoupling changes of coordinates used in [8,7] or of the cross terms used in [3], which is an important advantage because in many cases these changes of coordinates or these cross-terms frequently lead to complicated calculations or cannot even be determined due to parameters inaccurately known or the fact that ˙x = f(x; 0) is nonlinear.\n\n#### 1.3 研究对象\n此文考虑的系统为\n$$\\dot x = f(x,z), \\quad \\dot z = u + h(x,z)$$\n其中，$u \\in R$是输入，$x \\in R^{n_x}, f(0, 0) = 0,h(0,0) = 0$.\n\n### 2 预备知识\n#### 2.1 Lyapunov函数\n定义在$R^n$上的正定函数$V(\\cdot)$是系统\n$$\\dot x = \\phi(x), \\quad \\phi(0) = 0$$\n的Lyapunov函数  \n+ 如果有$\\frac{\\partial V}{\\partial x}\\phi(x) \\le 0, \\quad \\forall x.$\n+ 如果还有$\\frac{\\partial V}{\\partial x}\\phi(x) < 0, \\quad \\forall x \\ne 0$，则称为严格Lyapunov函数.\n\n#### 2.2 $\\mathcal{K}_\\infty$函数\n实值函数$k(\\cdot)$是$\\mathcal{K}_\\infty$函数，当它满足\n+ $k(0) = 0$\n+ 严格增\n+ 当自变量趋于无穷时，函数值也趋于无穷\n\n#### 2.3 饱和函数\n实值函数$\\sigma(\\cdot)$是饱和函数，当它满足\n+ $\\sigma(s)$时非减的\n+ $\\sigma(s) = \\text{sign}(s)\\sigma_M$当$|s|\\ge 1$，且$\\sigma_M \\in [\\frac{1}{2}, 1]$\n+ $\\sigma(s) = s$当$|s|\\le \\frac{1}{2}$\n\n### 3 主要结论\n#### 3.1 没有严格Lyapunov函数时的有界反步法\n**假设H1:** 函数$V(\\cdot)$正定、径向无界、二阶可导的，函数$W(\\cdot)$非负、一阶可导的，控制律$z_s(s)$二阶可导、范数有界（界为B）并满足$z_s(0) = 0$，使得  \n$$W(x) \\le -\\frac{\\partial V}{\\partial x}(x)f(x, z_x(x)).$$\n更进一步，系统的解$x(t) = 0$是唯一满足对于所有的$t$，有\n$$\\dot x(t) = f(x(t), z_s(x(t)),\\quad W(x(t)) = 0.$$\n\n**假设H2:** 存在两个定义在$[0, +\\infty)$非减、非负的函数$\\Gamma_1(\\cdot)$与$\\Gamma_2(\\cdot)$，使得\n$$|T(x, z)| \\le \\Gamma_1(|z|),$$\n$$| \\frac{\\partial z_s}{\\partial x}(x)f(x, z) | \\le \\Gamma_2(|z|)$$\n其中，\n$$T(x, z) = \\frac{(\\partial V / \\partial x)(x)[f(x, z) - f(x, z_s(x))]}{z - z_s(x)}.$$\n\n\n**假设H3：**函数$h(x, z)$以常数$H_M$为范数界.\n\n**定理1：**假设系统满足假设H1-H3. 则可以构造一个二阶可导的$\\mathcal{K}_\\infty$函数$\\Omega(\\cdot)$，当系统以控制律\n$$u_s(x,z) = -h(x, z) + \\frac{1}{\\Omega ^{\\prime}(z)}\\left \\[-\\frac{(z - z_s(x))(\\rho(z-z_s(x)) + T(x, z))}{\\Omega(z) - \\Omega(z_s(x))} + \\frac{\\partial z_s}{\\partial x}(s)f(x, z)\\right \\]$$\n闭环，则正定、径向无界的函数\n$$U(x, z) = V(x) + \\frac{1}{2}[\\Omega(z) - z_s(x)]^2$$\n沿系统轨迹的导数是非正定（半负定）的；如果$W(x)$是正定的，则$U(x, z)$的导数是负定的. 更确切地说，系统以范数有界的控制律$u_s(x, z)$闭环后是全局渐近稳定的. 上式中，$\\rho(\\cdot)$是一阶可导的有界函数，$s\\rho(s)$是正定的. \n\n#### 3.2 有严格Lyapunov函数时的有界反步法","slug":"feedbacks","published":1,"updated":"2020-08-23T13:24:16.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq7d00099s725cek1v73","content":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1 简介\"></a>1 简介</h3><h4 id=\"1-1-研究意义\"><a href=\"#1-1-研究意义\" class=\"headerlink\" title=\"1.1 研究意义\"></a>1.1 研究意义</h4><blockquote>\n<p> “saturation is probably the most commonly encountered nonlinearity in control engineering”</p>\n</blockquote>\n<h4 id=\"1-2-贡献\"><a href=\"#1-2-贡献\" class=\"headerlink\" title=\"1.2 贡献\"></a>1.2 贡献</h4><blockquote>\n<p>Interestingly enough even when applied to these systems, the technique of control design<br>of the present work does not coincide with the forwarding approach: for instance, it does not require the determination of the decoupling changes of coordinates used in [8,7] or of the cross terms used in [3], which is an important advantage because in many cases these changes of coordinates or these cross-terms frequently lead to complicated calculations or cannot even be determined due to parameters inaccurately known or the fact that ˙x = f(x; 0) is nonlinear.</p>\n</blockquote>\n<h4 id=\"1-3-研究对象\"><a href=\"#1-3-研究对象\" class=\"headerlink\" title=\"1.3 研究对象\"></a>1.3 研究对象</h4><p>此文考虑的系统为<br>$$\\dot x = f(x,z), \\quad \\dot z = u + h(x,z)$$<br>其中，$u \\in R$是输入，$x \\in R^{n_x}, f(0, 0) = 0,h(0,0) = 0$.</p>\n<h3 id=\"2-预备知识\"><a href=\"#2-预备知识\" class=\"headerlink\" title=\"2 预备知识\"></a>2 预备知识</h3><h4 id=\"2-1-Lyapunov函数\"><a href=\"#2-1-Lyapunov函数\" class=\"headerlink\" title=\"2.1 Lyapunov函数\"></a>2.1 Lyapunov函数</h4><p>定义在$R^n$上的正定函数$V(\\cdot)$是系统<br>$$\\dot x = \\phi(x), \\quad \\phi(0) = 0$$<br>的Lyapunov函数  </p>\n<ul>\n<li>如果有$\\frac{\\partial V}{\\partial x}\\phi(x) \\le 0, \\quad \\forall x.$</li>\n<li>如果还有$\\frac{\\partial V}{\\partial x}\\phi(x) &lt; 0, \\quad \\forall x \\ne 0$，则称为严格Lyapunov函数.</li>\n</ul>\n<h4 id=\"2-2-mathcal-K-infty-函数\"><a href=\"#2-2-mathcal-K-infty-函数\" class=\"headerlink\" title=\"2.2 $\\mathcal{K}_\\infty$函数\"></a>2.2 $\\mathcal{K}_\\infty$函数</h4><p>实值函数$k(\\cdot)$是$\\mathcal{K}_\\infty$函数，当它满足</p>\n<ul>\n<li>$k(0) = 0$</li>\n<li>严格增</li>\n<li>当自变量趋于无穷时，函数值也趋于无穷</li>\n</ul>\n<h4 id=\"2-3-饱和函数\"><a href=\"#2-3-饱和函数\" class=\"headerlink\" title=\"2.3 饱和函数\"></a>2.3 饱和函数</h4><p>实值函数$\\sigma(\\cdot)$是饱和函数，当它满足</p>\n<ul>\n<li>$\\sigma(s)$时非减的</li>\n<li>$\\sigma(s) = \\text{sign}(s)\\sigma_M$当$|s|\\ge 1$，且$\\sigma_M \\in [\\frac{1}{2}, 1]$</li>\n<li>$\\sigma(s) = s$当$|s|\\le \\frac{1}{2}$</li>\n</ul>\n<h3 id=\"3-主要结论\"><a href=\"#3-主要结论\" class=\"headerlink\" title=\"3 主要结论\"></a>3 主要结论</h3><h4 id=\"3-1-没有严格Lyapunov函数时的有界反步法\"><a href=\"#3-1-没有严格Lyapunov函数时的有界反步法\" class=\"headerlink\" title=\"3.1 没有严格Lyapunov函数时的有界反步法\"></a>3.1 没有严格Lyapunov函数时的有界反步法</h4><p><strong>假设H1:</strong> 函数$V(\\cdot)$正定、径向无界、二阶可导的，函数$W(\\cdot)$非负、一阶可导的，控制律$z_s(s)$二阶可导、范数有界（界为B）并满足$z_s(0) = 0$，使得<br>$$W(x) \\le -\\frac{\\partial V}{\\partial x}(x)f(x, z_x(x)).$$<br>更进一步，系统的解$x(t) = 0$是唯一满足对于所有的$t$，有<br>$$\\dot x(t) = f(x(t), z_s(x(t)),\\quad W(x(t)) = 0.$$</p>\n<p><strong>假设H2:</strong> 存在两个定义在$[0, +\\infty)$非减、非负的函数$\\Gamma_1(\\cdot)$与$\\Gamma_2(\\cdot)$，使得<br>$$|T(x, z)| \\le \\Gamma_1(|z|),$$<br>$$| \\frac{\\partial z_s}{\\partial x}(x)f(x, z) | \\le \\Gamma_2(|z|)$$<br>其中，<br>$$T(x, z) = \\frac{(\\partial V / \\partial x)(x)[f(x, z) - f(x, z_s(x))]}{z - z_s(x)}.$$</p>\n<p><strong>假设H3：</strong>函数$h(x, z)$以常数$H_M$为范数界.</p>\n<p><strong>定理1：</strong>假设系统满足假设H1-H3. 则可以构造一个二阶可导的$\\mathcal{K}_\\infty$函数$\\Omega(\\cdot)$，当系统以控制律<br>$$u_s(x,z) = -h(x, z) + \\frac{1}{\\Omega ^{\\prime}(z)}\\left [-\\frac{(z - z_s(x))(\\rho(z-z_s(x)) + T(x, z))}{\\Omega(z) - \\Omega(z_s(x))} + \\frac{\\partial z_s}{\\partial x}(s)f(x, z)\\right ]$$<br>闭环，则正定、径向无界的函数<br>$$U(x, z) = V(x) + \\frac{1}{2}[\\Omega(z) - z_s(x)]^2$$<br>沿系统轨迹的导数是非正定（半负定）的；如果$W(x)$是正定的，则$U(x, z)$的导数是负定的. 更确切地说，系统以范数有界的控制律$u_s(x, z)$闭环后是全局渐近稳定的. 上式中，$\\rho(\\cdot)$是一阶可导的有界函数，$s\\rho(s)$是正定的. </p>\n<h4 id=\"3-2-有严格Lyapunov函数时的有界反步法\"><a href=\"#3-2-有严格Lyapunov函数时的有界反步法\" class=\"headerlink\" title=\"3.2 有严格Lyapunov函数时的有界反步法\"></a>3.2 有严格Lyapunov函数时的有界反步法</h4>","site":{"data":{}},"length":2114,"excerpt":"","more":"<h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1 简介\"></a>1 简介</h3><h4 id=\"1-1-研究意义\"><a href=\"#1-1-研究意义\" class=\"headerlink\" title=\"1.1 研究意义\"></a>1.1 研究意义</h4><blockquote>\n<p> “saturation is probably the most commonly encountered nonlinearity in control engineering”</p>\n</blockquote>\n<h4 id=\"1-2-贡献\"><a href=\"#1-2-贡献\" class=\"headerlink\" title=\"1.2 贡献\"></a>1.2 贡献</h4><blockquote>\n<p>Interestingly enough even when applied to these systems, the technique of control design<br>of the present work does not coincide with the forwarding approach: for instance, it does not require the determination of the decoupling changes of coordinates used in [8,7] or of the cross terms used in [3], which is an important advantage because in many cases these changes of coordinates or these cross-terms frequently lead to complicated calculations or cannot even be determined due to parameters inaccurately known or the fact that ˙x = f(x; 0) is nonlinear.</p>\n</blockquote>\n<h4 id=\"1-3-研究对象\"><a href=\"#1-3-研究对象\" class=\"headerlink\" title=\"1.3 研究对象\"></a>1.3 研究对象</h4><p>此文考虑的系统为<br>$$\\dot x = f(x,z), \\quad \\dot z = u + h(x,z)$$<br>其中，$u \\in R$是输入，$x \\in R^{n_x}, f(0, 0) = 0,h(0,0) = 0$.</p>\n<h3 id=\"2-预备知识\"><a href=\"#2-预备知识\" class=\"headerlink\" title=\"2 预备知识\"></a>2 预备知识</h3><h4 id=\"2-1-Lyapunov函数\"><a href=\"#2-1-Lyapunov函数\" class=\"headerlink\" title=\"2.1 Lyapunov函数\"></a>2.1 Lyapunov函数</h4><p>定义在$R^n$上的正定函数$V(\\cdot)$是系统<br>$$\\dot x = \\phi(x), \\quad \\phi(0) = 0$$<br>的Lyapunov函数  </p>\n<ul>\n<li>如果有$\\frac{\\partial V}{\\partial x}\\phi(x) \\le 0, \\quad \\forall x.$</li>\n<li>如果还有$\\frac{\\partial V}{\\partial x}\\phi(x) &lt; 0, \\quad \\forall x \\ne 0$，则称为严格Lyapunov函数.</li>\n</ul>\n<h4 id=\"2-2-mathcal-K-infty-函数\"><a href=\"#2-2-mathcal-K-infty-函数\" class=\"headerlink\" title=\"2.2 $\\mathcal{K}_\\infty$函数\"></a>2.2 $\\mathcal{K}_\\infty$函数</h4><p>实值函数$k(\\cdot)$是$\\mathcal{K}_\\infty$函数，当它满足</p>\n<ul>\n<li>$k(0) = 0$</li>\n<li>严格增</li>\n<li>当自变量趋于无穷时，函数值也趋于无穷</li>\n</ul>\n<h4 id=\"2-3-饱和函数\"><a href=\"#2-3-饱和函数\" class=\"headerlink\" title=\"2.3 饱和函数\"></a>2.3 饱和函数</h4><p>实值函数$\\sigma(\\cdot)$是饱和函数，当它满足</p>\n<ul>\n<li>$\\sigma(s)$时非减的</li>\n<li>$\\sigma(s) = \\text{sign}(s)\\sigma_M$当$|s|\\ge 1$，且$\\sigma_M \\in [\\frac{1}{2}, 1]$</li>\n<li>$\\sigma(s) = s$当$|s|\\le \\frac{1}{2}$</li>\n</ul>\n<h3 id=\"3-主要结论\"><a href=\"#3-主要结论\" class=\"headerlink\" title=\"3 主要结论\"></a>3 主要结论</h3><h4 id=\"3-1-没有严格Lyapunov函数时的有界反步法\"><a href=\"#3-1-没有严格Lyapunov函数时的有界反步法\" class=\"headerlink\" title=\"3.1 没有严格Lyapunov函数时的有界反步法\"></a>3.1 没有严格Lyapunov函数时的有界反步法</h4><p><strong>假设H1:</strong> 函数$V(\\cdot)$正定、径向无界、二阶可导的，函数$W(\\cdot)$非负、一阶可导的，控制律$z_s(s)$二阶可导、范数有界（界为B）并满足$z_s(0) = 0$，使得<br>$$W(x) \\le -\\frac{\\partial V}{\\partial x}(x)f(x, z_x(x)).$$<br>更进一步，系统的解$x(t) = 0$是唯一满足对于所有的$t$，有<br>$$\\dot x(t) = f(x(t), z_s(x(t)),\\quad W(x(t)) = 0.$$</p>\n<p><strong>假设H2:</strong> 存在两个定义在$[0, +\\infty)$非减、非负的函数$\\Gamma_1(\\cdot)$与$\\Gamma_2(\\cdot)$，使得<br>$$|T(x, z)| \\le \\Gamma_1(|z|),$$<br>$$| \\frac{\\partial z_s}{\\partial x}(x)f(x, z) | \\le \\Gamma_2(|z|)$$<br>其中，<br>$$T(x, z) = \\frac{(\\partial V / \\partial x)(x)[f(x, z) - f(x, z_s(x))]}{z - z_s(x)}.$$</p>\n<p><strong>假设H3：</strong>函数$h(x, z)$以常数$H_M$为范数界.</p>\n<p><strong>定理1：</strong>假设系统满足假设H1-H3. 则可以构造一个二阶可导的$\\mathcal{K}_\\infty$函数$\\Omega(\\cdot)$，当系统以控制律<br>$$u_s(x,z) = -h(x, z) + \\frac{1}{\\Omega ^{\\prime}(z)}\\left [-\\frac{(z - z_s(x))(\\rho(z-z_s(x)) + T(x, z))}{\\Omega(z) - \\Omega(z_s(x))} + \\frac{\\partial z_s}{\\partial x}(s)f(x, z)\\right ]$$<br>闭环，则正定、径向无界的函数<br>$$U(x, z) = V(x) + \\frac{1}{2}[\\Omega(z) - z_s(x)]^2$$<br>沿系统轨迹的导数是非正定（半负定）的；如果$W(x)$是正定的，则$U(x, z)$的导数是负定的. 更确切地说，系统以范数有界的控制律$u_s(x, z)$闭环后是全局渐近稳定的. 上式中，$\\rho(\\cdot)$是一阶可导的有界函数，$s\\rho(s)$是正定的. </p>\n<h4 id=\"3-2-有严格Lyapunov函数时的有界反步法\"><a href=\"#3-2-有严格Lyapunov函数时的有界反步法\" class=\"headerlink\" title=\"3.2 有严格Lyapunov函数时的有界反步法\"></a>3.2 有严格Lyapunov函数时的有界反步法</h4>"},{"title":"Linux学习笔记之vim编辑器","date":"2019-12-21T10:33:26.000Z","_content":"\nvim是linux下非常强大的编译器，一旦熟练使用便爱不释手。\n这里记录我学习过程中常用的一些linux指令。\n\nvim有三种工作模式，分别是 **命令模式**、 **末行模式**和文本模式。\n这里主要记录命令模式和末行模式的一些快捷键。\n\n\n#### 1 移动光标\n- 左移：`h`\n- 下移：`j`\n- 上移：`k`\n- 右移：`l`\n- 跳转指定行： 命令模式下`nG`(n为行号) 、 末行模式下`:N`\n- 跳转行首： `gg`\n- 跳转行尾：`G`\n\n#### 2 快速插入\n* 插入光标前一个字符：`i` \n* 插入行首：`I` \n* 插入光标后一个字符：`a`\n* 插入行末：`A`\n* 向下新开一行，插入行首：`o`\n* 向上新开一行，插入行首：`O`\n* 删除光标字符后开始插入：`s`\n* 删除当前行后开始插入：`S`\n\n#### 3 删除\n* 删除光标字符：`x`\n* 删除光标至单词尾：`dw`\n* 删除光标至行尾：`D/d$`\n* 删除光标至行首：`d0`\n* 删除光标所在行：`dd`\n* 删除光标所在行及接下来的n-1行：`ndd`\n* 光标字符替换为指定字符c: 按`rc`\n* 删除指定区域：按V进入“视图模式”，通过hjkl选中区域，按d删除\n\n#### 4 复制粘贴\n* 复制：`yy`\n* 粘贴：p(向前)/P（向后）\n\n\n#### 5 查找和替换\n* 查找\n    - 查找文档是否存在某个内容：命令模式下按/，输入查找内容然后回车，按n检索下一个\n    - 查找文档的某个单词在其他地方出现的位置：将单词至于任意一个字符上按`*`（向后查找）或者`#`（向前查找）\n* 替换\n    - 单行替换：末行模式下， 输入`s /src_str/dst_str`\n    - 通篇替换：末行模式下， 输入`%s /src_str/dst_str/g`\n    - 指定行替换：末行模式下，输入`起始行号,结束行号s /src_str/dst_str/g`\n\n\n#### 6 其他功能\n* 撤销：`u`\n* 反撤销：`ctrl+r`\n* 跳转至定括号：`%`\n* 自动格式化程序：命令模式下`gg=G`\n* 横分屏：输入`:sp`后回车（分屏之间切换ctrl+ww）\n* 竖分屏：输入`:vsp`后回车\n* 查看某个函数的帮助文档（man手册）：光标移到函数的任意一个字符上按`3K`\n* 查看宏定义：将光标置于待查看宏上，输入`[d`查看宏定义\n* 在末行模式执行shell命令，`:![cmd]`","source":"_posts/Linux学习笔记之vim编辑器.md","raw":"---\ntitle: Linux学习笔记之vim编辑器\ndate: 2019-12-21 18:33:26\ntags:\n    - linux\n    - vim\ncategories: linux\n---\n\nvim是linux下非常强大的编译器，一旦熟练使用便爱不释手。\n这里记录我学习过程中常用的一些linux指令。\n\nvim有三种工作模式，分别是 **命令模式**、 **末行模式**和文本模式。\n这里主要记录命令模式和末行模式的一些快捷键。\n\n\n#### 1 移动光标\n- 左移：`h`\n- 下移：`j`\n- 上移：`k`\n- 右移：`l`\n- 跳转指定行： 命令模式下`nG`(n为行号) 、 末行模式下`:N`\n- 跳转行首： `gg`\n- 跳转行尾：`G`\n\n#### 2 快速插入\n* 插入光标前一个字符：`i` \n* 插入行首：`I` \n* 插入光标后一个字符：`a`\n* 插入行末：`A`\n* 向下新开一行，插入行首：`o`\n* 向上新开一行，插入行首：`O`\n* 删除光标字符后开始插入：`s`\n* 删除当前行后开始插入：`S`\n\n#### 3 删除\n* 删除光标字符：`x`\n* 删除光标至单词尾：`dw`\n* 删除光标至行尾：`D/d$`\n* 删除光标至行首：`d0`\n* 删除光标所在行：`dd`\n* 删除光标所在行及接下来的n-1行：`ndd`\n* 光标字符替换为指定字符c: 按`rc`\n* 删除指定区域：按V进入“视图模式”，通过hjkl选中区域，按d删除\n\n#### 4 复制粘贴\n* 复制：`yy`\n* 粘贴：p(向前)/P（向后）\n\n\n#### 5 查找和替换\n* 查找\n    - 查找文档是否存在某个内容：命令模式下按/，输入查找内容然后回车，按n检索下一个\n    - 查找文档的某个单词在其他地方出现的位置：将单词至于任意一个字符上按`*`（向后查找）或者`#`（向前查找）\n* 替换\n    - 单行替换：末行模式下， 输入`s /src_str/dst_str`\n    - 通篇替换：末行模式下， 输入`%s /src_str/dst_str/g`\n    - 指定行替换：末行模式下，输入`起始行号,结束行号s /src_str/dst_str/g`\n\n\n#### 6 其他功能\n* 撤销：`u`\n* 反撤销：`ctrl+r`\n* 跳转至定括号：`%`\n* 自动格式化程序：命令模式下`gg=G`\n* 横分屏：输入`:sp`后回车（分屏之间切换ctrl+ww）\n* 竖分屏：输入`:vsp`后回车\n* 查看某个函数的帮助文档（man手册）：光标移到函数的任意一个字符上按`3K`\n* 查看宏定义：将光标置于待查看宏上，输入`[d`查看宏定义\n* 在末行模式执行shell命令，`:![cmd]`","slug":"Linux学习笔记之vim编辑器","published":1,"updated":"2020-08-23T13:24:16.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq7f000b9s72alm12k2u","content":"<p>vim是linux下非常强大的编译器，一旦熟练使用便爱不释手。<br>这里记录我学习过程中常用的一些linux指令。</p>\n<p>vim有三种工作模式，分别是 <strong>命令模式</strong>、 <strong>末行模式</strong>和文本模式。<br>这里主要记录命令模式和末行模式的一些快捷键。</p>\n<h4 id=\"1-移动光标\"><a href=\"#1-移动光标\" class=\"headerlink\" title=\"1 移动光标\"></a>1 移动光标</h4><ul>\n<li>左移：<code>h</code></li>\n<li>下移：<code>j</code></li>\n<li>上移：<code>k</code></li>\n<li>右移：<code>l</code></li>\n<li>跳转指定行： 命令模式下<code>nG</code>(n为行号) 、 末行模式下<code>:N</code></li>\n<li>跳转行首： <code>gg</code></li>\n<li>跳转行尾：<code>G</code></li>\n</ul>\n<h4 id=\"2-快速插入\"><a href=\"#2-快速插入\" class=\"headerlink\" title=\"2 快速插入\"></a>2 快速插入</h4><ul>\n<li>插入光标前一个字符：<code>i</code> </li>\n<li>插入行首：<code>I</code> </li>\n<li>插入光标后一个字符：<code>a</code></li>\n<li>插入行末：<code>A</code></li>\n<li>向下新开一行，插入行首：<code>o</code></li>\n<li>向上新开一行，插入行首：<code>O</code></li>\n<li>删除光标字符后开始插入：<code>s</code></li>\n<li>删除当前行后开始插入：<code>S</code></li>\n</ul>\n<h4 id=\"3-删除\"><a href=\"#3-删除\" class=\"headerlink\" title=\"3 删除\"></a>3 删除</h4><ul>\n<li>删除光标字符：<code>x</code></li>\n<li>删除光标至单词尾：<code>dw</code></li>\n<li>删除光标至行尾：<code>D/d$</code></li>\n<li>删除光标至行首：<code>d0</code></li>\n<li>删除光标所在行：<code>dd</code></li>\n<li>删除光标所在行及接下来的n-1行：<code>ndd</code></li>\n<li>光标字符替换为指定字符c: 按<code>rc</code></li>\n<li>删除指定区域：按V进入“视图模式”，通过hjkl选中区域，按d删除</li>\n</ul>\n<h4 id=\"4-复制粘贴\"><a href=\"#4-复制粘贴\" class=\"headerlink\" title=\"4 复制粘贴\"></a>4 复制粘贴</h4><ul>\n<li>复制：<code>yy</code></li>\n<li>粘贴：p(向前)/P（向后）</li>\n</ul>\n<h4 id=\"5-查找和替换\"><a href=\"#5-查找和替换\" class=\"headerlink\" title=\"5 查找和替换\"></a>5 查找和替换</h4><ul>\n<li>查找<ul>\n<li>查找文档是否存在某个内容：命令模式下按/，输入查找内容然后回车，按n检索下一个</li>\n<li>查找文档的某个单词在其他地方出现的位置：将单词至于任意一个字符上按<code>*</code>（向后查找）或者<code>#</code>（向前查找）</li>\n</ul>\n</li>\n<li>替换<ul>\n<li>单行替换：末行模式下， 输入<code>s /src_str/dst_str</code></li>\n<li>通篇替换：末行模式下， 输入<code>%s /src_str/dst_str/g</code></li>\n<li>指定行替换：末行模式下，输入<code>起始行号,结束行号s /src_str/dst_str/g</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-其他功能\"><a href=\"#6-其他功能\" class=\"headerlink\" title=\"6 其他功能\"></a>6 其他功能</h4><ul>\n<li>撤销：<code>u</code></li>\n<li>反撤销：<code>ctrl+r</code></li>\n<li>跳转至定括号：<code>%</code></li>\n<li>自动格式化程序：命令模式下<code>gg=G</code></li>\n<li>横分屏：输入<code>:sp</code>后回车（分屏之间切换ctrl+ww）</li>\n<li>竖分屏：输入<code>:vsp</code>后回车</li>\n<li>查看某个函数的帮助文档（man手册）：光标移到函数的任意一个字符上按<code>3K</code></li>\n<li>查看宏定义：将光标置于待查看宏上，输入<code>[d</code>查看宏定义</li>\n<li>在末行模式执行shell命令，<code>:![cmd]</code></li>\n</ul>\n","site":{"data":{}},"length":774,"excerpt":"","more":"<p>vim是linux下非常强大的编译器，一旦熟练使用便爱不释手。<br>这里记录我学习过程中常用的一些linux指令。</p>\n<p>vim有三种工作模式，分别是 <strong>命令模式</strong>、 <strong>末行模式</strong>和文本模式。<br>这里主要记录命令模式和末行模式的一些快捷键。</p>\n<h4 id=\"1-移动光标\"><a href=\"#1-移动光标\" class=\"headerlink\" title=\"1 移动光标\"></a>1 移动光标</h4><ul>\n<li>左移：<code>h</code></li>\n<li>下移：<code>j</code></li>\n<li>上移：<code>k</code></li>\n<li>右移：<code>l</code></li>\n<li>跳转指定行： 命令模式下<code>nG</code>(n为行号) 、 末行模式下<code>:N</code></li>\n<li>跳转行首： <code>gg</code></li>\n<li>跳转行尾：<code>G</code></li>\n</ul>\n<h4 id=\"2-快速插入\"><a href=\"#2-快速插入\" class=\"headerlink\" title=\"2 快速插入\"></a>2 快速插入</h4><ul>\n<li>插入光标前一个字符：<code>i</code> </li>\n<li>插入行首：<code>I</code> </li>\n<li>插入光标后一个字符：<code>a</code></li>\n<li>插入行末：<code>A</code></li>\n<li>向下新开一行，插入行首：<code>o</code></li>\n<li>向上新开一行，插入行首：<code>O</code></li>\n<li>删除光标字符后开始插入：<code>s</code></li>\n<li>删除当前行后开始插入：<code>S</code></li>\n</ul>\n<h4 id=\"3-删除\"><a href=\"#3-删除\" class=\"headerlink\" title=\"3 删除\"></a>3 删除</h4><ul>\n<li>删除光标字符：<code>x</code></li>\n<li>删除光标至单词尾：<code>dw</code></li>\n<li>删除光标至行尾：<code>D/d$</code></li>\n<li>删除光标至行首：<code>d0</code></li>\n<li>删除光标所在行：<code>dd</code></li>\n<li>删除光标所在行及接下来的n-1行：<code>ndd</code></li>\n<li>光标字符替换为指定字符c: 按<code>rc</code></li>\n<li>删除指定区域：按V进入“视图模式”，通过hjkl选中区域，按d删除</li>\n</ul>\n<h4 id=\"4-复制粘贴\"><a href=\"#4-复制粘贴\" class=\"headerlink\" title=\"4 复制粘贴\"></a>4 复制粘贴</h4><ul>\n<li>复制：<code>yy</code></li>\n<li>粘贴：p(向前)/P（向后）</li>\n</ul>\n<h4 id=\"5-查找和替换\"><a href=\"#5-查找和替换\" class=\"headerlink\" title=\"5 查找和替换\"></a>5 查找和替换</h4><ul>\n<li>查找<ul>\n<li>查找文档是否存在某个内容：命令模式下按/，输入查找内容然后回车，按n检索下一个</li>\n<li>查找文档的某个单词在其他地方出现的位置：将单词至于任意一个字符上按<code>*</code>（向后查找）或者<code>#</code>（向前查找）</li>\n</ul>\n</li>\n<li>替换<ul>\n<li>单行替换：末行模式下， 输入<code>s /src_str/dst_str</code></li>\n<li>通篇替换：末行模式下， 输入<code>%s /src_str/dst_str/g</code></li>\n<li>指定行替换：末行模式下，输入<code>起始行号,结束行号s /src_str/dst_str/g</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"6-其他功能\"><a href=\"#6-其他功能\" class=\"headerlink\" title=\"6 其他功能\"></a>6 其他功能</h4><ul>\n<li>撤销：<code>u</code></li>\n<li>反撤销：<code>ctrl+r</code></li>\n<li>跳转至定括号：<code>%</code></li>\n<li>自动格式化程序：命令模式下<code>gg=G</code></li>\n<li>横分屏：输入<code>:sp</code>后回车（分屏之间切换ctrl+ww）</li>\n<li>竖分屏：输入<code>:vsp</code>后回车</li>\n<li>查看某个函数的帮助文档（man手册）：光标移到函数的任意一个字符上按<code>3K</code></li>\n<li>查看宏定义：将光标置于待查看宏上，输入<code>[d</code>查看宏定义</li>\n<li>在末行模式执行shell命令，<code>:![cmd]</code></li>\n</ul>\n"},{"title":"Ubuntu下搭建ftp服务器","date":"2019-12-25T14:28:36.000Z","_content":"\n#### 1 下载vsftpd  \n```\nsudo apt-get install vsftpd\n```\n\n#### 2 修改配置文件\n\n```\nsudo vi /etc/vsftpd.conf\n```\n在vsftpd.conf中进行设置\n\n```\nanonymous_enable=YES\nlocal_enable=YES\nwrite_enable=YES\nanon_upload_enable=YES\nanon_mkdir_write_enable=YES\n```\n主要是打开wirte权限，其他是我嫌麻烦允许匿名上传，反正没人知道我的vps的ip...\n\n#### 3 创建ftp目录\n在home文件夹下创建一个ftp的工作目录\n\n```\nsudo mkdir /home/ftp\nsudo mkdir /home/ftp/download\nsudo mkdir /home/ftp/upload\n```\n\n#### 4 添加ftp用户\n```\nsudo useradd -d /home/ftp -s bin/bash username\nsudo passwd username\n```\n\n#### 5 启动vsftpd服务器\n\n```\nsudo service vsftpd start\n```\n\n#### 6 登录测试\n\n```\nftp 127.0.0.1\n```\n","source":"_posts/Ubuntu下搭建ftp服务器.md","raw":"---\ntitle: Ubuntu下搭建ftp服务器\ndate: 2019-12-25 22:28:36\ntags:\n    - Linux\n    - ftp\ncategories: Linux\n---\n\n#### 1 下载vsftpd  \n```\nsudo apt-get install vsftpd\n```\n\n#### 2 修改配置文件\n\n```\nsudo vi /etc/vsftpd.conf\n```\n在vsftpd.conf中进行设置\n\n```\nanonymous_enable=YES\nlocal_enable=YES\nwrite_enable=YES\nanon_upload_enable=YES\nanon_mkdir_write_enable=YES\n```\n主要是打开wirte权限，其他是我嫌麻烦允许匿名上传，反正没人知道我的vps的ip...\n\n#### 3 创建ftp目录\n在home文件夹下创建一个ftp的工作目录\n\n```\nsudo mkdir /home/ftp\nsudo mkdir /home/ftp/download\nsudo mkdir /home/ftp/upload\n```\n\n#### 4 添加ftp用户\n```\nsudo useradd -d /home/ftp -s bin/bash username\nsudo passwd username\n```\n\n#### 5 启动vsftpd服务器\n\n```\nsudo service vsftpd start\n```\n\n#### 6 登录测试\n\n```\nftp 127.0.0.1\n```\n","slug":"Ubuntu下搭建ftp服务器","published":1,"updated":"2020-08-23T13:24:16.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq7h000d9s72dt3yh70j","content":"<h4 id=\"1-下载vsftpd\"><a href=\"#1-下载vsftpd\" class=\"headerlink\" title=\"1 下载vsftpd\"></a>1 下载vsftpd</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-修改配置文件\"><a href=\"#2-修改配置文件\" class=\"headerlink\" title=\"2 修改配置文件\"></a>2 修改配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi &#x2F;etc&#x2F;vsftpd.conf</span><br></pre></td></tr></table></figure>\n<p>在vsftpd.conf中进行设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anonymous_enable&#x3D;YES</span><br><span class=\"line\">local_enable&#x3D;YES</span><br><span class=\"line\">write_enable&#x3D;YES</span><br><span class=\"line\">anon_upload_enable&#x3D;YES</span><br><span class=\"line\">anon_mkdir_write_enable&#x3D;YES</span><br></pre></td></tr></table></figure>\n<p>主要是打开wirte权限，其他是我嫌麻烦允许匿名上传，反正没人知道我的vps的ip…</p>\n<h4 id=\"3-创建ftp目录\"><a href=\"#3-创建ftp目录\" class=\"headerlink\" title=\"3 创建ftp目录\"></a>3 创建ftp目录</h4><p>在home文件夹下创建一个ftp的工作目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir &#x2F;home&#x2F;ftp</span><br><span class=\"line\">sudo mkdir &#x2F;home&#x2F;ftp&#x2F;download</span><br><span class=\"line\">sudo mkdir &#x2F;home&#x2F;ftp&#x2F;upload</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-添加ftp用户\"><a href=\"#4-添加ftp用户\" class=\"headerlink\" title=\"4 添加ftp用户\"></a>4 添加ftp用户</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd -d &#x2F;home&#x2F;ftp -s bin&#x2F;bash username</span><br><span class=\"line\">sudo passwd username</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-启动vsftpd服务器\"><a href=\"#5-启动vsftpd服务器\" class=\"headerlink\" title=\"5 启动vsftpd服务器\"></a>5 启动vsftpd服务器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service vsftpd start</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-登录测试\"><a href=\"#6-登录测试\" class=\"headerlink\" title=\"6 登录测试\"></a>6 登录测试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp 127.0.0.1</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"length":542,"excerpt":"","more":"<h4 id=\"1-下载vsftpd\"><a href=\"#1-下载vsftpd\" class=\"headerlink\" title=\"1 下载vsftpd\"></a>1 下载vsftpd</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-修改配置文件\"><a href=\"#2-修改配置文件\" class=\"headerlink\" title=\"2 修改配置文件\"></a>2 修改配置文件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi &#x2F;etc&#x2F;vsftpd.conf</span><br></pre></td></tr></table></figure>\n<p>在vsftpd.conf中进行设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anonymous_enable&#x3D;YES</span><br><span class=\"line\">local_enable&#x3D;YES</span><br><span class=\"line\">write_enable&#x3D;YES</span><br><span class=\"line\">anon_upload_enable&#x3D;YES</span><br><span class=\"line\">anon_mkdir_write_enable&#x3D;YES</span><br></pre></td></tr></table></figure>\n<p>主要是打开wirte权限，其他是我嫌麻烦允许匿名上传，反正没人知道我的vps的ip…</p>\n<h4 id=\"3-创建ftp目录\"><a href=\"#3-创建ftp目录\" class=\"headerlink\" title=\"3 创建ftp目录\"></a>3 创建ftp目录</h4><p>在home文件夹下创建一个ftp的工作目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir &#x2F;home&#x2F;ftp</span><br><span class=\"line\">sudo mkdir &#x2F;home&#x2F;ftp&#x2F;download</span><br><span class=\"line\">sudo mkdir &#x2F;home&#x2F;ftp&#x2F;upload</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-添加ftp用户\"><a href=\"#4-添加ftp用户\" class=\"headerlink\" title=\"4 添加ftp用户\"></a>4 添加ftp用户</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo useradd -d &#x2F;home&#x2F;ftp -s bin&#x2F;bash username</span><br><span class=\"line\">sudo passwd username</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-启动vsftpd服务器\"><a href=\"#5-启动vsftpd服务器\" class=\"headerlink\" title=\"5 启动vsftpd服务器\"></a>5 启动vsftpd服务器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service vsftpd start</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-登录测试\"><a href=\"#6-登录测试\" class=\"headerlink\" title=\"6 登录测试\"></a>6 登录测试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp 127.0.0.1</span><br></pre></td></tr></table></figure>\n"},{"title":"四旋翼无人机的数学模型","date":"2019-12-24T10:22:56.000Z","mathjax":true,"_content":"\n\n四旋翼的动力学模型包括平移动力学和旋转动力学两部分.\n以大地为参考系，模型可以表示为\n\n<center>\n    $$\n    \\begin{align*}\n    \\dot{\\mathbf{p}} &= \\mathbb{v} \\\\\n    m \\dot{\\mathbf{v}} &= -\\frac{f}{m}\\mathbf{Re_3} + g\\mathbf{e_3} \\\\\n    \\dot{\\mathbf{\\Theta}} &= W(\\mathbf{\\Theta})\\omega \\\\\n    \\dot{\\mathbf{\\omega}} &= -\\mathbf{\\omega} \\times \\mathbf{J \\omega} + \\mathbf{\\tau}\n    \\end{align*}\n    $$\n</center>\n其中，$m$是四旋翼的质量...\n","source":"_posts/linux.md","raw":"---\ntitle: 四旋翼无人机的数学模型\ndate: 2019-12-24 18:22:56\ntags: \ncategories: \nmathjax: true\n---\n\n\n四旋翼的动力学模型包括平移动力学和旋转动力学两部分.\n以大地为参考系，模型可以表示为\n\n<center>\n    $$\n    \\begin{align*}\n    \\dot{\\mathbf{p}} &= \\mathbb{v} \\\\\n    m \\dot{\\mathbf{v}} &= -\\frac{f}{m}\\mathbf{Re_3} + g\\mathbf{e_3} \\\\\n    \\dot{\\mathbf{\\Theta}} &= W(\\mathbf{\\Theta})\\omega \\\\\n    \\dot{\\mathbf{\\omega}} &= -\\mathbf{\\omega} \\times \\mathbf{J \\omega} + \\mathbf{\\tau}\n    \\end{align*}\n    $$\n</center>\n其中，$m$是四旋翼的质量...\n","slug":"linux","published":1,"updated":"2020-08-23T13:24:16.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq7i000f9s725wrn29u5","content":"<p>四旋翼的动力学模型包括平移动力学和旋转动力学两部分.<br>以大地为参考系，模型可以表示为</p>\n<center>\n    $$\n    \\begin{align*}\n    \\dot{\\mathbf{p}} &= \\mathbb{v} \\\\\n    m \\dot{\\mathbf{v}} &= -\\frac{f}{m}\\mathbf{Re_3} + g\\mathbf{e_3} \\\\\n    \\dot{\\mathbf{\\Theta}} &= W(\\mathbf{\\Theta})\\omega \\\\\n    \\dot{\\mathbf{\\omega}} &= -\\mathbf{\\omega} \\times \\mathbf{J \\omega} + \\mathbf{\\tau}\n    \\end{align*}\n    $$\n</center>\n其中，$m$是四旋翼的质量...\n","site":{"data":{}},"length":301,"excerpt":"","more":"<p>四旋翼的动力学模型包括平移动力学和旋转动力学两部分.<br>以大地为参考系，模型可以表示为</p>\n<center>\n    $$\n    \\begin{align*}\n    \\dot{\\mathbf{p}} &= \\mathbb{v} \\\\\n    m \\dot{\\mathbf{v}} &= -\\frac{f}{m}\\mathbf{Re_3} + g\\mathbf{e_3} \\\\\n    \\dot{\\mathbf{\\Theta}} &= W(\\mathbf{\\Theta})\\omega \\\\\n    \\dot{\\mathbf{\\omega}} &= -\\mathbf{\\omega} \\times \\mathbf{J \\omega} + \\mathbf{\\tau}\n    \\end{align*}\n    $$\n</center>\n其中，$m$是四旋翼的质量...\n"},{"title":"linux下文件的读写操作","date":"2020-01-05T06:29:46.000Z","_content":"\n#### 1 open函数\nopen函数有2个原型，一为接受两个参数，一为接受三个参数。\n\n##### 1.1 原型一：接受两个参数\n```\nint open(char *pathname, int flags)\n```\n###### 参数\n+ pathname：文件路径名\n+ flags：文件打开方式，可以是O_RDONLY | O_WRONLY | O_RDWR、O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK\n\n###### 返回值\n+ 成功：返回打开文件得到的文件描述符\n+ 失败：-1，并设置error\n\n##### 1.2 原型二：接受三个参数\n```\nint open(char *pathname, int flags)\n```\n###### 参数\n+ pathname：文件路径名\n+ flags：文件打开方式，可以是O_RDONLY | O_WRONLY | O_RDWR、O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK\n+ mode：当flags设置为O_CREAT时，才可设置mode。mode的取值为8进制数，用来描述文件的访问权限。例如：0664代表rw-rw-r--权限。\n\n###### 返回值\n+ 成功：返回打开文件得到的文件描述符\n+ 失败：-1，并设置error\n\n#### 2 close函数\n##### 原型\n```\nint close(int fd);\n```\n\n##### 参数\n+ fd：关闭文件的文件描述符\n\n##### 返回值\n+0：成功\n+-1：失败\n\n#### 3 read函数\n\n##### 原型\n```\nssize_t read(int fd, void *buf, size_t count)\n```\n##### 参数\n+ fd：文件描述符\n+ buf：存数据的缓冲区\n+ count：缓冲区大小\n\n##### 返回值\n+ 成功：读到的字节数\n+ 失败：-1，并设置error\n+ -1：\n\n#### 4 write函数\n\n##### 原型\n```\nssize_t read(int fd, const void *buf, size_t count)\n```\n##### 参数\n+ fd：文件描述符\n+ buf：待写出的数据的缓冲区\n+ count：写出的字节数\n\n##### 返回值\n+ 成功：写入的字节数\n+ 失败：-1，并设置error\n\n**例：**\n```\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n\nint main()\n{\n    int fd = 0;\n    char buf[1024];\n    int n;\n    fd = open(\"/dev/tty\", O_RDONLY | O_NONBLOCK);\n    if (fd < 0) {\n        perror(\"open /dev/tty\");\n        exit(1);\n    }\n\ntryagain:\n    n = read(fd, buf, 10);\n    if (n < 0) {\n        if (errno != EAGAIN) {\n            perror(\"read /dev/tty\");\n            exit(1);\n        } else {\n        write(STDOUT_FILENO, \"try again\\n\", strlen(\"try again\\n\"));\n        sleep(2);\n        goto tryagain;\n        }\n    } \n    write(STDOUT_FILENO, buf, n);\n    close(fd);\n\n    return 0;\n}\n```\n**注：**读网络文件和设备文件时，读普通文件不会产生阻塞。阻塞和非阻塞时文件的属性，而不是read/write函数的属性。\n\n#### 5 fcntl函数\n可以在不重新打开文件的情况下，修改文件的属性。\n\n##### 原型\n```\nint fcntl(int fd, int cmd, ... /* arg */)\n```\n\n##### 参数\n+ fd：文件描述符\n+ cmd：文件属性的控制命令\n    - F_GETFL：获取文件属性\n    - F_SETFL：设置文件属性\n+ arg：控制文件的属性\n\n例：\n```\nint flags = fcntl(fd, F_GETFL);\nflags |= O_NONBLOCK;\nfcntl(fd, F_SETFL, flags);\n```\n\n#### 6 lseek函数\n##### 原型\n```\noff_t lseek(int fd, off_t offset, int whence)\n```\n\n##### 功能\n可以通过`offset`参数重定位文件描述符`fd`所对应的文件的偏移量\n\n##### 参数\n+ fd：待操作文件的文件描述符\n+ offset：偏移量\n+ whence：起始偏移位置\n    - SEEK_SET：定位为文件起始\n    - SEEK_CUR：定位为当前位置\n    - SEEK_END：定位为文件末尾\n\n##### 返回值\n成功：返回从文件起始开始的偏移值\n失败：-1\n**注：**文件的读、写是用一个偏移量。\n\n**例：**\n```\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n\nint main()\n{\n    int fd, n;\n    char *msg = \"It's a test for lseek.\\n\";\n    char ch;\n\n    fd = open(\"lseek.txt\", O_RDWR | O_CREAT, 0664);\n    if (n < 0) {\n        perror(\"open lseek.txt error\");\n        exit(1);\n    }\n\n    write(fd, msg, strlen(msg));\n    lseek(fd, 0, SEEK_SET);\n\n    while ((n = read(fd, &ch, 1))) {\n        if (n < 0) {\n            perror(\"read error\");\n            exit(1);\n        }\n        write(STDOUT_FILENO, &ch, n);\n    }\n    return 0;\n}\n```\n\n#### 7 stat函数\n##### 原型\n```\nint stat(const char *path, struct stat* buf)\n```\n\n##### 参数\n+ path：文件路径\n+ buf：传出参数，存放文件属性的结构体\n\n##### 返回值\n+ 成功：0\n+ 失败：-1，设置errno\n\n**例：**查看文件大小。\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/stat.h>\n\nint main(int argc, char *argv[])\n{\n\tstruct stat buf;\n\n\tint ret = stat(argv[1], &buf);\n\tif (ret == -1) {\n\t\tperror(\"stat error\");\n\t\texit(1);\n\t}\n\n\tprintf(\"file size: %d\\n\", buf.st_size);\n\n\treturn 0;\n}\n\n```\n**注：**stat函数是可以穿透符号连接的（即，如果操查看的是软连接，得到的是软连接指向的文件是属性）。如果不想穿透符号连接，可以使用lstat函数。","source":"_posts/linux下文件的读写操作.md","raw":"---\ntitle: linux下文件的读写操作\ndate: 2020-01-05 14:29:46\ntags:\n    - linux\ncategories: linux\n---\n\n#### 1 open函数\nopen函数有2个原型，一为接受两个参数，一为接受三个参数。\n\n##### 1.1 原型一：接受两个参数\n```\nint open(char *pathname, int flags)\n```\n###### 参数\n+ pathname：文件路径名\n+ flags：文件打开方式，可以是O_RDONLY | O_WRONLY | O_RDWR、O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK\n\n###### 返回值\n+ 成功：返回打开文件得到的文件描述符\n+ 失败：-1，并设置error\n\n##### 1.2 原型二：接受三个参数\n```\nint open(char *pathname, int flags)\n```\n###### 参数\n+ pathname：文件路径名\n+ flags：文件打开方式，可以是O_RDONLY | O_WRONLY | O_RDWR、O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK\n+ mode：当flags设置为O_CREAT时，才可设置mode。mode的取值为8进制数，用来描述文件的访问权限。例如：0664代表rw-rw-r--权限。\n\n###### 返回值\n+ 成功：返回打开文件得到的文件描述符\n+ 失败：-1，并设置error\n\n#### 2 close函数\n##### 原型\n```\nint close(int fd);\n```\n\n##### 参数\n+ fd：关闭文件的文件描述符\n\n##### 返回值\n+0：成功\n+-1：失败\n\n#### 3 read函数\n\n##### 原型\n```\nssize_t read(int fd, void *buf, size_t count)\n```\n##### 参数\n+ fd：文件描述符\n+ buf：存数据的缓冲区\n+ count：缓冲区大小\n\n##### 返回值\n+ 成功：读到的字节数\n+ 失败：-1，并设置error\n+ -1：\n\n#### 4 write函数\n\n##### 原型\n```\nssize_t read(int fd, const void *buf, size_t count)\n```\n##### 参数\n+ fd：文件描述符\n+ buf：待写出的数据的缓冲区\n+ count：写出的字节数\n\n##### 返回值\n+ 成功：写入的字节数\n+ 失败：-1，并设置error\n\n**例：**\n```\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n\nint main()\n{\n    int fd = 0;\n    char buf[1024];\n    int n;\n    fd = open(\"/dev/tty\", O_RDONLY | O_NONBLOCK);\n    if (fd < 0) {\n        perror(\"open /dev/tty\");\n        exit(1);\n    }\n\ntryagain:\n    n = read(fd, buf, 10);\n    if (n < 0) {\n        if (errno != EAGAIN) {\n            perror(\"read /dev/tty\");\n            exit(1);\n        } else {\n        write(STDOUT_FILENO, \"try again\\n\", strlen(\"try again\\n\"));\n        sleep(2);\n        goto tryagain;\n        }\n    } \n    write(STDOUT_FILENO, buf, n);\n    close(fd);\n\n    return 0;\n}\n```\n**注：**读网络文件和设备文件时，读普通文件不会产生阻塞。阻塞和非阻塞时文件的属性，而不是read/write函数的属性。\n\n#### 5 fcntl函数\n可以在不重新打开文件的情况下，修改文件的属性。\n\n##### 原型\n```\nint fcntl(int fd, int cmd, ... /* arg */)\n```\n\n##### 参数\n+ fd：文件描述符\n+ cmd：文件属性的控制命令\n    - F_GETFL：获取文件属性\n    - F_SETFL：设置文件属性\n+ arg：控制文件的属性\n\n例：\n```\nint flags = fcntl(fd, F_GETFL);\nflags |= O_NONBLOCK;\nfcntl(fd, F_SETFL, flags);\n```\n\n#### 6 lseek函数\n##### 原型\n```\noff_t lseek(int fd, off_t offset, int whence)\n```\n\n##### 功能\n可以通过`offset`参数重定位文件描述符`fd`所对应的文件的偏移量\n\n##### 参数\n+ fd：待操作文件的文件描述符\n+ offset：偏移量\n+ whence：起始偏移位置\n    - SEEK_SET：定位为文件起始\n    - SEEK_CUR：定位为当前位置\n    - SEEK_END：定位为文件末尾\n\n##### 返回值\n成功：返回从文件起始开始的偏移值\n失败：-1\n**注：**文件的读、写是用一个偏移量。\n\n**例：**\n```\n#include <stdio.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <string.h>\n\nint main()\n{\n    int fd, n;\n    char *msg = \"It's a test for lseek.\\n\";\n    char ch;\n\n    fd = open(\"lseek.txt\", O_RDWR | O_CREAT, 0664);\n    if (n < 0) {\n        perror(\"open lseek.txt error\");\n        exit(1);\n    }\n\n    write(fd, msg, strlen(msg));\n    lseek(fd, 0, SEEK_SET);\n\n    while ((n = read(fd, &ch, 1))) {\n        if (n < 0) {\n            perror(\"read error\");\n            exit(1);\n        }\n        write(STDOUT_FILENO, &ch, n);\n    }\n    return 0;\n}\n```\n\n#### 7 stat函数\n##### 原型\n```\nint stat(const char *path, struct stat* buf)\n```\n\n##### 参数\n+ path：文件路径\n+ buf：传出参数，存放文件属性的结构体\n\n##### 返回值\n+ 成功：0\n+ 失败：-1，设置errno\n\n**例：**查看文件大小。\n```\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n#include <sys/stat.h>\n\nint main(int argc, char *argv[])\n{\n\tstruct stat buf;\n\n\tint ret = stat(argv[1], &buf);\n\tif (ret == -1) {\n\t\tperror(\"stat error\");\n\t\texit(1);\n\t}\n\n\tprintf(\"file size: %d\\n\", buf.st_size);\n\n\treturn 0;\n}\n\n```\n**注：**stat函数是可以穿透符号连接的（即，如果操查看的是软连接，得到的是软连接指向的文件是属性）。如果不想穿透符号连接，可以使用lstat函数。","slug":"linux下文件的读写操作","published":1,"updated":"2020-08-23T13:24:16.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke8qrq97001c9s721t2709ua","content":"<h4 id=\"1-open函数\"><a href=\"#1-open函数\" class=\"headerlink\" title=\"1 open函数\"></a>1 open函数</h4><p>open函数有2个原型，一为接受两个参数，一为接受三个参数。</p>\n<h5 id=\"1-1-原型一：接受两个参数\"><a href=\"#1-1-原型一：接受两个参数\" class=\"headerlink\" title=\"1.1 原型一：接受两个参数\"></a>1.1 原型一：接受两个参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int open(char *pathname, int flags)</span><br></pre></td></tr></table></figure>\n<h6 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h6><ul>\n<li>pathname：文件路径名</li>\n<li>flags：文件打开方式，可以是O_RDONLY | O_WRONLY | O_RDWR、O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK</li>\n</ul>\n<h6 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h6><ul>\n<li>成功：返回打开文件得到的文件描述符</li>\n<li>失败：-1，并设置error</li>\n</ul>\n<h5 id=\"1-2-原型二：接受三个参数\"><a href=\"#1-2-原型二：接受三个参数\" class=\"headerlink\" title=\"1.2 原型二：接受三个参数\"></a>1.2 原型二：接受三个参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int open(char *pathname, int flags)</span><br></pre></td></tr></table></figure>\n<h6 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h6><ul>\n<li>pathname：文件路径名</li>\n<li>flags：文件打开方式，可以是O_RDONLY | O_WRONLY | O_RDWR、O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK</li>\n<li>mode：当flags设置为O_CREAT时，才可设置mode。mode的取值为8进制数，用来描述文件的访问权限。例如：0664代表rw-rw-r–权限。</li>\n</ul>\n<h6 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h6><ul>\n<li>成功：返回打开文件得到的文件描述符</li>\n<li>失败：-1，并设置error</li>\n</ul>\n<h4 id=\"2-close函数\"><a href=\"#2-close函数\" class=\"headerlink\" title=\"2 close函数\"></a>2 close函数</h4><h5 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int close(int fd);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：关闭文件的文件描述符</li>\n</ul>\n<h5 id=\"返回值-2\"><a href=\"#返回值-2\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>+0：成功<br>+-1：失败</p>\n<h4 id=\"3-read函数\"><a href=\"#3-read函数\" class=\"headerlink\" title=\"3 read函数\"></a>3 read函数</h4><h5 id=\"原型-1\"><a href=\"#原型-1\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssize_t read(int fd, void *buf, size_t count)</span><br></pre></td></tr></table></figure>\n<h5 id=\"参数-3\"><a href=\"#参数-3\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：文件描述符</li>\n<li>buf：存数据的缓冲区</li>\n<li>count：缓冲区大小</li>\n</ul>\n<h5 id=\"返回值-3\"><a href=\"#返回值-3\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><ul>\n<li>成功：读到的字节数</li>\n<li>失败：-1，并设置error</li>\n<li>-1：</li>\n</ul>\n<h4 id=\"4-write函数\"><a href=\"#4-write函数\" class=\"headerlink\" title=\"4 write函数\"></a>4 write函数</h4><h5 id=\"原型-2\"><a href=\"#原型-2\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssize_t read(int fd, const void *buf, size_t count)</span><br></pre></td></tr></table></figure>\n<h5 id=\"参数-4\"><a href=\"#参数-4\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：文件描述符</li>\n<li>buf：待写出的数据的缓冲区</li>\n<li>count：写出的字节数</li>\n</ul>\n<h5 id=\"返回值-4\"><a href=\"#返回值-4\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><ul>\n<li>成功：写入的字节数</li>\n<li>失败：-1，并设置error</li>\n</ul>\n<p><strong>例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int fd &#x3D; 0;</span><br><span class=\"line\">    char buf[1024];</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    fd &#x3D; open(&quot;&#x2F;dev&#x2F;tty&quot;, O_RDONLY | O_NONBLOCK);</span><br><span class=\"line\">    if (fd &lt; 0) &#123;</span><br><span class=\"line\">        perror(&quot;open &#x2F;dev&#x2F;tty&quot;);</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tryagain:</span><br><span class=\"line\">    n &#x3D; read(fd, buf, 10);</span><br><span class=\"line\">    if (n &lt; 0) &#123;</span><br><span class=\"line\">        if (errno !&#x3D; EAGAIN) &#123;</span><br><span class=\"line\">            perror(&quot;read &#x2F;dev&#x2F;tty&quot;);</span><br><span class=\"line\">            exit(1);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">        write(STDOUT_FILENO, &quot;try again\\n&quot;, strlen(&quot;try again\\n&quot;));</span><br><span class=\"line\">        sleep(2);</span><br><span class=\"line\">        goto tryagain;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    write(STDOUT_FILENO, buf, n);</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong>读网络文件和设备文件时，读普通文件不会产生阻塞。阻塞和非阻塞时文件的属性，而不是read/write函数的属性。</p>\n<h4 id=\"5-fcntl函数\"><a href=\"#5-fcntl函数\" class=\"headerlink\" title=\"5 fcntl函数\"></a>5 fcntl函数</h4><p>可以在不重新打开文件的情况下，修改文件的属性。</p>\n<h5 id=\"原型-3\"><a href=\"#原型-3\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int fcntl(int fd, int cmd, ... &#x2F;* arg *&#x2F;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数-5\"><a href=\"#参数-5\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：文件描述符</li>\n<li>cmd：文件属性的控制命令<ul>\n<li>F_GETFL：获取文件属性</li>\n<li>F_SETFL：设置文件属性</li>\n</ul>\n</li>\n<li>arg：控制文件的属性</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int flags &#x3D; fcntl(fd, F_GETFL);</span><br><span class=\"line\">flags |&#x3D; O_NONBLOCK;</span><br><span class=\"line\">fcntl(fd, F_SETFL, flags);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-lseek函数\"><a href=\"#6-lseek函数\" class=\"headerlink\" title=\"6 lseek函数\"></a>6 lseek函数</h4><h5 id=\"原型-4\"><a href=\"#原型-4\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">off_t lseek(int fd, off_t offset, int whence)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h5><p>可以通过<code>offset</code>参数重定位文件描述符<code>fd</code>所对应的文件的偏移量</p>\n<h5 id=\"参数-6\"><a href=\"#参数-6\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：待操作文件的文件描述符</li>\n<li>offset：偏移量</li>\n<li>whence：起始偏移位置<ul>\n<li>SEEK_SET：定位为文件起始</li>\n<li>SEEK_CUR：定位为当前位置</li>\n<li>SEEK_END：定位为文件末尾</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"返回值-5\"><a href=\"#返回值-5\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>成功：返回从文件起始开始的偏移值<br>失败：-1<br><strong>注：</strong>文件的读、写是用一个偏移量。</p>\n<p><strong>例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int fd, n;</span><br><span class=\"line\">    char *msg &#x3D; &quot;It&#39;s a test for lseek.\\n&quot;;</span><br><span class=\"line\">    char ch;</span><br><span class=\"line\"></span><br><span class=\"line\">    fd &#x3D; open(&quot;lseek.txt&quot;, O_RDWR | O_CREAT, 0664);</span><br><span class=\"line\">    if (n &lt; 0) &#123;</span><br><span class=\"line\">        perror(&quot;open lseek.txt error&quot;);</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    write(fd, msg, strlen(msg));</span><br><span class=\"line\">    lseek(fd, 0, SEEK_SET);</span><br><span class=\"line\"></span><br><span class=\"line\">    while ((n &#x3D; read(fd, &amp;ch, 1))) &#123;</span><br><span class=\"line\">        if (n &lt; 0) &#123;</span><br><span class=\"line\">            perror(&quot;read error&quot;);</span><br><span class=\"line\">            exit(1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        write(STDOUT_FILENO, &amp;ch, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-stat函数\"><a href=\"#7-stat函数\" class=\"headerlink\" title=\"7 stat函数\"></a>7 stat函数</h4><h5 id=\"原型-5\"><a href=\"#原型-5\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int stat(const char *path, struct stat* buf)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数-7\"><a href=\"#参数-7\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>path：文件路径</li>\n<li>buf：传出参数，存放文件属性的结构体</li>\n</ul>\n<h5 id=\"返回值-6\"><a href=\"#返回值-6\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><ul>\n<li>成功：0</li>\n<li>失败：-1，设置errno</li>\n</ul>\n<p><strong>例：</strong>查看文件大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;sys&#x2F;stat.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstruct stat buf;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint ret &#x3D; stat(argv[1], &amp;buf);</span><br><span class=\"line\">\tif (ret &#x3D;&#x3D; -1) &#123;</span><br><span class=\"line\">\t\tperror(&quot;stat error&quot;);</span><br><span class=\"line\">\t\texit(1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(&quot;file size: %d\\n&quot;, buf.st_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong>stat函数是可以穿透符号连接的（即，如果操查看的是软连接，得到的是软连接指向的文件是属性）。如果不想穿透符号连接，可以使用lstat函数。</p>\n","site":{"data":{}},"length":3088,"excerpt":"","more":"<h4 id=\"1-open函数\"><a href=\"#1-open函数\" class=\"headerlink\" title=\"1 open函数\"></a>1 open函数</h4><p>open函数有2个原型，一为接受两个参数，一为接受三个参数。</p>\n<h5 id=\"1-1-原型一：接受两个参数\"><a href=\"#1-1-原型一：接受两个参数\" class=\"headerlink\" title=\"1.1 原型一：接受两个参数\"></a>1.1 原型一：接受两个参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int open(char *pathname, int flags)</span><br></pre></td></tr></table></figure>\n<h6 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h6><ul>\n<li>pathname：文件路径名</li>\n<li>flags：文件打开方式，可以是O_RDONLY | O_WRONLY | O_RDWR、O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK</li>\n</ul>\n<h6 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h6><ul>\n<li>成功：返回打开文件得到的文件描述符</li>\n<li>失败：-1，并设置error</li>\n</ul>\n<h5 id=\"1-2-原型二：接受三个参数\"><a href=\"#1-2-原型二：接受三个参数\" class=\"headerlink\" title=\"1.2 原型二：接受三个参数\"></a>1.2 原型二：接受三个参数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int open(char *pathname, int flags)</span><br></pre></td></tr></table></figure>\n<h6 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h6><ul>\n<li>pathname：文件路径名</li>\n<li>flags：文件打开方式，可以是O_RDONLY | O_WRONLY | O_RDWR、O_CREAT | O_APPEND | O_TRUNC | O_EXCL | O_NONBLOCK</li>\n<li>mode：当flags设置为O_CREAT时，才可设置mode。mode的取值为8进制数，用来描述文件的访问权限。例如：0664代表rw-rw-r–权限。</li>\n</ul>\n<h6 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h6><ul>\n<li>成功：返回打开文件得到的文件描述符</li>\n<li>失败：-1，并设置error</li>\n</ul>\n<h4 id=\"2-close函数\"><a href=\"#2-close函数\" class=\"headerlink\" title=\"2 close函数\"></a>2 close函数</h4><h5 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int close(int fd);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数-2\"><a href=\"#参数-2\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：关闭文件的文件描述符</li>\n</ul>\n<h5 id=\"返回值-2\"><a href=\"#返回值-2\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>+0：成功<br>+-1：失败</p>\n<h4 id=\"3-read函数\"><a href=\"#3-read函数\" class=\"headerlink\" title=\"3 read函数\"></a>3 read函数</h4><h5 id=\"原型-1\"><a href=\"#原型-1\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssize_t read(int fd, void *buf, size_t count)</span><br></pre></td></tr></table></figure>\n<h5 id=\"参数-3\"><a href=\"#参数-3\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：文件描述符</li>\n<li>buf：存数据的缓冲区</li>\n<li>count：缓冲区大小</li>\n</ul>\n<h5 id=\"返回值-3\"><a href=\"#返回值-3\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><ul>\n<li>成功：读到的字节数</li>\n<li>失败：-1，并设置error</li>\n<li>-1：</li>\n</ul>\n<h4 id=\"4-write函数\"><a href=\"#4-write函数\" class=\"headerlink\" title=\"4 write函数\"></a>4 write函数</h4><h5 id=\"原型-2\"><a href=\"#原型-2\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssize_t read(int fd, const void *buf, size_t count)</span><br></pre></td></tr></table></figure>\n<h5 id=\"参数-4\"><a href=\"#参数-4\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：文件描述符</li>\n<li>buf：待写出的数据的缓冲区</li>\n<li>count：写出的字节数</li>\n</ul>\n<h5 id=\"返回值-4\"><a href=\"#返回值-4\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><ul>\n<li>成功：写入的字节数</li>\n<li>失败：-1，并设置error</li>\n</ul>\n<p><strong>例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int fd &#x3D; 0;</span><br><span class=\"line\">    char buf[1024];</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    fd &#x3D; open(&quot;&#x2F;dev&#x2F;tty&quot;, O_RDONLY | O_NONBLOCK);</span><br><span class=\"line\">    if (fd &lt; 0) &#123;</span><br><span class=\"line\">        perror(&quot;open &#x2F;dev&#x2F;tty&quot;);</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tryagain:</span><br><span class=\"line\">    n &#x3D; read(fd, buf, 10);</span><br><span class=\"line\">    if (n &lt; 0) &#123;</span><br><span class=\"line\">        if (errno !&#x3D; EAGAIN) &#123;</span><br><span class=\"line\">            perror(&quot;read &#x2F;dev&#x2F;tty&quot;);</span><br><span class=\"line\">            exit(1);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">        write(STDOUT_FILENO, &quot;try again\\n&quot;, strlen(&quot;try again\\n&quot;));</span><br><span class=\"line\">        sleep(2);</span><br><span class=\"line\">        goto tryagain;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    write(STDOUT_FILENO, buf, n);</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong>读网络文件和设备文件时，读普通文件不会产生阻塞。阻塞和非阻塞时文件的属性，而不是read/write函数的属性。</p>\n<h4 id=\"5-fcntl函数\"><a href=\"#5-fcntl函数\" class=\"headerlink\" title=\"5 fcntl函数\"></a>5 fcntl函数</h4><p>可以在不重新打开文件的情况下，修改文件的属性。</p>\n<h5 id=\"原型-3\"><a href=\"#原型-3\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int fcntl(int fd, int cmd, ... &#x2F;* arg *&#x2F;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数-5\"><a href=\"#参数-5\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：文件描述符</li>\n<li>cmd：文件属性的控制命令<ul>\n<li>F_GETFL：获取文件属性</li>\n<li>F_SETFL：设置文件属性</li>\n</ul>\n</li>\n<li>arg：控制文件的属性</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int flags &#x3D; fcntl(fd, F_GETFL);</span><br><span class=\"line\">flags |&#x3D; O_NONBLOCK;</span><br><span class=\"line\">fcntl(fd, F_SETFL, flags);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-lseek函数\"><a href=\"#6-lseek函数\" class=\"headerlink\" title=\"6 lseek函数\"></a>6 lseek函数</h4><h5 id=\"原型-4\"><a href=\"#原型-4\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">off_t lseek(int fd, off_t offset, int whence)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h5><p>可以通过<code>offset</code>参数重定位文件描述符<code>fd</code>所对应的文件的偏移量</p>\n<h5 id=\"参数-6\"><a href=\"#参数-6\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>fd：待操作文件的文件描述符</li>\n<li>offset：偏移量</li>\n<li>whence：起始偏移位置<ul>\n<li>SEEK_SET：定位为文件起始</li>\n<li>SEEK_CUR：定位为当前位置</li>\n<li>SEEK_END：定位为文件末尾</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"返回值-5\"><a href=\"#返回值-5\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>成功：返回从文件起始开始的偏移值<br>失败：-1<br><strong>注：</strong>文件的读、写是用一个偏移量。</p>\n<p><strong>例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;fcntl.h&gt;</span><br><span class=\"line\">#include &lt;errno.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int fd, n;</span><br><span class=\"line\">    char *msg &#x3D; &quot;It&#39;s a test for lseek.\\n&quot;;</span><br><span class=\"line\">    char ch;</span><br><span class=\"line\"></span><br><span class=\"line\">    fd &#x3D; open(&quot;lseek.txt&quot;, O_RDWR | O_CREAT, 0664);</span><br><span class=\"line\">    if (n &lt; 0) &#123;</span><br><span class=\"line\">        perror(&quot;open lseek.txt error&quot;);</span><br><span class=\"line\">        exit(1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    write(fd, msg, strlen(msg));</span><br><span class=\"line\">    lseek(fd, 0, SEEK_SET);</span><br><span class=\"line\"></span><br><span class=\"line\">    while ((n &#x3D; read(fd, &amp;ch, 1))) &#123;</span><br><span class=\"line\">        if (n &lt; 0) &#123;</span><br><span class=\"line\">            perror(&quot;read error&quot;);</span><br><span class=\"line\">            exit(1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        write(STDOUT_FILENO, &amp;ch, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-stat函数\"><a href=\"#7-stat函数\" class=\"headerlink\" title=\"7 stat函数\"></a>7 stat函数</h4><h5 id=\"原型-5\"><a href=\"#原型-5\" class=\"headerlink\" title=\"原型\"></a>原型</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int stat(const char *path, struct stat* buf)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"参数-7\"><a href=\"#参数-7\" class=\"headerlink\" title=\"参数\"></a>参数</h5><ul>\n<li>path：文件路径</li>\n<li>buf：传出参数，存放文件属性的结构体</li>\n</ul>\n<h5 id=\"返回值-6\"><a href=\"#返回值-6\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><ul>\n<li>成功：0</li>\n<li>失败：-1，设置errno</li>\n</ul>\n<p><strong>例：</strong>查看文件大小。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;sys&#x2F;stat.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tstruct stat buf;</span><br><span class=\"line\"></span><br><span class=\"line\">\tint ret &#x3D; stat(argv[1], &amp;buf);</span><br><span class=\"line\">\tif (ret &#x3D;&#x3D; -1) &#123;</span><br><span class=\"line\">\t\tperror(&quot;stat error&quot;);</span><br><span class=\"line\">\t\texit(1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintf(&quot;file size: %d\\n&quot;, buf.st_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注：</strong>stat函数是可以穿透符号连接的（即，如果操查看的是软连接，得到的是软连接指向的文件是属性）。如果不想穿透符号连接，可以使用lstat函数。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cke8qrq6v00029s72c96a2e57","category_id":"cke8qrq7400059s722h7g0vp2","_id":"cke8qrq7i000e9s72falparhq"},{"post_id":"cke8qrq7a00079s7248fqe1ty","category_id":"cke8qrq7e000a9s724ldk25c6","_id":"cke8qrq7k000j9s724nycgc0x"},{"post_id":"cke8qrq7d00099s725cek1v73","category_id":"cke8qrq7j000g9s72f7fk09si","_id":"cke8qrq7s000p9s723ztybbvs"},{"post_id":"cke8qrq7f000b9s72alm12k2u","category_id":"cke8qrq7e000a9s724ldk25c6","_id":"cke8qrq7u000s9s72a9rp6jx1"},{"post_id":"cke8qrq7h000d9s72dt3yh70j","category_id":"cke8qrq7q000o9s72219ph0a9","_id":"cke8qrq7v000w9s721kdkc7a3"},{"post_id":"cke8qrq97001c9s721t2709ua","category_id":"cke8qrq7e000a9s724ldk25c6","_id":"cke8qrq9d001h9s72hzuoc7e7"}],"PostTag":[{"post_id":"cke8qrq6n00019s72h6cg2gti","tag_id":"cke8qrq6y00039s72a2je9xl1","_id":"cke8qrq7k000i9s72bc6hbbyi"},{"post_id":"cke8qrq6n00019s72h6cg2gti","tag_id":"cke8qrq7c00089s724chp6cig","_id":"cke8qrq7l000l9s722jel27pw"},{"post_id":"cke8qrq6n00019s72h6cg2gti","tag_id":"cke8qrq7g000c9s72fqkz630z","_id":"cke8qrq7p000n9s72aq9xc57m"},{"post_id":"cke8qrq6v00029s72c96a2e57","tag_id":"cke8qrq7k000h9s721vzgfeoh","_id":"cke8qrq7u000r9s721oxk77o8"},{"post_id":"cke8qrq6v00029s72c96a2e57","tag_id":"cke8qrq7n000m9s7261xw54d0","_id":"cke8qrq7u000t9s728j6k4oh4"},{"post_id":"cke8qrq7200049s72c0h75950","tag_id":"cke8qrq7t000q9s726paubyq8","_id":"cke8qrq7v000v9s727k9r3qyv"},{"post_id":"cke8qrq7500069s727mb0h6wb","tag_id":"cke8qrq7u000u9s7266ssaoah","_id":"cke8qrq7v000y9s7202gh4avi"},{"post_id":"cke8qrq7a00079s7248fqe1ty","tag_id":"cke8qrq7t000q9s726paubyq8","_id":"cke8qrq7w00119s723iphfjhy"},{"post_id":"cke8qrq7a00079s7248fqe1ty","tag_id":"cke8qrq7v000z9s72ghdyh89f","_id":"cke8qrq7w00129s72gsk47aax"},{"post_id":"cke8qrq7d00099s725cek1v73","tag_id":"cke8qrq7w00109s724w7j9j1m","_id":"cke8qrq7x00149s72b4kr6bnp"},{"post_id":"cke8qrq7f000b9s72alm12k2u","tag_id":"cke8qrq7t000q9s726paubyq8","_id":"cke8qrq7y00179s72cdt786b6"},{"post_id":"cke8qrq7f000b9s72alm12k2u","tag_id":"cke8qrq7n000m9s7261xw54d0","_id":"cke8qrq7y00189s72g4iagr3x"},{"post_id":"cke8qrq7h000d9s72dt3yh70j","tag_id":"cke8qrq7k000h9s721vzgfeoh","_id":"cke8qrq7y001a9s7269dchhhc"},{"post_id":"cke8qrq7h000d9s72dt3yh70j","tag_id":"cke8qrq7y00199s720umsfo8e","_id":"cke8qrq7y001b9s72bskp6lyp"},{"post_id":"cke8qrq97001c9s721t2709ua","tag_id":"cke8qrq7t000q9s726paubyq8","_id":"cke8qrq9b001f9s72crpsgaso"}],"Tag":[{"name":"deepin","_id":"cke8qrq6y00039s72a2je9xl1"},{"name":"texlive","_id":"cke8qrq7c00089s724chp6cig"},{"name":"vscode","_id":"cke8qrq7g000c9s72fqkz630z"},{"name":"Linux","_id":"cke8qrq7k000h9s721vzgfeoh"},{"name":"vim","_id":"cke8qrq7n000m9s7261xw54d0"},{"name":"linux","_id":"cke8qrq7t000q9s726paubyq8"},{"name":"git","_id":"cke8qrq7u000u9s7266ssaoah"},{"name":"gdb","_id":"cke8qrq7v000z9s72ghdyh89f"},{"name":"nonlinear control","_id":"cke8qrq7w00109s724w7j9j1m"},{"name":"ftp","_id":"cke8qrq7y00199s720umsfo8e"}]}}